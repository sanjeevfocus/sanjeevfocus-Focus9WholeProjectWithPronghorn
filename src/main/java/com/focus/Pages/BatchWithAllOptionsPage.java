package com.focus.Pages;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.xml.xpath.XPath;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

import com.focus.base.BaseEngine;
import com.focus.supporters.ExcelReader;
import com.focus.utilities.POJOUtility;

public class BatchWithAllOptionsPage extends BaseEngine 
{

	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-new icon-font6']")
	private static WebElement  newBtn;
	
	@FindBy(xpath="//div[@id='id_transaction_homescreen_edit']//span[@class='icon-edit icon-font6 ImagesinArabic']")
	private static WebElement  editBtn;
	
	
	@FindBy(xpath="//span[@class='icon-print icon-font6']")
	private static WebElement  printBtn;
	
	
	@FindBy(xpath="//div[@id='id_transaction_homescreen_Delete']//span[@class='icon-delete icon-font6']")
	private static WebElement  deleteBtn;
	
	
	@FindBy(xpath="//span[@class='icon-authorize icon-font6']")
	private static WebElement  authorizeBtn;
	
	
	@FindBy(xpath="//span[@class='icon-suspend icon-font6']")
	private static WebElement  suspendBtn;
	
	
	@FindBy(xpath="//span[@class='icon-reject2 icon-font6']")
	private static WebElement  rejectBtn;
	
	
	@FindBy(xpath="//span[@class='icon-cheque icon-font6']")
	private static WebElement  chequeReturnBtn;
	
	@FindBy(xpath="//span[@class='icon-printbarcode icon-font6']")
	private static WebElement  printBarcodeBtn;
	
	@FindBy(xpath="//span[@class='icon-convert icon-font6']")
	private static WebElement  convertBtn;
	
	@FindBy(xpath="//span[@class='icon-export icon-font6']")
	private static WebElement  exportToXMLBtn;  
		
	
	@FindBy(xpath="//div[@id='myNavbar']//span[@class='icon-settings icon-font6']")
	private static WebElement  settingsBtn;
	
	@FindBy(xpath="//div[@id='dvHomeTransClose']")  
	private static WebElement  voucherhomeCloseBtn;
			
	// Header Section Completed
	
	
	//Main Section
	
	@FindBy(xpath="//a[@class='transaction_viewname_anchor theme_color-inverse font-5']")
	private static WebElement  allVouchersOption;
	
	@FindBy(xpath="//a[@class='transaction_viewname_anchor font-5']")
	private static WebElement  pendingBillsOption;
	
	@FindBy(xpath="//input[@id='SelectDefaultView']")
	private static WebElement  selectDefaultViewChkBox;
	
	
	@FindBy(xpath="//span[@class='icon-sorting icon-font6 toolbar_button_image theme_button_color dropdown-toggle']")
	private static WebElement  sortingBtn;
	
	
   @FindBy(xpath="//div[@id='btnCreateView']//span[@class='icon-new icon-font6']")
   private static WebElement  createViewBtn;

   @FindBy(xpath="//div[@id='btnCustomize']//span[@class='icon-settings icon-font6']")
   private static WebElement  customizeBtn;
   
   @FindBy(xpath="//span[@class='icon-filter icon-font6']")
   private static WebElement  filterBtn;
   
   @FindBy(xpath="//span[@id='reportRefresh']")
   private static WebElement  refreshBtn;
   
   @FindBy(xpath="//i[@class='icon-font6 icon-export']")
   private static WebElement  exportBtn;
   
 
	///// Options Btn  (Display Option)	
   @FindBy(xpath="//span[@id='transOptions']")
   private static WebElement  optionsBtn;
   
   @FindBy(xpath="//a[contains(text(),'Auto Adjust Width')]")
   private static WebElement  autoAdjustWidthBtn;
   
   @FindBy(xpath="//a[contains(text(),'Fit To Screen')]")
   private static WebElement  fitToScreenBtn;
   
   @FindBy(xpath="//a[contains(text(),'Normal')]")
   private static WebElement  normalBtn;
   

	
   // Grid Elements
			

				
	//Grid Header CheckBox
	@FindBy(xpath="//input[@id='HeaderChkBox']")
	private static WebElement  grid_HeaderChkBox;	
	
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[3]")
	private static WebElement  grid_Header_Date;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[4]")
	private static WebElement  grid_Header_VoucherNumber;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[5]")
	private static WebElement  grid_Header_CreatedBy;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[6]")
	private static WebElement  grid_Header_ModifiedBy;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[7]")
	private static WebElement  grid_Header_CreatedDate;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[8]")
	private static WebElement  grid_Header_ModifiedDate;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[9]")
	private static WebElement  grid_Header_CreatedTime;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[10]")
	private static WebElement  grid_Header_ModifiedTime;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[11]")
	private static WebElement  grid_Header_Suspended;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[12]")
	private static WebElement  grid_Header_Cancelled;
	
	@FindBy(xpath="//*[@id='tblHeadTransRenderRow']/th[13]")
	private static WebElement  grid_Header_AuthorizationStatus;
	
	
	
	
	//Grid Voucher DetailsBtn
	@FindBy(xpath="//tr[@id='trRender_1']//i[@class='icon-info icon-font7']")
	private static WebElement  grid_VoucherDetailsBtn1;
	
	@FindBy(xpath="//tr[@id='trRender_2']//i[@class='icon-info icon-font7']")
	private static WebElement  grid_VoucherDetailsBtn2;
	
	
	
	//Grid CheckBox 1 And 2
	@FindBy(xpath="//tr[@id='trRender_1']//td//input")
	private static WebElement  grid_ChkBox1;
	
	@FindBy(xpath="//tr[@id='trRender_2']//td//input")
	private static WebElement  grid_ChkBox2;
				
	////////////////
	
	// Footer Section
	
	@FindBy(xpath="//div[@id='tblFooterReportRender']//input[@id='txtSearch']")
	private static WebElement  searchField;
							
	@FindBy(xpath="//button[@id='frstPage']")
	private static WebElement  firstPageBtn;

	@FindBy(xpath="//button[@id='id_previousPage']")
	private static WebElement  previousPageBtn;

	@FindBy(xpath="//button[@id='id_pagenumber']")
	private static WebElement  currentPageNo;

	@FindBy(xpath="//button[@id='id_nextPage']")
	private static WebElement  nextPageBtn;

	@FindBy(xpath="//button[@id='lstPage']")
	private static WebElement  lastPageBtn;
	
	
	////////////////
	
	//New Screen Elements
	
	

	// Vouchers_New Header Section
	
	@FindBy(xpath="//span[@class='icon-scroll icon-font6']")
	private static WebElement  freeFlowBtn;
	
	@FindBy(xpath="//span[@class='icon-header icon-font6']")
	private static WebElement  jumpToHeaderSectionBtn;
	
	@FindBy(xpath="//span[@class='icon-panel icon-font6']")
	private static WebElement  jumpToBodySectionBtn;
	
	@FindBy(xpath="//span[@class='icon-footer icon-font6']")
	private static WebElement  jumpToFooterBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_new']")
	private static WebElement  new_newBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_save']")
	private static WebElement  saveBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_previous']")
	private static WebElement  previousBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_next']")
	private static WebElement  nextBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_print']")
	private static WebElement  new_PrintBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_suspend']")
	private static WebElement  new_SuspendBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_close']")
	private static WebElement  new_CloseBtn;

	@FindBy(xpath="//div[@id='id_transactionentry_delete']//span[contains(@class,'icon-delete icon-font6')]")
	private static WebElement  new_DeleteBtn;
	
	
	
	@FindBy(xpath="//span[@class='icon-menu icon-font4']")
	private static WebElement  toggleBtn;
	
	@FindBy(xpath="//*[@id='id_transactionentry_copydocument']")
	private static WebElement  copyDocumentOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_copytoclipboard']")
	private static WebElement  copyToClipBoardOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_pastefromclipboard']")
	private static WebElement  pasteFromClipBoardOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_raisechequereturn']")
	private static WebElement  raiseCheckReturnOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_addtostock']")
	private static WebElement  addToStockOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_markconvert']")
	private static WebElement  markConvertedOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_bominput']")
	private static WebElement  bomInputOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_autoallocate']")
	private static WebElement  autoAllocateOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_reverseentry']")
	private static WebElement  reverseEntryOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_printbarcode']")
	private static WebElement  printBarcodeOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_postingdetails']")
	private static WebElement  postingDetailsOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_exporttoxml']")
	private static WebElement  exportToXMLOption;
	
	@FindBy(xpath="//*[@id='id_transactionentry_settings']")
	private static WebElement  settingsOption;
	
	
	////// Header Section Completed
	
	// Main Section
	@FindBy(xpath="//input[@id='id_header_1']")
	private static WebElement  documentNumberTxt;
	
	
	
	@FindBy(xpath="//*[@id='id_header_1_input_image']/span")
	private static WebElement  documentNumberDropdown_ExpansionBtn;
	
	@FindBy(xpath="//input[@id='id_header_2']")
	private static WebElement  dateTxt;
	
	@FindBy(xpath="//td[@id='id_header_2_input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement  dateTxt_CalenderBtn;
	
	@FindBy(xpath="//tr[@id='id_header_2_day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
	private static WebElement  calender_TodayBtn;
	
	
	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  cashBankAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  cashBankAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  cashBankAccount_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
				private static WebElement  cashBankAccount_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
				private static WebElement  cashBankAccount_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
							private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Fielddropdown;
																
							@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
							private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
							private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
																
							@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
							private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[@class='panel']//input[3]")
							private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[@class='panel']//input[4]")
							private static WebElement  cashBankAccount_Settings_StandardFieldsBtn_CancelBtn;
										
										
				@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
				private static WebElement  cashBankAccount_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  cashBankAccount_Settings_OkBtn;
								
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  cashBankAccount_Settings_CancelBtn;
					
	@FindBy(xpath="//input[@id='id_header_268435459']")
	private static WebElement  departmentTxt;
	
	@FindBy(xpath="//*[@id='id_header_268435459_input_image']/span")
	private static WebElement  department_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_268435459_input_settings']/span")
	private static WebElement  department_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_container']")
				private static WebElement  department_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_268435459_customize_popup_footer']//input[1]")
				private static WebElement  department_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_list']")
							private static WebElement  department_Settings_StandardFieldsBtn_Fielddropdown;
																
							@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_header']")
							private static WebElement  department_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_268435459_customize_popup_standardfields_alignment']")
							private static WebElement  department_Settings_StandardFieldsBtn_Alignmentdropdown;
																
							@FindBy(xpath="//input[@id='id_header_268435459_customize_popup_standardfields_width']")
							private static WebElement  department_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[@class='panel']//input[3]")
							private static WebElement  department_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[@class='panel']//input[4]")
							private static WebElement  department_Settings_StandardFieldsBtn_CancelBtn;
										
										
				@FindBy(xpath="//div[@id='id_header_268435459_search_container']//input[2]")
				private static WebElement  department_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  department_Settings_OkBtn;
								
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  department_Settings_CancelBtn;
	
	@FindBy(xpath="//*[@id='id_header_6']")
	private static WebElement  maturityDateTxt;
	
	@FindBy(xpath="//*[@id='id_header_6_input_image']/span']")
	private static WebElement  maturityDateTxt_CalenderBtn;
	
	@FindBy(xpath="//input[@id='id_header_3']")
	private static WebElement  purchaseAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
	private static WebElement  purchaseAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
	private static WebElement  purchaseAccount_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
				private static WebElement  purchaseAccount_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
				private static WebElement  purchaseAccount_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
							private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Fielddropdown;
																
							@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
							private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
							private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
																
							@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
							private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[@class='panel']//input[3]")
							private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[@class='panel']//input[4]")
							private static WebElement  purchaseAccount_Settings_StandardFieldsBtn_CancelBtn;
										
										
				@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
				private static WebElement  purchaseAccount_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  purchaseAccount_Settings_OkBtn;
								
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  purchaseAccount_Settings_CancelBtn;
	
	
	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  vendorAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  vendorAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  vendorAccount_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
				private static WebElement  vendorAccount_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
				private static WebElement  vendorAccount_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
							private static WebElement  vendorAccount_Settings_StandardFieldsBtn_Fielddropdown;
																
							@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
							private static WebElement  vendorAccount_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
							private static WebElement  vendorAccount_Settings_StandardFieldsBtn_AlignmentDropdown;
																
							@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
							private static WebElement  vendorAccount_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[@class='panel']//input[3]")
							private static WebElement  vendorAccount_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[@class='panel']//input[4]")
							private static WebElement  vendorAccount_Settings_StandardFieldsBtn_CancelBtn;
										
										
				@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
				private static WebElement  vendorAccount_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  vendorAccount_Settings_OkBtn;
								
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  vendorAccount_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_header_3']")
	private static WebElement  salesAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_3_input_image']/span")
	private static WebElement  salesAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_3_input_settings']/span")
	private static WebElement  salesAccount_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_3_customize_popup_container']")
				private static WebElement  salesAccount_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_3_customize_popup_footer']//input[1]")
				private static WebElement  salesAccount_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_list']")
							private static WebElement  salesAccount_Settings_StandardFieldsBtn_Fielddropdown;
																
							@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_header']")
							private static WebElement  salesAccount_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_3_customize_popup_standardfields_alignment']")
							private static WebElement  salesAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
																
							@FindBy(xpath="//input[@id='id_header_3_customize_popup_standardfields_width']")
							private static WebElement  salesAccount_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[@class='panel']//input[3]")
							private static WebElement  salesAccount_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[@class='panel']//input[4]")
							private static WebElement  salesAccount_Settings_StandardFieldsBtn_CancelBtn;
										
										
				@FindBy(xpath="//div[@id='id_header_3_search_container']//input[2]")
				private static WebElement  salesAccount_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  salesAccount_Settings_OkBtn;
								
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  salesAccount_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_header_4']")
	private static WebElement  customerAccountTxt;
	
	@FindBy(xpath="//*[@id='id_header_4_input_image']/span")
	private static WebElement  customerAccount_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  customerAccount_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
				private static WebElement  customerAccount_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
				private static WebElement  customerAccount_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
							private static WebElement  customerAccount_Settings_StandardFieldsBtn_FieldDrpdwn;
																
							@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
							private static WebElement  customerAccount_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
							private static WebElement  customerAccount_Settings_StandardFieldsBtn_AlignmentDrpdwn;
																
							@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
							private static WebElement  customerAccount_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[@class='panel']//input[3]")
							private static WebElement  customerAccount_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[@class='panel']//input[4]")
							private static WebElement  customerAccount_Settings_StandardFieldsBtn_CancelBtn;
										
										
				@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
				private static WebElement  customerAccount_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  customerAccount_Settings_OkBtn;
								
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  customerAccount_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_header_12']")
	private static WebElement  accountTxt;
	
	@FindBy(xpath="//*[@id='id_header_12_input_image']/span")
	private static WebElement  account_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_4_input_settings']/span")
	private static WebElement  account_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_4_customize_popup_container']")
				private static WebElement  account_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_4_customize_popup_footer']//input[1]")
				private static WebElement  account_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_list']")
							private static WebElement  account_Settings_StandardFieldsBtn_FieldDrpdwn;
																
							@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_header']")
							private static WebElement  account_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_4_customize_popup_standardfields_alignment']")
							private static WebElement  account_Settings_StandardFieldsBtn_Alignmentdrpdwn;
																
							@FindBy(xpath="//input[@id='id_header_4_customize_popup_standardfields_width']")
							private static WebElement  account_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[@class='panel']//input[3]")
							private static WebElement  account_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[@class='panel']//input[4]")
							private static WebElement  account_Settings_StandardFieldsBtn_CancelBtn;
										
										
				@FindBy(xpath="//div[@id='id_header_4_search_container']//input[2]")
				private static WebElement  account_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  account_Settings_OkBtn;
								
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  account_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_header_31']")
	private static WebElement  issuesReceiptsTxt;
	
	@FindBy(xpath="//input[@id='id_header_268435460']")
	private static WebElement  warehouseTxt;
	
	@FindBy(xpath="//*[@id='id_header_268435460_input_image']/span")
	private static WebElement  warehouse_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_header_268435460_input_settings']/span")
	private static WebElement  warehouse_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_container']")
				private static WebElement  warehouse_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_268435460_customize_popup_footer']//input[1]")
				private static WebElement  warehouse_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_list']")
							private static WebElement  warehouse_Settings_StandardFieldsBtn_Fielddropdown;
																
							@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_header']")
							private static WebElement  warehouse_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_268435460_customize_popup_standardfields_alignment']")
							private static WebElement  warehouse_Settings_StandardFieldsBtn_Alignmentdropdown;
																
							@FindBy(xpath="//input[@id='id_header_268435460_customize_popup_standardfields_width']")
							private static WebElement  warehouse_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[@class='panel']//input[3]")
							private static WebElement  warehouse_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[@class='panel']//input[4]")
							private static WebElement  warehouse_Settings_StandardFieldsBtn_CancelBtn;
										
				@FindBy(xpath="//div[@id='id_header_268435460_search_container']//input[2]")
				private static WebElement  warehouse_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  warehouse_Settings_OkBtn;
								
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  warehouse_Settings_CancelBtn;
	
	@FindBy(xpath="//span[contains(text(),'sName')]")
	private static WebElement  customize_sName;
	
	@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Code')]")
	private static WebElement  customize_sCode;
	
	@FindBy(xpath="//span[contains(text(),'Alias')]")
	private static WebElement  customize_Alias;
	
	@FindBy(xpath="//span[@class='vcenter'][contains(text(),'Group')]")
	private static WebElement  customize_bGroup;
	
	@FindBy(xpath="//span[contains(@class,'vcenter')][contains(text(),'Balance')]")
	private static WebElement  customize_Balance;
	
	@FindBy(xpath="//input[@id='id_header_67108920']")
	private static WebElement  appropriateBasedOnDrpdwn;
	
	@FindBy(xpath="//input[@id='id_header_67108921']")
	private static WebElement  additionalValueTxt;
	
	@FindBy(xpath="//input[@id='id_header_21']")
	private static WebElement  raiseReceiptsChkBox;
	
	@FindBy(xpath="//input[@id='id_header_67108865']")
	private static WebElement  receipts_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108868']")
	private static WebElement  payments_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108871']")
	private static WebElement  pettyCash_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108874']")
	private static WebElement  postDatedReceipts_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108865']")
	private static WebElement  postDatedPayments_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108924']")
	private static WebElement  purchaseVouchers_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108881']")
	private static WebElement  purchaseReturns_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108884']")
	private static WebElement  salesInvoice_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108885']")
	private static WebElement  salesReturns_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108913']")
	private static WebElement  cashSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108914']")
	private static WebElement  hirePurchaseSales_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108890']")
	private static WebElement  journalEntries_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108916']")
	private static WebElement  forexJV_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108910']")
	private static WebElement  interDepartmentalJV_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108888']")
	private static WebElement  nonStandardJournalEntries_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108892']")
	private static WebElement  debitNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108911']")
	private static WebElement  debitNotesLineWise_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108893']")
	private static WebElement  creditNotes_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108912']")
	private static WebElement  creditNotesLineWisePayroll_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108894']")
	private static WebElement  openingBalance_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108891']")
	private static WebElement  fixedAssetDepreciationVoucher_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108909']")
	private static WebElement  requestForQuote_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108903']")
	private static WebElement  purchasesQuotations_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement  purchasesOrders_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108882']")
	private static WebElement  materialReceiptsNotes_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108904']")
	private static WebElement  salesQuotations_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108887']")
	private static WebElement  deliveryNotes_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108917']")
	private static WebElement  posSales_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108918']")
	private static WebElement  productionOrder_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108886']")
	private static WebElement  salesOrders_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108895']")
	private static WebElement  shortageInStock_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108896']")
	private static WebElement  excessesInStock_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108897']")
	private static WebElement  stockTransfers_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108898']")
	private static WebElement  openingStocks_NarrationTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108923']")
	private static WebElement  openingStocksNEW_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108908']")
	private static WebElement  materialRequisition_NarrationTxt;

	@FindBy(xpath="//input[@id='id_header_67108866']")
	private static WebElement  receipts_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108869']")
	private static WebElement  payments_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108872']")
	private static WebElement  pettyCash_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108875']")
	private static WebElement  postDatedReceipts_ChequeNoTxt;
	
	@FindBy(xpath="//input[@id='id_header_67108878']")
	private static WebElement  postDatedPayments_ChequeNoTxt;

	
	
	@FindBy(xpath="//input[@id='id_body_536870916']")
	private static WebElement  pvWarehouseTxt;
	
	@FindBy(xpath="//td[@id='id_body_536870916_input_image']//span[@class='icon-down-arrow optioncontrol_arrow_margin']")
	private static WebElement  pvWarehouse_ExpansionBtn;
	
	@FindBy(xpath="//td[@id='id_body_536870916_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement  pvWarehouse_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_container']")
				private static WebElement  pvWarehouse_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_body_536870916_customize_popup_footer']//input[1]")
				private static WebElement  pvWarehouse_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_list']")
							private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_Fielddropdown;
																
							@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_header']")
							private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_body_536870916_customize_popup_standardfields_alignment']")
							private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_Alignmentdropdown;
																
							@FindBy(xpath="//input[@id='id_body_536870916_customize_popup_standardfields_width']")
							private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[@class='panel']//input[3]")
							private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[@class='panel']//input[4]")
							private static WebElement  pvWarehouse_Settings_StandardFieldsBtn_CancelBtn;
										
				@FindBy(xpath="//div[@id='id_body_536870916_search_container']//input[2]")
				private static WebElement  pvWarehouse_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[@class='panel']//input[3]")
				private static WebElement  pvWarehouse_Settings_OkBtn;
								
				@FindBy(xpath="//div[@class='panel']//input[4]")
				private static WebElement  pvWarehouse_Settings_CancelBtn;
	
	// Grid Elements
	
					
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_Account;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_Item;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_1']")
	private static WebElement  grid_Header_DebitAC;
	
	@FindBy(xpath="//th[@id='id_transaction_entry_detail_table_control_heading_2']")
	private static WebElement  Grid_Header_CreditAC;
	
	//
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[1]")
	private static WebElement  firstRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
	private static WebElement  secondRowIndex;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[1]")
	private static WebElement  thirdRowIndex;
	
	@FindBy(xpath="//span[@class='icon-delete icon-font8']")
	private static WebElement  deleteRowBtn;
	
	@FindBy(xpath="//span[@class='icon-insertrow icon-font8']")
	private static WebElement  insertRowBtn;
	
	@FindBy(xpath="//span[@class='icon-selectall icon-font8']")
	private static WebElement  selectRowBtn;
	
	@FindBy(xpath="//span[@class='icon-unselectall1 icon-font8']")
	private static WebElement  unSelectRowBtn;
	
	@FindBy(xpath="//span[@class='icon-clone icon-font8']")
	private static WebElement  duplicateRowBtn;

	//
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_14']")
	private static WebElement  pvEntryPageTableHeader14thCol;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_15']")
	private static WebElement  pvEntryPageTableHeader15thCol;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_control_heading_16']")
	private static WebElement  pvEntryPageTableHeader16thCol;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[2]")
	private static WebElement  select1stRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[3]")
	private static WebElement  select1stRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[4]")
	private static WebElement  select1stRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[5]")
	private static WebElement  select1stRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[6]")
	private static WebElement  select1stRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[7]")
	private static WebElement  select1stRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[8]")
	private static WebElement  select1stRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[9]")
	private static WebElement  select1stRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[10]")
	private static WebElement  select1stRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[11]")
	private static WebElement  select1stRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[12]")
	private static WebElement  select1stRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[13]")
	private static WebElement  select1stRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[14]")
	private static WebElement  select1stRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[15]")
	private static WebElement  select1stRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[16]")
	private static WebElement  select1stRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[17]")
	private static WebElement  select1stRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[18]")
	private static WebElement  select1stRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[19]")
	private static WebElement  select1stRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[20]")
	private static WebElement  select1stRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[21]")
	private static WebElement  select1stRow_20thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[22]")
	private static WebElement  select1stRow_21stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[23]")
	private static WebElement  select1stRow_22ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[24]")
	private static WebElement  select1stRow_23rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[1]/td[25]")
	private static WebElement  select1stRow_24thColumn;
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[1]")
	private static WebElement selectSerialNo2;
	
	@FindBy (xpath="//div[contains(text(),'Delete Row')]")
	private static WebElement selectSerialNoDeleteRow; 
	
	@FindBy (xpath="//div[contains(text(),'Insert Row')]")
	private static WebElement selectSerialNoInsertRow;
	
	@FindBy (xpath="//div[contains(text(),'Select Row')]")
	private static WebElement selectSerialNoSelectRow;
	
	@FindBy (xpath="//div[contains(text(),'Duplicate Row')]")
	private static WebElement selectSerialNoDuplicateRow;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[2]")
	private static WebElement  select2ndRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[3]")
	private static WebElement  select2ndRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[4]")
	private static WebElement  select2ndRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[5]")
	private static WebElement  select2ndRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[6]")
	private static WebElement  select2ndRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[7]")
	private static WebElement  select2ndRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[8]")
	private static WebElement  select2ndRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[9]")
	private static WebElement  select2ndRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[10]")
	private static WebElement  select2ndRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[11]")
	private static WebElement  select2ndRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[12]")
	private static WebElement  select2ndRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[13]")
	private static WebElement  select2ndRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[14]")
	private static WebElement  select2ndRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[15]")
	private static WebElement  select2ndRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[16]")
	private static WebElement  select2ndRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[17]")
	private static WebElement  select2ndRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[18]")
	private static WebElement  select2ndRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[19]")
	private static WebElement  select2ndRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[2]/td[20]")
	private static WebElement  select2ndRow_19thColumn;
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[2]")
	private static WebElement  select3rdRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[3]")
	private static WebElement  select3rdRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[4]")
	private static WebElement  select3rdRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[5]")
	private static WebElement  select3rdRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[6]")
	private static WebElement  select3rdRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[7]")
	private static WebElement  select3rdRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[8]")
	private static WebElement  select3rdRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[9]")
	private static WebElement  select3rdRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[10]")
	private static WebElement  select3rdRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[11]")
	private static WebElement  select3rdRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[12]")
	private static WebElement  select3rdRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[13]")
	private static WebElement  select3rdRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[14]")
	private static WebElement  select3rdRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[15]")
	private static WebElement  select3rdRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[16]")
	private static WebElement  select3rdRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[17]")
	private static WebElement  select3rdRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[18]")
	private static WebElement  select3rdRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[19]")
	private static WebElement  select3rdRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[20]")
	private static WebElement  select3rdRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[21]")
	private static WebElement  select3rdRow_20thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[3]/td[22]")
	private static WebElement  select3rdRow_21stColumn;
	
	
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[2]")
	private static WebElement  select4thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[3]")
	private static WebElement  select4thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[4]")
	private static WebElement  select4thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[5]")
	private static WebElement  select4thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[6]")
	private static WebElement  select4thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[7]")
	private static WebElement  select4thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[8]")
	private static WebElement  select4thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[9]")
	private static WebElement  select4thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[10]")
	private static WebElement  select4thRow_9thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[11]")
	private static WebElement  select4thRow_10thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[12]")
	private static WebElement  select4thRow_11thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[13]")
	private static WebElement  select4thRow_12thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[14]")
	private static WebElement  select4thRow_13thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[15]")
	private static WebElement  select4thRow_14thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[16]")
	private static WebElement  select4thRow_15thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[17]")
	private static WebElement  select4thRow_16thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[18]")
	private static WebElement  select4thRow_17thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[19]")
	private static WebElement  select4thRow_18thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[20]")
	private static WebElement  select4thRow_19thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[21]")
	private static WebElement  select4thRow_20thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[4]/td[22]")
	private static WebElement  select4thRow_21stColumn;
	
	
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[2]")
	private static WebElement  select5thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[3]")
	private static WebElement  select5thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[4]")
	private static WebElement  select5thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[5]")
	private static WebElement  select5thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[6]")
	private static WebElement  select5thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[7]")
	private static WebElement  select5thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[8]")
	private static WebElement  select5thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[9]")
	private static WebElement  select5thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[5]/td[10]")
	private static WebElement  select5thRow_9thColumn;
	
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[2]")
	private static WebElement  select6thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[3]")
	private static WebElement  select6thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[4]")
	private static WebElement  select6thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[5]")
	private static WebElement  select6thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[6]")
	private static WebElement  select6thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[7]")
	private static WebElement  select6thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[8]")
	private static WebElement  select6thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[9]")
	private static WebElement  select6thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[6]/td[10]")
	private static WebElement  select6thRow_9thColumn;
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[2]")
	private static WebElement  select7thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[3]")
	private static WebElement  select7thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[4]")
	private static WebElement  select7thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[5]")
	private static WebElement  select7thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[6]")
	private static WebElement  select7thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[7]")
	private static WebElement  select7thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[8]")
	private static WebElement  select7thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[9]")
	private static WebElement  select7thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[7]/td[10]")
	private static WebElement  select7thRow_9thColumn;
	
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[2]")
	private static WebElement  select8thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[3]")
	private static WebElement  select8thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[4]")
	private static WebElement  select8thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[5]")
	private static WebElement  select8thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[6]")
	private static WebElement  select8thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[7]")
	private static WebElement  select8thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[8]")
	private static WebElement  select8thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[9]")
	private static WebElement  select8thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[8]/td[10]")
	private static WebElement  select8thRow_9thColumn;
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[2]")
	private static WebElement  select9thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[3]")
	private static WebElement  select9thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[4]")
	private static WebElement  select9thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[5]")
	private static WebElement  select9thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[6]")
	private static WebElement  select9thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[7]")
	private static WebElement  select9thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[8]")
	private static WebElement  select9thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[9]")
	private static WebElement  select9thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[9]/td[10]")
	private static WebElement  select9thRow_9thColumn;
	
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[2]")
	private static WebElement  select10thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[3]")
	private static WebElement  select10thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[4]")
	private static WebElement  select10thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[5]")
	private static WebElement  select10thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[6]")
	private static WebElement  select10thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[7]")
	private static WebElement  select10thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[8]")
	private static WebElement  select10thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[9]")
	private static WebElement  select10thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[10]/td[10]")
	private static WebElement  select10thRow_9thColumn;
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[2]")
	private static WebElement  select11thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[3]")
	private static WebElement  select11thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[4]")
	private static WebElement  select11thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[5]")
	private static WebElement  select11thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[6]")
	private static WebElement  select11thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[7]")
	private static WebElement  select11thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[8]")
	private static WebElement  select11thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[9]")
	private static WebElement  select11thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[11]/td[10]")
	private static WebElement  select11thRow_9thColumn;
	
	
	
	
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[2]")
	private static WebElement  select12thRow_1stColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[3]")
	private static WebElement  select12thRow_2ndColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[4]")
	private static WebElement  select12thRow_3rdColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[5]")
	private static WebElement  select12thRow_4thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[6]")
	private static WebElement  select12thRow_5thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[7]")
	private static WebElement  select12thRow_6thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[8]")
	private static WebElement  select12thRow_7thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[9]")
	private static WebElement  select12thRow_8thColumn;
	
	@FindBy(xpath="//*[@id='id_transaction_entry_detail_table_body']/tr[12]/td[10]")
	private static WebElement  select12thRow_9thColumn;
	
	
	
	
	
	@FindBy(xpath="//input[@id='MasterGroup__101']")
	private static WebElement  subLedgerAccountTxt;
	
	@FindBy(xpath="//span[@class='optioncontrol_arrow_margin icon-down-arrow']")
	private static WebElement  subLedgerAccount_ExpansionBtn;
	
	@FindBy(xpath="//td[@id='MasterGroup__101_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
	private static WebElement  subLedgerAccount_SettingsBtn;
	
				@FindBy(xpath="//div[@id='MasterGroup__101_customize_popup_container']")
				private static WebElement  subLedgerAccount_Settings_Container;
										
				@FindBy(xpath="//div[@id='MasterGroup__101_customize_popup_footer']//input[1]")
				private static WebElement  subLedgerAccount_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='MasterGroup__101_customize_popup_standardfields_list']")
							private static WebElement  subLedgerAccount_Settings_StandardFieldsBtn_Fielddropdown;
																
							@FindBy(xpath="//input[@id='MasterGroup__101_customize_popup_standardfields_header']")
							private static WebElement  subLedgerAccount_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='MasterGroup__101_customize_popup_standardfields_alignment']")
							private static WebElement  subLedgerAccount_Settings_StandardFieldsBtn_Alignmentdropdown;
																
							@FindBy(xpath="//input[@id='MasterGroup__101_customize_popup_standardfields_width']")
							private static WebElement  subLedgerAccount_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//section[@id='reportView']//input[3]")
							private static WebElement  subLedgerAccount_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//section[@id='reportView']//input[4]")
							private static WebElement  subLedgerAccount_Settings_StandardFieldsBtn_CancelBtn;
										
										
				@FindBy(xpath="//div[@id='MasterGroup__101_search_container']//input[2]")
				private static WebElement  subLedgerAccount_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//section[@id='reportView']//input[3]")
				private static WebElement  subLedgerAccount_Settings_OkBtn;
								
				@FindBy(xpath="//section[@id='reportView']//input[4]")
				private static WebElement  subLedgerAccount_Settings_CancelBtn;
	
	
	
				@FindBy(xpath="//*[@id='1']/div/div")
				private static WebElement  homeMenu;   

				@FindBy(xpath="//*[@id='1000']/span")
				private static WebElement  homeMasterMenu;

				@FindBy(xpath="//*[@id='221']/span")
				private static WebElement  homeMasterItemMenu;

				@FindBy(xpath="//*[@id='1105']/span")
				private static WebElement  homeMasterItem_ItemMenu;

				@FindBy(xpath="//*[@id='1114']/span")
				private static WebElement  ItemUnitsMenu;

				@FindBy(xpath="//*[@id='72']/span")
				private static WebElement  ItemUnitConversionMenu;
			
				@FindBy(xpath="//*[@id='76']/span")
				private static WebElement  ItemSellerPriceBookMenu;

				@FindBy(xpath="//*[@id='80']/span")
				private static WebElement  ItemBuyerPriceBookMenu;

			    @FindBy(xpath="//*[@id='18']/span")
				private static WebElement  ItemBarcodeDefinitionMenu;


			     //Item Master
				
			     @FindBy(xpath="//*[@id='spnHeaderText']")
			     private static WebElement item_ItemLabel;

			     @FindBy(xpath="//*[@id='btnNew']")
			     private static WebElement itemNewBtn;

				     @FindBy(xpath="//*[@id='divBtnGroup0']/div/a")
				     private static WebElement ItemNewnewGeneralBtn;
							     
					     @FindBy(xpath="//input[@id='sName']")
					     private static WebElement newGeneralName;
					     
					     @FindBy(xpath="//input[@id='sCode']")
					     private static WebElement newGeneralCode;
					     
					     @FindBy(xpath="//select[@id='iProductType']")
					     private static WebElement newGeneralItemTypeDropDown;
					     
					     @FindBy(xpath="//input[@id='fReorderLevel']")
					     private static WebElement newGeneralReorderLevel;
					     
					     @FindBy(xpath="//input[@id='iBinCapacity']")
					     private static WebElement newGeneralBinCapacity;
					     
					     @FindBy(xpath="//select[@id='iValuationMethod']")
					     private static WebElement newGeneralValuationMethodDropDown;
					     
					     @FindBy(xpath="//input[@id='iCategory']")
					     private static WebElement newGeneralCategoryDropDown;
					     
					     @FindBy(xpath="//td[@id='iCategory_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
					     private static WebElement newGeneralCategorySettingBtn;
					     
					     @FindBy(xpath="//select[@id='iProductMake']")
					     private static WebElement newGeneralItemMakeDropDown;
					     
					     @FindBy(xpath="//input[@id='Printer']")
					     private static WebElement newGeneralPrint;
					     
					     @FindBy(xpath="//input[@id='iAlternateCategory']")
					     private static WebElement newGeneralAlternativeCategoryDropdown;
					     
					     @FindBy(xpath="//td[@id='iAlternateCategory_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
					     private static WebElement newGeneralAlternativeCategoryDropdownSettingBtn;
					     
					     @FindBy(xpath="//textarea[@id='sDescription']")
					     private static WebElement newGeneralDescription;
					     
					     @FindBy(xpath="//input[@id='bPerishableItem']")
					     private static WebElement newGeneralPerishableItemCheckBox;
					     
					     @FindBy(xpath="//input[@id='iBin']")
					     private static WebElement newGeneralBinDropdown;
					     
					     @FindBy(xpath="//td[@id='iBin_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
					     private static WebElement newGeneralBinDropdownSettingBtn;

					     @FindBy(xpath="//input[@id='pImage']")
					     private static WebElement newGeneralUploadImageOrFileBtn;
					     
					     @FindBy(xpath="//*[@id='btnMasterSaveClick']/i")
					     private static WebElement newGeneralSaveBtn;
					     
					     @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
					     private static WebElement newGeneralCLoseBtn;
					     		     
							     
				   @FindBy(xpath="//*[@id='divBtnGroup1']/div/a")
				   private static WebElement ItemNewUnitsBtn;	     
					     
						 @FindBy(xpath="//input[@id='iDefaultBaseUnit']")
					     private static WebElement itemUnitsDefaultBaseUnitDropdown;
							     
						 @FindBy(xpath="//td[@id='iDefaultBaseUnit_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
					     private static WebElement itemUnitsDefaultBaseUnitSetting;
						 
						 @FindBy(xpath="//input[@id='iDefaultSalesUnit']")
					     private static WebElement itemUnitsDefaultSalesUnitDropdown;
							 
						 @FindBy(xpath="//td[@id='iDefaultSalesUnit_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
					     private static WebElement itemUnitsDefaultSalesUnitSettingsBtn;
						 
						 @FindBy(xpath="//input[@id='iDefaultPurchaseUnit']")
					     private static WebElement itemUnitsDefaultPurchaseUnitDropDown;
						 
						 @FindBy(xpath="//td[@id='iDefaultPurchaseUnit_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
					     private static WebElement itemUnitsDefaultPurchaseUnitSettingsBtn;
						 
						 @FindBy(xpath="//input[@id='fLength']")
					     private static WebElement itemUnitsLength;
						 
						 @FindBy(xpath="//input[@id='fWidth']")
					     private static WebElement itemUnitswidth;
						 
						 @FindBy(xpath="//input[@id='fHeight']")
					     private static WebElement itemUnitsHeight;
						 
						 @FindBy(xpath="//*[@id='fCBM']")
					     private static WebElement itemUnitsCBM;
						 
						 @FindBy(xpath="//input[@id='fWeight']")
					     private static WebElement itemUnitsWeight;
						 
						 @FindBy(xpath="//input[@id='iPalletUnit']")
					     private static WebElement itemUnitsPalletUnitTxt;
						 
						 @FindBy(xpath="//input[@id='fPalletQty']")
					     private static WebElement itemUnitsPalletQtyTxt;
						 
						 @FindBy(xpath="//input[@id='fPalletLength']")
					     private static WebElement itemUnitsPalletLengthTXt;
						 
						 @FindBy(xpath="//input[@id='fPalletWidth']")
					     private static WebElement itemUnitsPalletWidthTxt;
						 
						 @FindBy(xpath="//input[@id='fPalletHeight']")
					     private static WebElement itemUnitsPalletHeightTxt;
							 
						
				     @FindBy(xpath="//*[@id='divBtnGroup2']/div/a")
				     private static WebElement itemNewSettingsBtn;
				     
					     @FindBy(xpath="//*[@id='fStandardCost']")
					     private static WebElement NewSettingsStandardCost;
					     
					     @FindBy(xpath="//*[@id='fOverheadCost']")
					     private static WebElement NewSettingsOverheadCost;
					     	     
					     @FindBy(xpath="//*[@id='fIndirectCost']")
					     private static WebElement NewSettingsIndirectCost;
					     		     
					     @FindBy(xpath="//*[@id='fProfit']")
					     private static WebElement NewSettingsProfit;		     
					     
					     @FindBy(xpath="//*[@id='iDontshowproductexpireddays']")
					     private static WebElement NewSettingsDontshowproductexpireddays;
					     
					     @FindBy(xpath="//*[@id='iTaxCode']")
					     private static WebElement NewSettingsTaxCode;
					     
					     @FindBy(xpath="//*[@id='iTaxCode_input_settings']/span")
					     private static WebElement NewSettingsTaxCodeSttingsBtn;
					     
					     @FindBy(xpath="//*[@id='btnMasterSaveClick']")
					     private static WebElement NewSettingsSaveBtn; 
					     
					     @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
					     private static WebElement NewSettingsCloseBtn;
					    
				    @FindBy(xpath="//*[@id='divBtnGroup3']/div/a")
				    private static WebElement ItemNewClassificationBtn;
				          
					     @FindBy(xpath="//*[@id='iABCCodeValue']")
					     private static WebElement newItemClassificationABC_CodeValueDropdown;
					     
					     @FindBy(xpath="//*[@id='iABCCodeMargin']")
					     private static WebElement newItemClassificationABC_CodeMarginDropdOwn;
					     
					     @FindBy(xpath="//*[@id='iABCCodeRevenue']")
					     private static WebElement newItemClassificationABCCodeRevenueDropdown;
					     
					     @FindBy(xpath="//*[@id='iABCCodeCarryingCost']")
					     private static WebElement newItemClassificationABCCodeCarryingCostDropdown;
					    
					     @FindBy(xpath="//*[@id='sBarcode1']")
					     private static WebElement newItemClassificationBarcode1;
					     
					     @FindBy(xpath="//*[@id='sBarcode2']")
					     private static WebElement newItemClassificationBarcode2;
					     
					     @FindBy(xpath="//*[@id='sBarcode3']")
					     private static WebElement newItemClassificationBarcode3;
					     
					     @FindBy(xpath="//*[@id='iUnit1']")
						 private static WebElement newItemgridFirstrowUnit;
						
						 @FindBy(xpath="//*[@id='sBarcode1']")
						 private static WebElement newItemgridFirstrowBarcode;
						
						 //Grid element
								 
						 @FindBy(xpath="//*[@id='sBatch1']")
						 private static WebElement newItemClassificationgridFirstrowBatch;
						
						 @FindBy(xpath="//*[@id='iUnit2']")
						 private static WebElement newItemClassificationgridSecondrowUnit;
						
						 @FindBy(xpath="//*[@id='sBarcode2']")
						 private static WebElement newItemClassificationgridSecondrowBarcode;
						
						 @FindBy(xpath="//*[@id='sBatch2']")
						 private static WebElement newItemClassificationgridSecondrowBatch;
						
						 @FindBy(xpath="//*[@id='iUnit3']")
						 private static WebElement newItemClassificationgridThridrowUnit;
						
						 @FindBy(xpath="//*[@id='sBarcode3']")
						 private static WebElement newItemClassificationgridThridrowBarcode;
						
						 @FindBy(xpath="//*[@id='sBatch3']")
						 private static WebElement newItemClassificationgridThridrowBatch;
						
						 @FindBy(xpath="//*[@id='iUnit_input_settings']")
						 private static WebElement newItemClassificationgridUnitSettings;
					     
				     @FindBy(xpath="//*[@id='divBtnGroup4']/div/a")
				     private static WebElement ItemNewOtherDetailsBtn;
			     
					     @FindBy(xpath="//input[@id='iCostOfIssueAccount']")
					     private static WebElement newOtherDetailsCostOfIssueitem;
					     
					     @FindBy(xpath="//td[@id='iCostOfIssueAccount_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
					     private static WebElement newOtherDetailsCostOfIssueitemsettingsBtn;
					     
					     @FindBy(xpath="//input[@id='iStocksAccount']")
					     private static WebElement newOtherDetailsStocksitem;
					     
					     @FindBy(xpath="//td[@id='iStocksAccount_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
					     private static WebElement newOtherDetailsiStocksitemsettingsBtn;
					     
					     @FindBy(xpath="//input[@id='iSalesAccount']")
					     private static WebElement newOtherDetailsSalesAccount;
					     
					     @FindBy(xpath="//td[@id='iSalesAccount_input_settings']//span[@class='icon-settings optioncontrol_settings_margin']")
					     private static WebElement newOtherDetailsSalesitemsettingsBtn;
					     
					     @FindBy(xpath="//input[@id='iWIPAccount']")
					     private static WebElement newOtherDetailsWIPitem;
					     
					     @FindBy(xpath="//td[@id='iWIPAccount_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
					     private static WebElement newOtherDetailsWIPitemsettingsBtn;
					     
					     @FindBy(xpath="//input[@id='iCostofShortageStockAC']")
					     private static WebElement newOtherDetailsCostofShortageStockAC;
					     
					     @FindBy(xpath="//td[@id='iCostofShortageStockAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
					     private static WebElement newOtherDetailsCostofShortageStockACsettingsBtn;
					     
					     @FindBy(xpath="//input[@id='iCostofExcessStockAC']")
					     private static WebElement newOtherDetailsCostofExcessStockAC;
					     
					     @FindBy(xpath="//td[@id='iCostofExcessStockAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
					     private static WebElement OtherDetailsCostofExcessStockACsettingsBtn;
					    
					     @FindBy(xpath="//input[@id='iCostofSaleReturnAC']")
					     private static WebElement OtherDetailsCostofSaleReturnAC;
					     
					     @FindBy(xpath="//td[@id='iCostofSaleReturnAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
					     private static WebElement OtherDetailsCostofSaleReturnACsettingsBtn;
					     
					     @FindBy(xpath="//input[@id='iPurchaseVarianceAC']")
					     private static WebElement OtherDetailsPurchaseVarianceAC;
					     
					     @FindBy(xpath="//td[@id='iPurchaseVarianceAC_input_settings']//span[contains(@class,'icon-settings optioncontrol_settings_margin')]")
					     private static WebElement OtherDetailsPurchaseVarianceACsettingsBtn;
					     
					     @FindBy(xpath="//*[@id='btnMasterSaveClick']")
					     private static WebElement newOtherDetailsSaveBtn;
					     
					     @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
					     private static WebElement newOtherDetailsCloseBtn;
	
	
	
	//
	
	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_AccountTxt;
	
	@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
	private static WebElement  enter_Account_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
	private static WebElement  enter_Account_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
				private static WebElement  enter_Account_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
				private static WebElement  enter_Account_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
							private static WebElement  enter_Account_Settings_StandardFieldsBtn_FieldDrpdwn;
																
							@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
							private static WebElement  enter_Account_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
							private static WebElement  enter_Account_Settings_StandardFieldsBtn_AlignmentDrpdwn;
																
							@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
							private static WebElement  enter_Account_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
							private static WebElement  enter_Account_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
							private static WebElement  enter_Account_Settings_StandardFieldsBtn_CancelBtn;
										
				@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
				private static WebElement  enter_Account_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  enter_Account_Settings_OkBtn;
								
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  enter_Account_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_body_16']")
	private static WebElement  enter_Amount;
	
	@FindBy(xpath="//textarea[@id='id_body_16777219']")
	private static WebElement  enter_Receipts_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777222']")
	private static WebElement  enter_Payments_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777225']")
	private static WebElement  enter_PettyCash_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777228']")
	private static WebElement  enter_PostDatedReceipts_Remarks;
	
	@FindBy(xpath="//textarea[@id='id_body_16777231']")
	private static WebElement  enter_PostDatedPaymentss_Remarks;
	
	@FindBy(xpath="//input[@id='id_body_23']")
	private static WebElement  enter_ItemTxt;
	
	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_SalesAccountTxt;
	
	
	@FindBy(xpath="//*[@id='id_body_23_input_image']/span")
	private static WebElement  item_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_23_input_settings']/span")
	private static WebElement  item_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_body_23_customize_popup_container']")
				private static WebElement  item_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_body_23_customize_popup_footer']//input[1]")
				private static WebElement  item_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_list']")
							private static WebElement  item_Settings_StandardFieldsBtn_FieldDrpdwn;
																
							@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_header']")
							private static WebElement  item_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_body_23_customize_popup_standardfields_alignment']")
							private static WebElement  item_Settings_StandardFieldsBtn_AlignmentDrpdwn;
																
							@FindBy(xpath="//input[@id='id_body_23_customize_popup_standardfields_width']")
							private static WebElement  item_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
							private static WebElement  item_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
							private static WebElement  item_Settings_StandardFieldsBtn_CancelBtn;
										
				@FindBy(xpath="//div[@id='id_body_23_search_container']//input[2]")
				private static WebElement  item_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  item_Settings_OkBtn;
								
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  item_Settings_CancelBtn;

	


	@FindBy(xpath="//input[@id='id_body_24']")
	private static WebElement  enter_UnitTxt;
	
	@FindBy(xpath="//*[@id='id_body_24_input_image']/span")
	private static WebElement  unit_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_24_input_settings']/span")
	private static WebElement  unit_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_body_24_customize_popup_container']")
				private static WebElement  unit_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_body_24_customize_popup_footer']//input[1]")
				private static WebElement  unit_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_list']")
							private static WebElement  unit_Settings_StandardFieldsBtn_FieldDrpdwn;
																
							@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_header']")
							private static WebElement  unit_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_body_24_customize_popup_standardfields_alignment']")
							private static WebElement  unit_Settings_StandardFieldsBtn_AlignmentDrpdwn;
																
							@FindBy(xpath="//input[@id='id_body_24_customize_popup_standardfields_width']")
							private static WebElement  unit_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
							private static WebElement  unit_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
							private static WebElement  unit_Settings_StandardFieldsBtn_CancelBtn;
										
				@FindBy(xpath="//div[@id='id_body_24_search_container']//input[2]")
				private static WebElement  unit_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  unit_Settings_OkBtn;
								
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  unit_Settings_CancelBtn;

				
	@FindBy(xpath="//input[@id='id_body_26']")
	private static WebElement  enter_Quantity;
	
	@FindBy(xpath="//input[@id='id_body_27']")
	private static WebElement  enter_Rate;
	
	@FindBy(xpath="//input[@id='id_body_28']")
	private static WebElement  enter_Gross;
	
	@FindBy (xpath="//input[@id='id_body_38']")
	private static WebElement enter_RMA;
	
	@FindBy(xpath="//input[@id='id_body_13']")
	private static WebElement  enter_Batch;
	
	@FindBy(xpath="//input[@id='id_body_12']")
	private static WebElement  enter_DebitACTxt;
	
	@FindBy(xpath="//*[@id='id_body_12_input_image']/span")
	private static WebElement  enter_DebitAC_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_12_input_settings']/span")
	private static WebElement  enter_DebitAC_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_12_customize_popup_container']")
				private static WebElement  enter_DebitAC_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_12_customize_popup_footer']//input[1]")
				private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_list']")
							private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_FieldDrpdwn;
																
							@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_header']")
							private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_12_customize_popup_standardfields_alignment']")
							private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_AlignmentDrpdwn;
																
							@FindBy(xpath="//input[@id='id_header_12_customize_popup_standardfields_width']")
							private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
							private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
							private static WebElement  enter_DebitAC_Settings_StandardFieldsBtn_CancelBtn;
										
				@FindBy(xpath="//div[@id='id_header_12_search_container']//input[2]")
				private static WebElement  enter_DebitAC_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  enter_DebitAC_Settings_OkBtn;
								
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  enter_DebitAC_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_body_39']")
	private static WebElement  enter_CreditACTxt;
	
	@FindBy(xpath="//*[@id='id_body_39_input_image']/span")
	private static WebElement  enter_CreditAC_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_39_input_settings']/span")
	private static WebElement  enter_CreditAC_SettingsBtn;

				@FindBy(xpath="//div[@id='id_header_39_customize_popup_container']")
				private static WebElement  enter_CreditAC_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_39_customize_popup_footer']//input[1]")
				private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_list']")
							private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Fielddropdown;
																
							@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_header']")
							private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_39_customize_popup_standardfields_alignment']")
							private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_Alignmentdropdown;
																
							@FindBy(xpath="//input[@id='id_header_39_customize_popup_standardfields_width']")
							private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
							private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
							private static WebElement  enter_CreditAC_Settings_StandardFieldsBtn_CancelBtn;
										
				@FindBy(xpath="//div[@id='id_header_39_search_container']//input[2]")
				private static WebElement  enter_CreditAC_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  enter_CreditAC_Settings_OkBtn;
								
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  enter_CreditAC_Settings_CancelBtn;
	
	@FindBy(xpath="//input[@id='id_body_18']")
	private static WebElement  enter_DebitTxt;
	
	@FindBy(xpath="//input[@id='id_body_19']")
	private static WebElement  enter_CreditTxt;
	
	@FindBy(xpath="//textarea[@id='id_body_16777241']")
	private static WebElement  enter_NonStandardJournalEntries_RemarksTxt;
	
	@FindBy(xpath="//input[@id='id_body_87']")
	private static WebElement  enter_Warehouse2Txt;
	
	@FindBy(xpath="//*[@id='id_body_87_input_image']/span")
	private static WebElement  enter_Warehouse2_ExpansionBtn;
	
	@FindBy(xpath="//*[@id='id_body_87_input_settings']/span")
	private static WebElement  enter_Warehouse2_SettingsBtn;
	
				@FindBy(xpath="//div[@id='id_header_87_customize_popup_container']")
				private static WebElement  enter_WareHouse2_Settings_Container;
										
				@FindBy(xpath="//div[@id='id_header_87_customize_popup_footer']//input[1]")
				private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn;
										
							@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_list']")
							private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Fielddropdown;
																
							@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_header']")
							private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_HeaderTxt;
															
							@FindBy(xpath="//select[@id='id_header_87_customize_popup_standardfields_alignment']")
							private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_Alignmentdropdown;
																
							@FindBy(xpath="//input[@id='id_header_87_customize_popup_standardfields_width']")
							private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_WidthTxt;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
							private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_OkBtn;
																
							@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
							private static WebElement  enter_WareHouse2_Settings_StandardFieldsBtn_CancelBtn;
										
				@FindBy(xpath="//div[@id='id_header_87_search_container']//input[2]")
				private static WebElement  enter_WareHouse2_Settings_DeleteColumnBtn;
										
				@FindBy(xpath="//div[contains(@class,'panel')]//input[3]")
				private static WebElement  enter_WareHouse2_Settings_OkBtn;
								
				@FindBy(xpath="//div[contains(@class,'panel')]//input[4]")
				private static WebElement  enter_WareHouse2_Settings_CancelBtn;
	
	
	////////////
	
	// Right Panel*** InfoSide Bar
				

	@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
	private static WebElement  infoSideBarCustomizeBtn;
	
				@FindBy(xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[2]/span")
				private static WebElement  customizeCloseBtn;
				
				@FindBy(xpath="//div[@id='id_transactionentry_infopanel_customize_container']//li[@id='Dash_Save']")
				private static WebElement  customizeSaveBtn;
				
				@FindBy(xpath="//div[@id='id_transactionentry_infopanel_customize_container']//li[@id='Dash_Close']")
				private static WebElement  customizeCancelBtn;
				
				@FindBy(xpath="//input[@id='searchBoxTrans']")
				private static WebElement  customizeSearchTxt;
							
				@FindBy(xpath="//*[@id='Dashboard_Graph_panelID_Trans']/div[1]/i")
				private static WebElement  customizeSearchBtn;
							
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//a[@id='GraphOption']")
				private static WebElement  graphBtn;
							
							@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='Newgraph']")
							private static WebElement  newGraphOption;
							
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//a[@id='ReportOption']")
				private static WebElement  reportBtn;
							
							@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewReport']")
							private static WebElement  newReportOption;
							
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//a[@id='InfopanelOption']")
				private static WebElement  infoPanelBtn;
							
							@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewInfopanel']")
							private static WebElement  newInfoPanelOption;
							
				@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//a[@id='workflow']")
				private static WebElement  workFlowBtn;
							
							@FindBy(xpath="//div[@id='Dashboard_Graph_panelID_Trans']//li[@id='NewWorkflow']")
							private static WebElement  newWorkFlowOption;
							
				@FindBy(xpath="//a[@id='DocumentInfoOption']")
				private static WebElement  docInfoBtn;
							
							@FindBy(xpath="//li[@id='id_Dashlet0']//a")
							private static WebElement  newDocInfoOption;
	
	@FindBy(xpath="//span[@class='icon-left-and-right-panel-icon icon-font6 no_padding_left_right']")
	private static WebElement  infoSideBarExpandBtn;
	
	
	
	
	
	
	// Footer Section
	

	@FindBy(xpath="//label[@id='id_transactionentry_footer_panel_summary_value_net']")
	private static WebElement  netLabel;
	

	@FindBy(xpath="//*[@id='id_transactionentry_footer_panel_summary_value_net']/span[2]")
	private static WebElement  net_Amount;

	
/////////////////////////////////////////////////////		
	
	
    @FindBy(xpath="//*[@id='81']/span")
    private static WebElement  financialsReportsMenu; 
    
	    @FindBy(xpath="//a[@id='500']//span[contains(text(),'Ledger')]")
		private static WebElement  ledger;

		@FindBy(xpath="//*[@id='658']/span")
		private static WebElement  ledgerDetail;

		@FindBy(xpath="//*[@id='501']/span")
		private static WebElement  subLedger;
		
		@FindBy(xpath="//*[@id='82']/span")
		private static WebElement  cashAndBankBooksMenu;
		
			@FindBy(xpath="//*[@id='510']/span")
			private static WebElement  cashBookReport;
			
			@FindBy(xpath="//*[@id='511']/span")
			private static WebElement  bankBookReport;
			
			@FindBy(xpath="//*[@id='512']/span")
			private static WebElement  pettyCashBokReport;
			
			@FindBy(xpath="//*[@id='513']/span")
			private static WebElement  dayBookReport;
			
			@FindBy(xpath="//*[@id='83']/span")
			private static WebElement  bankReconciliationReport;
			
			@FindBy(xpath="//*[@id='84']/span")
			private static WebElement  bankReconciliationImport;
			
			@FindBy(xpath="//*[@id='85']/span")
			private static WebElement  customerVendorReconciliation;
		
			@FindBy(xpath="//*[@id='537']/span")
			private static WebElement  bankReconciliationStatement;
				
			@FindBy(xpath="//*[@id='162']/span")
			private static WebElement chequeDiscountingMenu;
		
		@FindBy(xpath="//*[@id='502']/span")
		private static WebElement  salesReportsMenu;
		
			@FindBy(xpath="//*[@id='503']/span")
			private static WebElement  salesRegisterReport;

			@FindBy(xpath="//*[@id='504']/span")
			private static WebElement  salesReturnRegisterReport;
			
			@FindBy(xpath="//*[@id='505']/span")
			private static WebElement summarySalesBookReport;
			
			@FindBy(xpath="//*[@id='628']/span")
			private static WebElement monthlySalesBookReport;
			
			@FindBy(xpath="//*[@id='629']/span")
			private static WebElement  topCustomersListReport;
		
		@FindBy(xpath="//*[@id='506']/span")
		private static WebElement  purchaseReportsMenu;
		
			@FindBy(xpath="//*[@id='507']/span")
			private static WebElement  purchaseRegisterReport;
			
			@FindBy(xpath="//*[@id='508']/span")
			private static WebElement  purchaseReturnRegisteReport;
			
			@FindBy(xpath="//*[@id='509']/span")
			private static WebElement  summaryPurchaseBookReport;
					
		@FindBy(xpath="//*[@id='514']/span")
		private static WebElement  registersReportMenu;
		
			@FindBy(xpath="//*[@id='516']/span")
			private static WebElement  openingBalanceRegisterReport;
			
			@FindBy(xpath="//*[@id='515']/span")
			private static WebElement journalEntriesRegisterReport;
			
			@FindBy(xpath="//span[contains(text(),'Credit Note Register')]")
			private static WebElement creditNoteRegisterReport;
			
			@FindBy(xpath="//*[@id='610']/span")
			private static WebElement  debitNoteRegisterReport;
			
			@FindBy(xpath="//*[@id='598']/span")
			private static WebElement  receiptsRegisterReport;
			
			@FindBy(xpath="//*[@id='599']/span")
			private static WebElement  paymentRegisterReport;
			
			@FindBy(xpath="//*[@id='518']/span")
			private static WebElement  pdcReceiptsRegisterReport;
			
			@FindBy(xpath="//*[@id='519']/span")
			private static WebElement pdcPaymentsRegisterReport;
			
			@FindBy(xpath="//*[@id='517']/span")
			private static WebElement  entryJournalRegisterMenu;
					
		@FindBy(xpath="//*[@id='523']/span")
		private static WebElement  salesAndPurchasesReportMenu;
		
			@FindBy(xpath="//*[@id='524']/span")
			private static WebElement  salesGroupedByCustomerReport;
			
			@FindBy(xpath="//*[@id='525']/span")
			private static WebElement  salesGroupedByProductReport;
			
			@FindBy(xpath="//*[@id='526']/span")
			private static WebElement  salesGroupedByDepartmentReport;
			
			@FindBy(xpath="//*[@id='527']/span")
			private static WebElement  purchasesGroupedByVendorReport;
			
			@FindBy(xpath="//*[@id='528']/span")
			private static WebElement  purchasesGroupedByProductReport;
			
			@FindBy(xpath="//*[@id='529']/span")
			private static WebElement  purchasesGroupedByDepartmentReport;		
		
		@FindBy(xpath="//*[@id='568']/span")
		private static WebElement  MiscellaneousAnalysisReportMenu;
		
			@FindBy(xpath="//*[@id='569']/span")
			private static WebElement  peakAndLowBalancesReport;
			
			@FindBy(xpath="//*[@id='570']/span")
			private static WebElement  comprativeAnalysisReport;
			
			@FindBy(xpath="//*[@id='571']/span")
			private static WebElement  transactionsTypeAnalysisReport;
			
			@FindBy(xpath="//*[@id='572']/span")
			private static WebElement  abcAnalysisReport;
			
			@FindBy(xpath="//*[@id='597']/span")
			private static WebElement  interestCalculationReport;

		@FindBy(xpath="//*[@id='536']/span")
		private static WebElement  mastersInformationMenu;
		
	     	@FindBy(xpath="//*[@id='538']/span")
			private static WebElement  masterInfoMenu;
			
			@FindBy(xpath="//*[@id='144']/span")
			private static WebElement  productLabelMenu;
			
			@FindBy(xpath="//*[@id='573']/span")
			private static WebElement  unitConversionMenu;
				
			@FindBy(xpath="//*[@id='147']/span")
			private static WebElement  skidDefinitionMenu;
							
		@FindBy(xpath="//*[@id='520']/span")
		private static WebElement  auditTrailMenu;
		
			@FindBy(xpath="//*[@id='521']/span")
			private static WebElement  auditTrailtransactionsReport;
			
			@FindBy(xpath="//*[@id='522']/span")
			private static WebElement  aAuditTrailloginsReport;
		
		@FindBy(xpath="//*[@id='204']/span")
		private static WebElement  accountQuery;
	
	
	
	@FindBy (xpath="//select[@id='RITCombobox__1']")
	private static WebElement includePDCDrpDwn;
	
	@FindBy (xpath="//select[@id='RITCombobox__1']")
	private static WebElement stockTypeOrValidation;

	@FindBy (xpath="//select[@id='RITCombobox__10']")
	private static WebElement includeNonAuthorizeDataDrpDwn;
	
	@FindBy (xpath="//select[@id='RITCombobox__5']")
	private static WebElement sortingDrpDwn;
	
	@FindBy (xpath="//input[@id='RITCheckbox__2']")
	private static WebElement movedAccountOnlyChkBox;
	
	@FindBy (xpath="//input[@id='RITCheckbox__3']")
	private static WebElement printAccountIndexChkBox;
	
	@FindBy (xpath="//input[@id='RITCheckbox__9']")
	private static WebElement freshAccountForEachPageChkBox;
	
	@FindBy (xpath="//input[@id='RITCheckbox__11']")
	private static WebElement printAsStatmentOfAccountChkBox;
	
	@FindBy (xpath="//input[@id='RITCheckbox__6']")
	private static WebElement displayUnrealizedLossOrGainChkBox;


	
	
	@FindBy(xpath="//div[@id='idGlobalError']/div/table/tbody/tr/td[2]/div[2]")
	public static WebElement errorMessage;
	 
	@FindBy(xpath="//div[@id='idGlobalError']/div/table/tbody/tr/td[3]/span")
	public static WebElement errorMessageCloseBtn;
	
	//Dash board Page
	@FindBy(xpath="//*[@id='dashName']")
    private static WebElement labelDashboard ;
	
	@FindBy(xpath="//*[@id='Select_dash']")
	private static WebElement selectDashboard ;
		
	@FindBy(xpath="//*[@id='Dashboard_AddDash']")
    private static WebElement newAddDashBoard;
	 
    @FindBy(xpath="//*[@id='Dashboard_Dash_Config']")
    private static WebElement dashboardCustomizationSettings;
	
    
    /////////////////////
    
    //Settings Screen
  
	@FindBy(xpath="//span[@id='updateButton']")
	private static WebElement  updateBtn;
	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  settings_closeBtn;
	
	
	//Documents Tab


	@FindBy(xpath="//div[@class='font-5 theme_background-color-inverse theme_color-inverse']")
	private static WebElement  documentsTab;
	
	@FindBy(xpath="//li[@id='navigationtab1']")
	private static WebElement  documentsTabForMaterialReceiptNotes;
	

	@FindBy(xpath="//span[@id='DocumentLoadMasterPopupBtn']")
	private static WebElement  loadMastersBtn;
	
				@FindBy(xpath="//select[@id='doc_voucherDropDown']")
				private static WebElement  loadmasterDropDown;
				
				@FindBy(xpath="//button[@id='btnSelectDependMaster']")
				private static WebElement  selectAllBtn;
				
				@FindBy(xpath="//button[contains(text(),'Reset')]")
				private static WebElement  resetBtn;
				
				@FindBy(xpath="//button[@class='Fbutton pull-right'][contains(text(),'Ok')]")
				private static WebElement  okBtn;
	
	@FindBy(xpath="//*[@id='editScreen_CustomizeButtons']/span[1]")
	private static WebElement  deleteTagBtn;
	
	
	@FindBy(xpath="//div[@id='editScreen_tabContent']/div[1]/span[1]")
	private static WebElement editScreenAddFieldBtn;
	
	@FindBy(xpath="//div[@id='editScreen_tabContent']/div[1]/span[2]")
	private static WebElement editScreenLoadFieldBtn;
	
	@FindBy(xpath="//select[@id='editScreen_voucherDropDown']")
	private static WebElement editScreenLoadFieldDrpdwn;
	
	@FindBy(xpath="//span[contains(text(),'Load Screen Into Issues')]")
	private static WebElement editScreenLoadScreenIntoIssuesChkbox;
	
	
	@FindBy(xpath="//*[@id='editScreen_copyFieldsDiv']/div[3]/button[2]")
	private static WebElement editScreenLoadFieldsOkBtn;
	
	
	@FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody/tr/td[3]")
	private static List<WebElement> editScreenCaptionsList;
	
	@FindBy(xpath="//*[@id='editScreen_bodyTable']/tbody/tr/td[1]/span[2]")
	private static List<WebElement> editScreenDeleteBtnList;
	
	
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_Caption']")
	private static WebElement editScreenCaptionTxt;
	
	@FindBy(xpath="//input[@id='editScreen_FieldsCustomization_noofDecimals']")
	private static WebElement editScreenNoOfDecimalsTxt;
	
	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToNet']")
	private static WebElement editScreenAddToNetDrpdwn;
	
	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_AddToStock']")
	private static WebElement editScreenAddToStockDrpdwn;
	
	@FindBy(xpath="//select[@id='editScreen_FieldsCustomization_Position']")
	private static WebElement editScreenPositionDrpdwn;
	
	@FindBy(xpath="//div[@id='editScreen_FieldsCustomization_btns']/span[1]")
	private static WebElement editScreenApplyBtn;
	
	
	
	@FindBy(xpath="//div[@id='editLayout_tabContent']/div[1]/span[1]")
	private static WebElement editLayoutAddFieldBtn;
	
	@FindBy(xpath="//div[@id='editLayout_tabContent']/div[1]/span[2]")
	private static WebElement editLayoutLoadFieldBtn;
	
	@FindBy(xpath="//span[contains(text(),'Load Layout Into Issues')]")
	private static WebElement editLayoutLoadLayoutIntoIssuesChkbox;
	
	@FindBy(xpath="//input[@id='EditLayout_FieldsCustomization_FieldDetails_Caption']")
	private static WebElement editLayoutCaptionTxt;
	
	@FindBy(xpath="//select[@id='EditLayout_FieldsCustomization_FieldDetails_DataType']")
	private static WebElement editLayoutDataTypeDrpdwn; 
	
	@FindBy(xpath="//select[@id='editLayout_voucherDropDown']")
	private static WebElement editLayoutLoadFieldDrpdwn; 
	
	@FindBy(xpath="//*[@id='editLayout_copyFieldsDiv']/div[3]/button[2]")
	private static WebElement editLayoutLoadFieldsOkBtn;
	
	@FindBy(xpath="//*[@id='editLayout_bodyTable']/tbody/tr/td[4]")
	private static List<WebElement> editLayoutCaptionsList;
	
	@FindBy(xpath="//*[@id='editLayout_bodyTable']/tbody/tr/td[1]/span[2]")
	private static List<WebElement> editLayoutDeleteBtnList;
	
	
	
	
	
	@FindBy(xpath="//span[@id='DocumentAddGroupPopupBtn']")
	private static WebElement  addGroupBtn;
	
				@FindBy(xpath="//input[@id='doc_GroupName']")
				private static WebElement  groupNameTXt;
				
				@FindBy(xpath="//button[contains(text(),'Add')]")
				private static WebElement  addBtn;
				
				@FindBy(xpath="//div[@class='col-xs-12 form-group']//button[@id='btnCancel']")
				private static WebElement  cancelBtn;

	@FindBy(xpath="//div[@id='voucherTabContent']//span[2]")
	private static WebElement  deletegroupBtn;
	
	@FindBy(xpath="//input[@id='doc_title']")
	private static WebElement  titleTxt;
	
	
	/*@FindBy(xpath="/html[1]/body[1]/section[1]/div[2]/div[1]/section[1]/div[1]/div[2]/div[2]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/div[2]/div[1]/div[1]/input[1]")
	private static WebElement  titleTxt;*/
	
	@FindBy(xpath="//input[@id='doc_baseDocument']")
	private static WebElement  baseDocumentTxt;
	
	@FindBy(xpath="//input[@id='txtbox_doc_Accountdepandency']")
	private static WebElement  accountDependencyTxt;
	
				@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentGainAC')]")
				private static WebElement  iExchangeAdjustmentGainACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iExchangeAdjustmentLossAC')]")
				private static WebElement  iExchangeAdjustmentLossACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPrimaryAccount')]")
				private static WebElement  iPrimaryAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCity')]")
				private static WebElement  iCityChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDeliveryCity')]")
				private static WebElement  iDeliverycityChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iBankAc')]")
				private static WebElement  iBankACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPDCDiscountedAC')]")
				private static WebElement  iPDCDiscountedACChkBox;
				
	@FindBy(xpath="//input[@id='txtbox_doc_Productdepandency']")
	private static WebElement  itemDependencyTxt;
	
				@FindBy(xpath="//span[contains(text(),'Outlet__')]")
				private static WebElement  outletChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofShortageStockAC')]")
				private static WebElement  iCostofShortageStockACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofExcessStockAC')]")
				private static WebElement  iCostofExcessStockACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostofSaleReturnAC')]")
				private static WebElement  iCostofSaleReturnACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iPurchaseVarianceAC')]")
				private static WebElement  iPurchaseVarianceACChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultBaseUnit')]")
				private static WebElement  iDefaultBaseUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultSalesUnit')]")
				private static WebElement  iDefaultSalesUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iDefaultPurchaseUnit')]")
				private static WebElement  iDefaultPurchaseUnitChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCostOfIssueAccount')]")
				private static WebElement  iCostOfIssueAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iStocksAccount')]")
				private static WebElement  iStocksAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iSalesAccount')]")
				private static WebElement  iSalesAccountChkBox;
				
				@FindBy(xpath="//li[12]//div[1]//label[1]//span[1]")
				private static WebElement  otherdetails1Box;
				
				@FindBy(xpath="//li[13]//div[1]//label[1]//span[1]")
				private static WebElement  replenishment1ChkBox;
				
				@FindBy(xpath="//span[contains(text(),'Reorder__')]")
				private static WebElement  reorderChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iCategory')]")
				private static WebElement  iCategoryChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iWIPAccount')]")
				private static WebElement  iWIPAccountChkBox;
				
				@FindBy(xpath="//span[contains(text(),'Classification__')]")
				private static WebElement  classificationChkBox;
				
				@FindBy(xpath="//li[18]//div[1]//label[1]//span[1]")
				private static WebElement  repelenishment2ChkBox;
				
				@FindBy(xpath="//li[19]//div[1]//label[1]//span[1]")
				private static WebElement  otherDetails2ChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iBin')]")
				private static WebElement  iBinChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iAlternateCategory')]")
				private static WebElement  iAlternateCategoryChkBox;
				
				@FindBy(xpath="//span[contains(text(),'iTaxCode')]")
				private static WebElement  iTaxCodeChkBox;
	
	@FindBy(xpath="//select[@id='doc_Accountdepandency_Filter']")
	private static WebElement  accountfilterDropdown;
	
	@FindBy(xpath="//select[@id='doc_Itemdepandency_Filter']")
	private static WebElement  itemfilterDropdown;
	
	
	// Documents Grid Elements
	
		// first row 
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-0']")
	private static WebElement  firstrow;
	
	@FindBy(xpath="//div[contains(text(),'Delete Row')]")
	private static WebElement  Doc_deleterowBtn;
	
	@FindBy(xpath="//div[contains(text(),'Insert Row')]")
	private static WebElement  Doc_insertRowBtn;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-1']")
	private static WebElement  masters1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-2']")
	private static WebElement  position1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-3']")
	private static WebElement  showDependency1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-4']")
	private static WebElement  group1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-5']")
	private static WebElement  filter1;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_1-6']")
	private static WebElement  mandatory1;
	
	
	// Second Row... delete and insert row are same
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-0']")
	private static WebElement  secondRow;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-1']")
	private static WebElement  masters2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-2']")
	private static WebElement  position2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-3']")
	private static WebElement  showDependency2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-4']")
	private static WebElement  group2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-5']")
	private static WebElement  filter2;
	
	@FindBy(xpath="//td[@id='doc_TagsTable_col_2-6']")
	private static WebElement  mandatory2;
	
	// After clicking *** Properties Changes which are same for all rows
	
	@FindBy(xpath="//select[@id='doc_TagsTableMasterDropDown']")
	private static WebElement  masterDropDown;
	
	@FindBy(xpath="//select[@id='doc_TagsPositionDropDown']")
	private static WebElement  positionDropdown;
	
	@FindBy(xpath="//input[@id='txtbox_doc_TagsDepedencyDropDown']")
	private static WebElement  showDependencyDropdown;
	
	@FindBy(xpath="//input[@id='doc_TagsGroupTxtbox']")
	private static WebElement  groupTxt;
	
	@FindBy(xpath="//select[@id='docFilter']")
	private static WebElement  filterDropdown;
	
	@FindBy(xpath="//select[@id='doc_MandatoryDropDown']")
	private static WebElement  mandatoryDropDown;
	
	// Grid Elements completed
	
	// Right Panel 
	
	// Home ***************************
	
	@FindBy(xpath="//*[@id='id_menu_tree_1']/a/i")
	private static WebElement  homeExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_2']/a/i")
				private static WebElement  companyExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_3']/a/i")
							private static WebElement  newComapanyBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_131']/a/i")
							private static WebElement  yearEndProcesBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_125']/a/i")
							private static WebElement  interComapnyTransactionBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_134']/a/i")
							private static WebElement  synchronizationBtn;
							
				@FindBy(xpath="//*[@id='id_menu_tree_6']/a/i")
				private static WebElement  securityBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_1000']/a/i")
				private static WebElement  mastersExpandBtn;
			
							@FindBy(xpath="//*[@id='id_menu_tree_220']/a/i")
							private static WebElement  currencyBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_221']/a/i")
							private static WebElement  itemBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_8002']/a/i")
							private static WebElement  schemesExpandBtn;
							
										@FindBy(xpath="//*[@id='id_menu_tree_8015']/a/i")
										private static WebElement  discountDefinitionBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_224']/a/i")
							private static WebElement  mrpBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_225']/a/i")
							private static WebElement  qcBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_234']/a/i")
							private static WebElement  warehouseManagementSystemBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_251']/a/i")
							private static WebElement  maintainceBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8001']/a/i")
							private static WebElement  pointofSaleExpandBtn;
							
										@FindBy(xpath="//*[@id='id_menu_tree_8005']/a/i")
										private static WebElement  memberBtn;
										
										@FindBy(xpath="//*[@id='id_menu_tree_8006']/a/i")
										private static WebElement  giftVoucherBtn;
										
										@FindBy(xpath="//*[@id='id_menu_tree_1025']/a/i")
										private static WebElement  pointOfSaleTableManagementBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_1103']/a/i")
							private static WebElement  payrollBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_1056']/a/i")
							private static WebElement  tdsAnnexureBtn;
							
				@FindBy(xpath="//*[@id='id_menu_tree_16']/a/i")
				private static WebElement  settingsExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_66']/a/i")
							private static WebElement  authorizationBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_25']/a/i")
				private static WebElement  datamanagementBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_20']/a/i")
				private static WebElement  utilitiesBtn;
	
				
	// Finance *************************			
				
	/*@FindBy(xpath="//*[@id='id_menu_tree_60']/a/i")
	private static WebElement  financeExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_61']/a/i")
				private static WebElement  financeTransactionExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_2001']/a/i")
							private static WebElement  cashBankBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_2007']/a/i")
							private static WebElement  financePurchasesBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_2014']/a/i")
							private static WebElement  financeSalesBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_2023']/a/i")
							private static WebElement  journalsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_2039']/a/i")
							private static WebElement  manufacturingBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_219']/a/i")
							private static WebElement  autoPostingsBtn;
							
				@FindBy(xpath="//*[@id='id_menu_tree_62']/a/i")
				private static WebElement  creditManagementExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_217']/a/i")
							private static WebElement  delinquencyBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_81']/a/i")
				private static WebElement  financeReportsExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_82']/a/i")
							private static WebElement  cashAndBankBookBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_502']/a/i")
							private static WebElement  salesReportBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_506']/a/i")
							private static WebElement  purchaseReportBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_207']/a/i")
							private static WebElement  vatBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_514']/a/i")
							private static WebElement  registersBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_523']/a/i")
							private static WebElement  salesAndPurchaseAnalysisBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_568']/a/i")
							private static WebElement  miscellaneousAnalysisBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_536']/a/i")
							private static WebElement  masterInformationBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_520']/a/i")
							private static WebElement  financeReportsAuditTrialBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_50001']/a/i")
				private static WebElement  fixedAssetBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_530']/a/i")
				private static WebElement  finalAccountsBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_558']/a/i")
				private static WebElement  receiveableAndPayableAnalysisExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_605']/a/i")
							private static WebElement  customerDetailBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_607']/a/i")
							private static WebElement  customerSummaryBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_606']/a/i")
							private static WebElement  vendorDetailBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_608']/a/i")
							private static WebElement  vendorSummaryBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_3301']/a/i")
				private static WebElement  budgetExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_3304']/a/i")
							private static WebElement  reviseBudgetBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_3321']/a/i")
							private static WebElement  budgetReportsBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_3311']/a/i")
				private static WebElement  onlinepaymentsBtn;*/
				
				
				// Financial Menu and Sub Menus
				@FindBy(xpath="//*[@id='60']/div/span")
				private static WebElement  financialsMenu;
				
				
				
					@FindBy(xpath="//*[@id='61']/span")
					private static WebElement  financialsTransactionMenu; 		

						@FindBy(xpath="//*[@id='2001']/span")
						private static WebElement  cashAndBankMenu; 
						
				     		@FindBy(xpath="//*[@id='2002']/span")
							private static WebElement  receiptsVoucher;
							
							@FindBy(xpath="//*[@id='2003']/span")
							private static WebElement  paymentsVoucher;
							
							@FindBy(xpath="//*[@id='2004']/span")
							private static WebElement  pettyVoucher;
							
							@FindBy(xpath="//*[@id='2005']/span")
							private static WebElement  postDatedReceiptsVoucher;
										
							@FindBy(xpath="//*[@id='2006']/span")
							private static WebElement  postDatedPaymentsVoucher;
							
							@FindBy(xpath="//*[@id='108']/span")
							private static WebElement  defineChequeSeries;
							
							@FindBy(xpath="//*[@id='109']/span")
							private static WebElement  cancelCheque;
						

						@FindBy(xpath="//*[@id='2007']/span")
						private static WebElement  financialsTransactionsPurchaseMenu; 
						
							@FindBy(xpath="//*[@id='2008']/span")
							private static WebElement  purchaseVoucher;
							
							@FindBy(xpath="//*[@id='2009']/span")
							private static WebElement  purchaseReturnsVoucher;
							
							@FindBy(xpath="//*[@id='2050']/span")
							private static WebElement  purchaseVoucherN;
							
									
						@FindBy(xpath="//*[@id='2014']/span")
						private static WebElement  financialsTransactionsSalesMenu;
							
							@FindBy(xpath="//*[@id='2015']/span")
							private static WebElement  salesInvoicesVoucher;
							
							@FindBy(xpath="//*[@id='2016']/span")
							private static WebElement  salesReturnsVoucher;
							
							@FindBy(xpath="//*[@id='2020']/span")
							private static WebElement  cashSales;
									
							@FindBy(xpath="//*[@id='2021']/span")
							private static WebElement  hirePurchaseSales;
						
						@FindBy(xpath="//*[@id='2023']/span")
						private static WebElement  financialsTransactionsJournalsMenu;
						
						    @FindBy(xpath="//*[@id='2032']/span")
							private static WebElement  journalsEntriesVoucher;
							
							@FindBy(xpath="//*[@id='2025']/span")
							private static WebElement  forexJVVoucher;
							
							@FindBy(xpath="//*[@id='2029']/span")
							private static WebElement  interdepartmentaljvVoucher;
							
							@FindBy(xpath="//*[@id='2024']/span")
							private static WebElement  oldJouranlEntriesVoucher;
							
							@FindBy(xpath="//*[@id='2026']/span")
							private static WebElement  debitNotesVoucher;
							
							@FindBy(xpath="//*[@id='2030']/span")
							private static WebElement  debitNotesLinewiseVoucher;
							
							@FindBy(xpath="//*[@id='2027']/span")
							private static WebElement  creditNotesVoucher;
							
							@FindBy(xpath="//*[@id='2031']/span")
							private static WebElement  creditNotesLinewiseVoucher;
							
							@FindBy(xpath="//*[@id='2028']/span")
							private static WebElement  openingBalancesVoucher;
							
							@FindBy(xpath="//*[@id='2046']/span")
							private static WebElement  fixedAssetsDepreciationVoucher;
						
						@FindBy(xpath="//*[@id='219']/span")
						private static WebElement  financialsTransactionsAutoPostingsMenu;
						
							@FindBy(xpath="//*[@id='77']/span")
							private static WebElement  recurringJournalVoucher;
							
							@FindBy(xpath="//*[@id='79']/span")
							private static WebElement  postRecurringJournal;
							
							@FindBy(xpath="//*[@id='92']/span")
							private static WebElement  recurringJournalTemplate;
							
							@FindBy(xpath="//*[@id='91']/span")
							private static WebElement  postInterest;
							
							@FindBy(xpath="//*[@id='90']/span")
							private static WebElement  convertMaturedPDCs;
							
							@FindBy(xpath="//*[@id='161']/span")
							private static WebElement assignPDCLimit;
							
							@FindBy(xpath="//*[@id='166']/span")
							private static WebElement  stockReplenishment;

					@FindBy(xpath="//*[@id='62']/span")
					private static WebElement  financialsCreditManagementMenu; 
					
						@FindBy(xpath="//*[@id='63']/span")
						private static WebElement  paymentTerms;
						
						@FindBy(xpath="//*[@id='64']/span")
						private static WebElement  financeTerms;
						
						@FindBy(xpath="//*[@id='65']/span")
						private static WebElement  reminderTerms;		
						
						@FindBy(xpath="//*[@id='89']/span")
						private static WebElement  sendReminder;
						
						@FindBy(xpath="//*[@id='217']/span")
						private static WebElement  delinquency;
						
							@FindBy(xpath="//*[@id='73']/span")
							private static WebElement  questionnarie;
							
							@FindBy(xpath="//*[@id='218']/span")
							private static WebElement  delinquencyMgmt;
							
						@FindBy(xpath="//*[@id='35']/span")
						private static WebElement  creidtApproval;
				
			
								
					

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
//Inventory   *************************
				
	@FindBy(xpath="//*[@id='id_menu_tree_135']/a/i")
	private static WebElement  inventoryExpandBtn;
	
				
				
							@FindBy(xpath="//*[@id='id_menu_tree_139']/a/i")
							private static WebElement  inventoryPurchasesBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_140']/a/i")
							private static WebElement  inventorySalesBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_2033']/a/i")
							private static WebElement  stocksBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_200']/a/i")
				private static WebElement  inventoryReportsExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_540']/a/i")
							private static WebElement  binsReportBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_621']/a/i")
							private static WebElement  stockAgeingAnalysisBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_550']/a/i")
				private static WebElement  ordermanagementExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_600']/a/i")
							private static WebElement  analysisOfLinkedUnlinkedDocumentsBtn;
							
//Fixed Asset************************							
	
	@FindBy(xpath="//*[@id='id_menu_tree_136']/a/i")
	private static WebElement  fixedAssetExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_138']/a/i")
				private static WebElement  fixedAssetTransactionExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_50010']/a/i")
							private static WebElement  fixedAssetReportsBtn;
							
//Production ***********************							
	
	@FindBy(xpath="//*[@id='id_menu_tree_3000']/a/i")
	private static WebElement  productionExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_3001']/a/i")
				private static WebElement  productionTransactionBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_625']/a/i")
				private static WebElement  productionReportBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_3006']/a/i")
				private static WebElement  mrpSettingsBtn;
				
//Point Of Sale ***********************************				
	
	@FindBy(xpath="//*[@id='id_menu_tree_8000']/a/i")
	private static WebElement  pointofSale_ExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_8004']/a/i")
				private static WebElement  mainScreenBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_8500']/a/i")
				private static WebElement  posReportsExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_8501']/a/i")
							private static WebElement  retailSaleReportBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8507']/a/i")
							private static WebElement  summarysalesReportBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8513']/a/i")
							private static WebElement  preOrderReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8523']/a/i")
							private static WebElement  memberReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8530']/a/i")
							private static WebElement  memberPointsReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8535']/a/i")
							private static WebElement  itemReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8540']/a/i")
							private static WebElement  cashReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8545']/a/i")
							private static WebElement  stockReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8550']/a/i")
							private static WebElement  periodicSalesReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8556']/a/i")
							private static WebElement  lastYearComaprisionReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8562']/a/i")
							private static WebElement  miscellaneousReportsBtn;
							
							@FindBy(xpath="//*[@id='id_menu_tree_8571']/a/i")
							private static WebElement  restaurantReportsBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_8900']/a/i")
				private static WebElement  reportsTableManagementBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_8003']/a/i")
				private static WebElement  utilitiesExpandBtn;
				
							@FindBy(xpath="//*[@id='id_menu_tree_8027']/a/i")
							private static WebElement  bbqConversionBtn;
	
	
//Quality Control *****************  	
	
	
	
	@FindBy(xpath="//*[@id='id_menu_tree_150']/a/i")
	private static WebElement  qualityControlExpandBtn;
	
				@FindBy(xpath="//*[@id='id_menu_tree_151']/a/i")
				private static WebElement  qualityControlTransactionBtn;
				
				@FindBy(xpath="//*[@id='id_menu_tree_152']/a/i")
				private static WebElement  qualityControlReportsBtn;


    
 // Views Tab
	
    
	@FindBy(xpath="//span[@class='icon-views'")
	private static WebElement  viewsTab;
	

	
// Export Fields 
	
	@FindBy(xpath="//span[contains(text(),'Export Fields')]")
	private static WebElement exportFieldsTab;
	
// Triggers
	
	@FindBy(xpath="//span[@class='icon-trigger icon-font7']")
	private static WebElement  triggersTab;	
	
//  Document Numbering
	
	@FindBy(xpath="//span[contains(text(),'Document Numbering')]")
	private static WebElement  documentNumberingTab;
	
// Hire Purchase	
	
	@FindBy(xpath="//span[contains(text(),'Hire Purchase')]")
	private static WebElement hirePurchasetab;
	

	
// Reports Tab	
	
	@FindBy(xpath="//span[@class='icon-text70 icon-font7']")
	private static WebElement  reportsTab;	
	
// Schemes

	@FindBy(xpath="//span[contains(text(),'Schemes')]")
	private static WebElement schemestab;	
		
	
	
	
////////////////////
	
	@FindBy(xpath="//div[contains(text(),'Inventory')]")
	private static WebElement  inventoryMenu; 
	
		@FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
		private static WebElement  invTransactionsMenu; 
			
			@FindBy(xpath="//*[@id='139']/span")
			private static WebElement  invTransPurchasesMenu; 
		
				@FindBy(xpath="//*[@id='2010']/span")
				private static WebElement  requestForQuoteVoucher;
				
				@FindBy(xpath="//*[@id='2011']/span")
				private static WebElement  purchasesQuotationsVoucher;
					
				@FindBy(xpath="//*[@id='2012']/span")
				private static WebElement  purchasesOrdersVoucher;
			
				@FindBy(xpath="//*[@id='2013']/span")
				private static WebElement  materialReceiptNotesVoucher;
			
			@FindBy(xpath="//*[@id='140']/span")
			private static WebElement  invTransSalesMenu; 
		
				@FindBy(xpath="//*[@id='2018']/span")
				private static WebElement  salesQuotationsVoucher;
				
				@FindBy(xpath="//*[@id='2019']/span")
				private static WebElement  deliveryNotesVoucher;
				
				@FindBy(xpath="//*[@id='2022']/span")
				private static WebElement  posSalesVoucher;
				
				@FindBy(xpath="//*[@id='2045']/span")
				private static WebElement  productionOrdersVoucher;
				
				@FindBy(xpath="//*[@id='2017']/span")
				private static WebElement  salesOrdersVoucher;
					
			
				
				@FindBy(xpath="//*[@id='2034']/span")
				private static WebElement  shortagesInStockVoucher;
				
				@FindBy(xpath="//*[@id='2035']/span")
				private static WebElement  excessesInStocksVoucher;
					
				@FindBy(xpath="//*[@id='2036']/span")
				private static WebElement  stockTransfersVoucher;
				
				@FindBy(xpath="//a[@id='2037']//span[contains(text(),'Opening Stocks')]")
				private static WebElement  openingStocksVoucher;
				
				@FindBy(xpath="//a[@id='2049']//span[contains(text(),'Opening Stocks New')]")
				private static WebElement  openingStocksNEWVoucher;
				
				@FindBy(xpath="//*[@id='2038']/span")
				private static WebElement  materialRequisitionVoucher;
						
				@FindBy(xpath="//*[@id='2049']/span")
				private static WebElement  stockAdjustmentVoucher;
			
			@FindBy(xpath="//*[@id='164']/span")
			private static WebElement  holdAndUnholdStockVoucher;
			
			@FindBy(xpath="//*[@id='93']/span")
			private static WebElement  stockReconciliation;
			
			@FindBy(xpath="//*[@id='99']/span")
			private static WebElement  stockAllocation;
			
		@FindBy(xpath="//a[@id='200']//span[contains(text(),'Reports')]")
		private static WebElement  inventoryReportsMenu; 
		
			@FindBy(xpath="//a[@id='202']//span[contains(text(),'Item Query')]")
			private static WebElement itemQuery;
			
			@FindBy(xpath="//span[contains(text(),'Stock Ledger')]")
			private static WebElement  stockLedger;
			
			@FindBy(xpath="//span[contains(text(),'Opening Stocks Register')]")
			private static WebElement  openingStocksRegister;
			
			@FindBy(xpath="//span[contains(text(),'Stock Statement')]")
			private static WebElement  stockStatement;
					
			@FindBy(xpath="//a[@id='575']//span[contains(text(),'Stock movement')]")
			private static WebElement  stockMovement;
			
			@FindBy(xpath="//span[contains(text(),'Multi Level Stock Movement')]")
			private static WebElement  multiLevelStockMovement;
			
			@FindBy(xpath="//span[contains(text(),'Virtual Stock Analysis')]")
			private static WebElement  virtualStockAnalysis;
			
			@FindBy(xpath="//a[@id='578']")
			private static WebElement  stockValuation;
			
			@FindBy(xpath="//a[@id='656']")
			private static WebElement  stockReportByTag;
			
			@FindBy(xpath="//a[@id='579']//span[contains(text(),'ABC Analysis')]")
			private static WebElement  abcAnalysis;
			
			@FindBy(xpath="//span[contains(text(),'Stock Analysis by Batch')]")
			private static WebElement  stockAnalysisByBatch;
			
			@FindBy(xpath="//span[contains(text(),'Stock Analysis by RMA')]")
			private static WebElement  stockAnalysisByRMA;
			
			@FindBy(xpath="//span[contains(text(),'Bins Report')]")
			private static WebElement  binsReportMenu;
			
				@FindBy(xpath="//*[@id='587']/span")
				private static WebElement  stockDetailsByBins;
			
				@FindBy(xpath="//*[@id='588']/span")
				private static WebElement  stockBalancesByBins;
				
				@FindBy(xpath="//*[@id='589']/span")
				private static WebElement  stockBalancesByItemByBins;
				
				@FindBy(xpath="//*[@id='590']/span")
				private static WebElement  expiredStockByBins;		
			
			@FindBy(xpath="//span[contains(text(),'Stock balance by warehouse')]")
			private static WebElement  stockBalanceByWarehouse;
			
			@FindBy(xpath="//span[contains(text(),'Stock ageing analysis')]")
			private static WebElement  stockAgeingAnalysisMenu;
				
				@FindBy(xpath="//*[@id='582']/span")
				private static WebElement  ageingAnalysis;
				
				@FindBy(xpath="//*[@id='622']/span")
				private static WebElement  ageingAnalysisByBatch;
				
				@FindBy(xpath="//*[@id='623']/span")
				private static WebElement  ageingAnalysisByRMA;		
				
				@FindBy(xpath="//*[@id='591']/span")
				private static WebElement  ageingStockByBins;
						
				@FindBy(xpath="//*[@id='646']/span")
				private static WebElement  ageingByItemByBins;		

			@FindBy(xpath="//span[contains(text(),'Reorder Report')]")
			private static WebElement reorderReport;
			
			@FindBy(xpath="//a[@id='584']//span[contains(text(),'Fast Moving Item')]")
			private static WebElement  fastMovingItem;
					
			@FindBy(xpath="//a[@id='585']//span[contains(text(),'Slow Moving Item')]")
			private static WebElement  slowMovingItem;
			
			@FindBy(xpath="//span[contains(text(),'Peak/Low Balances')]")
			private static WebElement  peakORLowBalances;
			
			@FindBy(xpath="//span[contains(text(),'Best Selling Item')]")
			private static WebElement  bestSellingItem;
		
			@FindBy(xpath="//span[contains(text(),'Raise Indent Item with Low Stock')]")
			private static WebElement  raiseIndentItemWithLowStock;
			
			@FindBy(xpath="//span[contains(text(),'Stock transfer report')]")
			private static WebElement  stockTransferReport;
			
			@FindBy(xpath="//span[contains(text(),'Raise request for quote')]")
			private static WebElement  raiseRequestForQuote;
			
			@FindBy(xpath="//span[contains(text(),'Stock reservation report')]")
			private static WebElement  stockReservationReport;
			
			@FindBy(xpath="//span[contains(text(),'Transaction type-wise stock report')]")
			private static WebElement  transactionTypeWiseStockReport;
		
		@FindBy(xpath="//span[contains(text(),'Order Management')]")
		private static WebElement  orderManagementMenu; 
	
			@FindBy(xpath="//*[@id='600']/span")
			private static WebElement  analysisOfLinkedORUnlinkedDocumentsMenu;
					
				@FindBy(xpath="//*[@id='601']/span")
				private static WebElement  listingOfDocuments;
				
				@FindBy(xpath="//*[@id='602']/span")
				private static WebElement listingOfDocumentsByDueDate;
						
				@FindBy(xpath="//*[@id='603']/span")
				private static WebElement  ageingOfPendingDocuments;
				
				@FindBy(xpath="//*[@id='604']/span")
				private static WebElement  ageingofPendingDocumentsByDueDate;
				
				@FindBy(xpath="//*[@id='624']/span")
				private static WebElement  linkChainAnalysis;
				
				@FindBy(xpath="//*[@id='657']/span")
				private static WebElement  pendingVoucherReport;
			
			@FindBy(xpath="//*[@id='201']/span")
			private static WebElement  quotationAnalysis;
			
			@FindBy(xpath="//*[@id='555']/span")
			private static WebElement  purchasesQuotation;
			
			@FindBy(xpath="//*[@id='556']/span")
			private static WebElement  salesQuotation;
			
			@FindBy(xpath="//*[@id='574']/span")
			private static WebElement  lowestQuotation;
			
			@FindBy(xpath="//*[@id='553']/span")
			private static WebElement  purchasesOrders;		
			
			@FindBy(xpath="//*[@id='554']/span")
			private static WebElement  salesOrders;
			
	///////////////////////////////////////////////////////////////////
			
	
	// Item Query Elements
			
	@FindBy(xpath="//input[@id='productQuery']")
	private static WebElement IQ_ItemTxt;
	
	@FindBy(xpath="//button[contains(text(),'GetStock')]")
	private static WebElement IQ_getStockBtn;
	
	@FindBy(xpath="//button[contains(text(),'Customize')]")
	private static WebElement IQ_customizeBtn;
	
	@FindBy(xpath="//span[@id='id_productquery_button_clear']")
	private static WebElement IQ_clearBtn;
	
	@FindBy(xpath="//span[@id='id_productquery_button_close']")
	private static WebElement IQ_closeBtn;
	
	@FindBy(xpath="//label[contains(text(),'Opening Stock Quantity:')]")
	private static WebElement IQ_OpeningStockQtyLable;
	
	@FindBy(xpath="//label[contains(text(),'Pending purchases orders :')]")
	private static WebElement IQ_PendingPurchaseOrdersLable;
	
	@FindBy(xpath="//label[contains(text(),'Current Stock :')]")
	private static WebElement IQ_CurrentStockLable;
	
	@FindBy(xpath="//label[contains(text(),'Pending Sales Orders :')]")
	private static WebElement IQ_PendingSalesOrdersLable;
	
	@FindBy(xpath="//label[contains(text(),'Avg. Stock Rate :')]")
	private static WebElement IQ_AvgStockRateLable;
	
	@FindBy(xpath="//label[contains(text(),'Qty to be Ordered :')]")
	private static WebElement IQ_QtytobeOrderedLable;
	
	@FindBy(xpath="//label[contains(text(),'Base Unit :')]")
	private static WebElement IQ_BaseUnitLable;
	
	@FindBy(xpath="//label[contains(text(),'Value :')]")
	private static WebElement IQ_ValueLable;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Date')]")
	private static WebElement IQ_PurDate;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Voucher No')]")
	private static WebElement IQ_PurVoucherNo;
	
	@FindBy(xpath="//th[contains(text(),'Vendor')]")
	private static WebElement IQ_PurVendor;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity')]")
	private static WebElement IQ_PurQty;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Rate')]")
	private static WebElement IQ_PurRate;
	
	@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Currency')]")
	private static WebElement IQ_PurCurrency;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Date')]")
	private static WebElement IQ_SaleDate;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Voucher No')]")
	private static WebElement IQ_SaleVoucherNo;
	
	@FindBy(xpath="//th[contains(text(),'Customer')]")
	private static WebElement IQ_SaleCustomer;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity')]")
	private static WebElement IQ_SaleQty;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Rate')]")
	private static WebElement IQ_SaleRate;
	
	@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Currency')]")
	private static WebElement IQ_SaleCurrency;
	
	@FindBy(xpath="//span[@id='openingStock']")
	private static WebElement IQ_OpeningStockQuantity;
	
	@FindBy(xpath="//span[@id='currentStock']")
	private static WebElement IQ_CurrentStock;
	
	@FindBy(xpath="//span[@id='avgStockRate']")
	private static WebElement IQ_AvgStockRate;
	
	@FindBy(xpath="//span[@id='value']")
	private static WebElement IQ_Value;
	
	@FindBy(xpath="//span[@id='iBaseUnit']")
	private static WebElement IQ_BaseUnit;
	
	@FindBy(xpath="//span[@id='purchaseOrdered']")
	private static WebElement IQ_PendingPurchaseOrders;
	
	@FindBy(xpath="//span[@id='salesOrdered']")
	private static WebElement IQ_PendingSalesOrders;
	
	@FindBy(xpath="//span[@id='quantityToBeOrdered']")
	private static WebElement IQ_QtyToBeOrdered;
	
	
	// Purchase Table
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[1]")
	private static WebElement Pur1strow_1stColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[2]")
	private static WebElement Pur1strow_2ndColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[3]")
	private static WebElement Pur1strow_3rdColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[4]")
	private static WebElement Pur1strow_4thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[5]")
	private static WebElement Pur1strow_5thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[6]")
	private static WebElement Pur1strow_6thColumn;
	
	
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[1]")
	private static WebElement Pur2ndrow_1stColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[2]")
	private static WebElement Pur2ndrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[3]")
	private static WebElement Pur2ndrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[4]")
	private static WebElement Pur2ndrow_4thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[5]")
	private static WebElement Pur2ndrow_5thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[6]")
	private static WebElement Pur2ndrow_6thColumn;
	
	
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[1]")
	private static WebElement Pur3rdrow_1stColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[2]")
	private static WebElement Pur3rdrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[3]")
	private static WebElement Pur3rdrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[4]")
	private static WebElement Pur3rdrow_4thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[5]")
	private static WebElement Pur3rdrow_5thColumn;
	
	@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[6]")
	private static WebElement Pur3rdrow_6thColumn;
	
	
	
	@FindBy(xpath="//td[contains(text(),'Quantity Purchased Till Date:')]")
	private static WebElement QtyPurchasedTillDate;
	
	@FindBy(xpath="//div[@class='form-group col-xs-12']//tr[4]//td[2]")
	private static WebElement PurTotal;
			
			
	
	
	@FindBy(xpath="//div[@id='PrdtDetails']//div[1]//div[1]//span[1]")
	private static WebElement BalancebyWareHouseExpandBtn;
	
	@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[2]")
	private static WebElement IQ_WH1stRow1stCol;
	
	@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[3]")
	private static WebElement IQ_WH1stRow2ndCol;
	
	@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[4]")
	private static WebElement IQ_WH1stRow3rdCol;
	
	@FindBy(xpath="//*[@id='tagWiseData']//tr[1]/td[5]")
	private static WebElement IQ_WH1stRow4thCol;
	
	
	
	@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[2]")
	private static WebElement IQ_WH2ndRow1stCol;
	
	@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[3]")
	private static WebElement IQ_WH2ndRow2ndCol;
	
	@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[4]")
	private static WebElement IQ_WH2ndRow3rdCol;
	
	@FindBy(xpath="//*[@id='tagWiseData']//tr[2]/td[5]")
	private static WebElement IQ_WH2ndRow4thCol;
	
	
	
	
	/*@FindBy(xpath="//*[@id='1']/td[2]")
	private static WebElement WH1strow_2ndColumn;
	
	@FindBy(xpath="//*[@id='1']/td[3]")
	private static WebElement WH1strow_3rdColumn;
	
	@FindBy(xpath="//*[@id='1']/td[4]")
	private static WebElement WH1strow_4thColumn;
	
	@FindBy(xpath="//*[@id='1']/td[5]")
	private static WebElement WH1strow_5thColumn;
	
	@FindBy(xpath="//*[@id='1']/td[6]")
	private static WebElement WH1strow_6thColumn;*/
	
	
	
	/*@FindBy(xpath="//*[@id='2']/td[2]")
	private static WebElement WH2ndrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='2']/td[3]")
	private static WebElement WH2ndrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='2']/td[4]")
	private static WebElement WH2ndrow_4thColumn;
	
	@FindBy(xpath="//*[@id='2']/td[5]")
	private static WebElement WH2ndrow_5thColumn;
	
	@FindBy(xpath="//*[@id='2']/td[6]")
	private static WebElement WH2ndrow_6thColumn;
	
	
	
	
	@FindBy(xpath="//*[@id='7']/td[2]")
	private static WebElement WH3rdrow_2ndColumn;
	
	@FindBy(xpath="//*[@id='7']/td[3]")
	private static WebElement WH3rdrow_3rdColumn;
	
	@FindBy(xpath="//*[@id='7']/td[4]")
	private static WebElement WH3rdrow_4thColumn;
	
	@FindBy(xpath="//*[@id='7']/td[5]")
	private static WebElement WH3rdrow_5thColumn;
	
	@FindBy(xpath="//*[@id='7']/td[6]")
	private static WebElement WH3rdrow_6thColumn;*/
	
	
	
	@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[4]/td[2]")
	private static WebElement WHStockTotal;
	
	@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[4]/td[4]")
	private static WebElement WHValueTotal;
	
	// Balance by bins
	
	@FindBy (xpath="//span[@id='ProdQuery_ShowSellandBuyRatesPopup']")
	private static WebElement BalancebyBinsExpandBtn;
	
	
	
	///////////////////////////////////////
	
	
	
	// Stock Ledger Elements 
	
	@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeId']")
	private static WebElement sl_Dropdown1;
	
	@FindBy(xpath="//div[@id='spnhiererchy']//select[@id='iTreeViewId']")
	private static WebElement sl_Dropdown2;
	
	@FindBy(xpath="//label[@id='oncheckaccorderan']")
	private static WebElement sl_oncheckBtn;
	
	@FindBy(xpath="//input[@id='txtsrch-term']")
	private static WebElement sl_SearchItemTxt;
	
	@FindBy(xpath="//i[contains(@class,'icon-search theme_color-inverse')]")
	private static WebElement sl_SearchBtn;
	
	@FindBy(xpath="//input[@id='cmbUserTypeMaster']")
	private static WebElement sl_MasterTypeTxt;
	
	@FindBy(xpath="//span[contains(@class,'icon-font6 icon-external-module theme_icon-color')]")
	private static WebElement sl_AutoAdjustColumnsBtn;
	
	/*@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
	private static WebElement sl_SearchItemTxt;*/

	@FindBy(xpath="//input[@id='txtsrch-term']")
	private static WebElement sl_SearhItemTxt;
	
	@FindBy(xpath="//a[contains(@class,'clsMasterName')][contains(text(),'ITEMS GROUP')]")
	private static WebElement sl_ItemGroupsBtn;
	
	@FindBy(xpath="//input[@id='liSelectAllMasters']")
	private static WebElement sl_HeaderSelectChkBox;
	
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-schedule')]")
	private static WebElement sl_ScheduleBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-custamize')]")
	private static WebElement sl_CustomizeBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-filter')]")
	private static WebElement sl_FilterBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-ok')]")
	private static WebElement sl_OkBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon-font6 icon-close')]")
	private static WebElement sl_CloseBtn;
	
	@FindBy(xpath="//select[@id='DateOptions_']")
	private static WebElement sl_DateOptionDropdown;
	
	@FindBy(xpath="//input[@id='id_starting_date_']")
	private static WebElement sl_StartDateTxt;
	
	@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
	private static WebElement sl_StartDateCalanderBtn;
	
	@FindBy(xpath="//input[@id='id_ending_date_']")
	private static WebElement sl_EndDateTxt;
	
	@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[contains(@class,'icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow')]")
	private static WebElement sl_EndDateCalanderBtn;
	
	@FindBy(xpath="//*[@id='MasterSingle__101']")
	private static WebElement sl_WarehouseTxt;
	
	@FindBy(xpath="//*[@id='RITCheckbox__6']")
	private static WebElement sl_IgnoreInternalTransferForAgeingChkbox;
	
	@FindBy(xpath="//*[@id='RITCombobox__2']")
	private static WebElement sl_ReportingLevelDropdown;
	
	@FindBy(xpath="//*[@id='RITCheckbox__4']")
	private static WebElement sl_DisplayLinearReportChkbox;
	
	@FindBy(xpath="//*[@id='RITCombobox__1']")
	private static WebElement sl_StockValuationDropdown;
	
	@FindBy(xpath="//*[@id='RITCombobox__1']")
	private static WebElement sl_StockTypeDropdown;
	
	@FindBy(xpath="//input[@id='RITCheckbox__3']")
	private static WebElement sl_IncludeServiceTypeItemChkBox;
	
	@FindBy(xpath="//select[@id='RITLayout_']")
	private static WebElement sl_LayoutDropdown;
	
	@FindBy(xpath="//select[@id='RITOutput_']")
	private static WebElement sl_OutputDropdown;
	
	@FindBy(xpath="//input[@id='selectAllMasters_']")
	private static WebElement sl_SelectAllItemsChkBox;
	
	@FindBy(xpath="//input[@id='MasterSingle__1']")
	private static WebElement sl_FromWarehouseTxt;
	
	@FindBy(xpath="//input[@id='MasterSingle__2']")
	private static WebElement sl_ToWarehouseTxt;
	
	@FindBy(xpath="//div[contains(@class,'first')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_FirstBtn;
	
	@FindBy(xpath="//div[contains(@class,'prev')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_PreviousBtn;
	
	@FindBy(xpath="//input[@id='btn1']")
	private static WebElement sl_PageBtn;
	
	@FindBy(xpath="//div[contains(@class,'next')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_NextBtn;
	
	@FindBy(xpath="//div[contains(@class,'End')]//input[contains(@class,'btn btn-xs Fbutton')]")
	private static WebElement sl_EndBtn;
	
	@FindBy(xpath="//tr[1]//td[8]//div[1]//label[1]//input")
	private static WebElement sl_1stRowChkBox;
	
	@FindBy(xpath="//tr[2]//td[8]//div[1]//label[1]//input")
	private static WebElement sl_2ndRowChkBox;
	
	@FindBy(xpath="//tr[3]//td[8]//div[1]//label[1]//input")
	private static WebElement sl_3rdRowChkBox;
	
	
	
	////////
	
	@FindBy(xpath="//span[@id='reportSort']")
	private static WebElement report_sortingBtn;
			
	@FindBy(xpath="//span[@id='reportRefresh']")
	private static WebElement report_RefreshBtn;
			
	@FindBy(xpath="//span[@id='print_report_']")
	private static WebElement report_PrintBtn;
			
	@FindBy(xpath="//span[@class='dropdown']")
	private static WebElement report_ExportBtn;
			
	@FindBy(xpath="//span[@id='GraphIcon']")
	private static WebElement report_GraphBtn;
			
	@FindBy(xpath="//span[@id='BackTrackIcon']")
	private static WebElement report_BackTrackBtn;
			
	@FindBy(xpath="//span[@id='reportCustomize_']")
	private static WebElement report_ReportCustomizeBtn;
	
	@FindBy(xpath="//div[@id='Deleteayout']")
	private static WebElement report_CustomizationDeleteLayoutBtn;
	
	
			
	@FindBy(xpath="//span[@id='filterIcon_']")
	private static WebElement report_FilterBtn;
			
	@FindBy(xpath="//div[@id='dvfilter']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
	private static WebElement report_FilterDownBtn;
	
	@FindBy(xpath="//span[@id='idFilterCustomizeIcon']")
	private static WebElement  report_FilterCustomizeBtn;
	
	@FindBy(xpath="//*[@id='FilterFields_551_0']/li[4]/a")
	private static WebElement reports_Filter_Customize_WarehouseExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_575_0']/li[4]/a")
	private static WebElement sMovement_Filter_Customize_WarehouseExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_576_0']/li[3]/a")
	private static WebElement multiLevel_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_577_0']/li[3]/a")
	private static WebElement virtualStock_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_578_0']/li[3]/a")
	private static WebElement stockValuation_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_656_0']/li[3]/a")
	private static WebElement stockReportByTag_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_579_0']/li[3]/a")
	private static WebElement abcAnalysis_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_580_0']/li[3]/a")
	private static WebElement stockAnalysisByBatch_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_582_0']/li[3]/a")
	private static WebElement stockAgeingAnalysis_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_622_0']/li[3]/a")
	private static WebElement ageingAnalysisByBatch_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_584_0']/li[3]/a")
	private static WebElement fastMovingItems_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_585_0']/li[3]/a")
	private static WebElement slowMovingItems_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_586_0']/li[3]/a")
	private static WebElement peakAndLowBalancesItems_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_631_0']/li[3]/a")
	private static WebElement bestSellingItems_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_649_0']/li[3]/a")
	private static WebElement stockTransferRegister_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_670_0']/li[3]/a")
	private static WebElement transTypeWiseStock_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_680_0']/li[3]/a")
	private static WebElement actualConsumptionReport_Filter_Customize_ItemExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_645_0']/li[4]/a")
	private static WebElement stockBalanceByWarehouse_Filter_Customize_WarehouseExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_552_0']/li[3]/a")
	private static WebElement osr_Filter_Customize_WarehouseExpandBtn;
	
	@FindBy(xpath="//ul[@id='FilterFields_557_0']/li[4]/a")
	private static WebElement sStatment_Filter_Customize_WarehouseExpandBtn;
	
	@FindBy(xpath="//*[@id='FilterFields_551_0']/ul[4]/li[1]/div/label/input")
	private static WebElement reports_Filter_Customize_WarehouseNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_645_0']/ul[4]/li[1]/div/label/input")
	private static WebElement stockBalanceByWarehouse_Filter_Customize_WarehouseNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_576_0']/ul[3]/li[1]/div/label/input")
	private static WebElement multiLevel_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_584_0']/ul[3]/li[1]/div/label/input")
	private static WebElement fastMovingItems_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_585_0']/ul[3]/li[1]/div/label/input")
	private static WebElement slowMovingItems_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_586_0']/ul[3]/li[1]/div/label/input")
	private static WebElement peakAndLowBalancesItems_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_631_0']/ul[3]/li[1]/div/label/input")
	private static WebElement bestSellingItems_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_649_0']/ul[3]/li[1]/div/label/input")
	private static WebElement stockTransferRegister_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_670_0']/ul[3]/li[1]/div/label/input")
	private static WebElement transTypeWiseStock_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_680_0']/ul[3]/li[1]/div/label/input")
	private static WebElement actualConsumptionReport_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_622_0']/ul[3]/li[1]/div/label/input")
	private static WebElement ageingAnalysisByBatch_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_577_0']/ul[3]/li[1]/div/label/input")
	private static WebElement virtualStock_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_578_0']/ul[3]/li[1]/div/label/input")
	private static WebElement stockValuation_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_656_0']/ul[3]/li[1]/div/label/input")
	private static WebElement stockReportByTag_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_579_0']/ul[3]/li[1]/div/label/input")
	private static WebElement abcAnalysis_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_575_0']/ul[4]/li[1]/div/label/input")
	private static WebElement sMovement_Filter_Customize_WarehouseNameChkBox;
	
	@FindBy(xpath="//div[@id='fullScreen']//input[@id='5021']")
	private static WebElement stockAnalysisByBatch_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_582_0']/ul[3]/li[1]/div/label/input")
	private static WebElement stockAgeingAnalysis_Filter_Customize_ItemNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_552_0']/ul[3]/li[1]/div/label/input")
	private static WebElement osr_Filter_Customize_WarehouseNameChkBox;
	
	@FindBy(xpath="//*[@id='FilterFields_557_0']/ul[4]/li[1]/div/label/input")
	private static WebElement sStatment_Filter_Customize_WarehouseNameChkBox;
	
	@FindBy(xpath="//button[@class='Fbutton'][contains(text(),'Ok')]")
	private static WebElement  reports_Filter_Customize_OkBtn;
	
	@FindBy(xpath="//input[@id='FOption_551_0_DefaultFilter_0']")
	private static WebElement  reports_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_575_0_DefaultFilter_0']")
	private static WebElement  sMovement_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_622_0_DefaultFilter_0']")
	private static WebElement  ageingAnalysisByBatch_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_576_0_DefaultFilter_0']")
	private static WebElement  multiLevel_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_577_0_DefaultFilter_0']")
	private static WebElement  virtualStock_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_578_0_DefaultFilter_0']")
	private static WebElement  stockValuation_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_656_0_DefaultFilter_0']")
	private static WebElement  stockReportByTag_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_579_0_DefaultFilter_0']")
	private static WebElement  abcAnalysis_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_580_0_DefaultFilter_0']")
	private static WebElement  stockAnalysisByBatch_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_582_0_DefaultFilter_0']")
	private static WebElement  stockAgeingAnalysis_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_552_0_DefaultFilter_0']")
	private static WebElement  osr_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_557_0_DefaultFilter_0']")
	private static WebElement  sStatment_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_584_0_DefaultFilter_0']")
	private static WebElement fastMovingItems_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_585_0_DefaultFilter_0']")
	private static WebElement slowMovingItems_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_586_0_DefaultFilter_0']")
	private static WebElement peakAndLowBalancesItems_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_631_0_DefaultFilter_0']")
	private static WebElement bestSellingItems_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_649_0_DefaultFilter_0']")
	private static WebElement stockTransferRegister_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_645_0_DefaultFilter_0']")
	private static WebElement  stockBalanceByWarehouse_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_670_0_DefaultFilter_0']")
	private static WebElement  transTypeWiseStock_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='FOption_680_0_DefaultFilter_0']")
	private static WebElement actualConsumptionReport_DefaultFilterTxt;
	
	@FindBy(xpath="//input[@id='chkSaveFilter']")
	private static WebElement  report_FilterSaveFilterPermanentlyChkBox;
	
	@FindBy(xpath="//span[@id='filterRefresh']")
	private static WebElement  report_Filter_RefreshBtn;
	
	@FindBy(xpath="//span[@id='filter_Okbtn_']")
	private static WebElement  report_FilterOkBtn;
	
	@FindBy(xpath="//i[contains(@class,'icon icon-close')]")
	private static WebElement  report_FilterCancelBtn;
	
	@FindBy(xpath="//span[@id='a']")
	private static WebElement  report_Filter_FilterBtn;
			
	@FindBy(xpath="//span[@id='analyzeIcon']")
	private static WebElement report_AnalyzeBtn;
			
	@FindBy(xpath="//span[@id='CrossrefrenceIcon']")
	private static WebElement report_CrossReferenceBtn;
			
	@FindBy(xpath="//span[contains(text(),'Options')]")
	private static WebElement report_OptionsBtn;
			
	@FindBy(xpath="//div[@id='dvoptions']//span[contains(@class,'icon-down-arrow icon-font8 dropdown-toggle theme_button_color')]")
	private static WebElement report_OptionsDownBtn;
			
	@FindBy(xpath="//span[@id='reportClose_']")
	private static WebElement report_CloseBtn;
			
	@FindBy(xpath="//button[@id='frstPage_']")
	private static WebElement report_FirstBtn;
			
	@FindBy(xpath="//button[@id='prvPage_']")
	private static WebElement report_PreviousBtn;
			
	@FindBy(xpath="//button[@id='pgnumber_']")
	private static WebElement report_PageNoBtn;
			
	@FindBy(xpath="//button[@id='nxtPage_']")
	private static WebElement report_NextBtn;
			
	@FindBy(xpath="//button[@id='lstPage_']")
	private static WebElement report_LastBtn;
	
	@FindBy(xpath="//input[@id='txtSearchReport']")
	private static WebElement report_SearchTxt;
	
	
	
	@FindBy(xpath="//*[@id='trRender_1']/td[2]")
	private static WebElement sl_1stRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_1']/td[3]")
	private static WebElement sl_1stRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[4]")
	private static WebElement sl_1stRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[5]")
	private static WebElement sl_1stRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[6]")
	private static WebElement sl_1stRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[7]")
	private static WebElement sl_1stRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[8]")
	private static WebElement sl_1stRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[9]")
	private static WebElement sl_1stRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[10]")
	private static WebElement sl_1stRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[11]")
	private static WebElement sl_1stRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[12]")
	private static WebElement sl_1stRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[13]")
	private static WebElement sl_1stRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[14]")
	private static WebElement sl_1stRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[15]")
	private static WebElement sl_1stRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[16]")
	private static WebElement sl_1stRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[17]")
	private static WebElement sl_1stRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[18]")
	private static WebElement sl_1stRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[19]")
	private static WebElement sl_1stRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[20]")
	private static WebElement sl_1stRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[21]")
	private static WebElement sl_1stRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[22]")
	private static WebElement sl_1stRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[23]")
	private static WebElement sl_1stRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[24]")
	private static WebElement sl_1stRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[25]")
	private static WebElement sl_1stRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[26]")
	private static WebElement sl_1stRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[27]")
	private static WebElement sl_1stRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[28]")
	private static WebElement sl_1stRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[29]")
	private static WebElement sl_1stRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[30]")
	private static WebElement sl_1stRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[31]")
	private static WebElement sl_1stRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[32]")
	private static WebElement sl_1stRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[33]")
	private static WebElement sl_1stRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[34]")
	private static WebElement sl_1stRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[35]")
	private static WebElement sl_1stRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[36]")
	private static WebElement sl_1stRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[37]")
	private static WebElement sl_1stRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[38]")
	private static WebElement sl_1stRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[39]")
	private static WebElement sl_1stRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[40]")
	private static WebElement sl_1stRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[41]")
	private static WebElement sl_1stRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[42]")
	private static WebElement sl_1stRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[43]")
	private static WebElement sl_1stRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[44]")
	private static WebElement sl_1stRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[45]")
	private static WebElement sl_1stRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[46]")
	private static WebElement sl_1stRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[47]")
	private static WebElement sl_1stRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[48]")
	private static WebElement sl_1stRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[49]")
	private static WebElement sl_1stRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[50]")
	private static WebElement sl_1stRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_1']/td[51]")
	private static WebElement sl_1stRow50thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_2']/td[2]")
	private static WebElement sl_2ndRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_2']/td[3]")
	private static WebElement sl_2ndRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[4]")
	private static WebElement sl_2ndRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[5]")
	private static WebElement sl_2ndRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[6]")
	private static WebElement sl_2ndRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[7]")
	private static WebElement sl_2ndRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[8]")
	private static WebElement sl_2ndRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[9]")
	private static WebElement sl_2ndRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[10]")
	private static WebElement sl_2ndRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[11]")
	private static WebElement sl_2ndRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[12]")
	private static WebElement sl_2ndRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[13]")
	private static WebElement sl_2ndRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[14]")
	private static WebElement sl_2ndRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[15]")
	private static WebElement sl_2ndRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[16]")
	private static WebElement sl_2ndRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[17]")
	private static WebElement sl_2ndRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[18]")
	private static WebElement sl_2ndRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[19]")
	private static WebElement sl_2ndRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[20]")
	private static WebElement sl_2ndRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[21]")
	private static WebElement sl_2ndRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[22]")
	private static WebElement sl_2ndRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[23]")
	private static WebElement sl_2ndRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[24]")
	private static WebElement sl_2ndRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[25]")
	private static WebElement sl_2ndRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[26]")
	private static WebElement sl_2ndRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[27]")
	private static WebElement sl_2ndRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[28]")
	private static WebElement sl_2ndRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[29]")
	private static WebElement sl_2ndRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[30]")
	private static WebElement sl_2ndRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[31]")
	private static WebElement sl_2ndRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[32]")
	private static WebElement sl_2ndRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[33]")
	private static WebElement sl_2ndRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[34]")
	private static WebElement sl_2ndRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[35]")
	private static WebElement sl_2ndRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[36]")
	private static WebElement sl_2ndRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[37]")
	private static WebElement sl_2ndRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[38]")
	private static WebElement sl_2ndRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[39]")
	private static WebElement sl_2ndRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[40]")
	private static WebElement sl_2ndRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[41]")
	private static WebElement sl_2ndRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[42]")
	private static WebElement sl_2ndRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[43]")
	private static WebElement sl_2ndRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[44]")
	private static WebElement sl_2ndRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[45]")
	private static WebElement sl_2ndRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[46]")
	private static WebElement sl_2ndRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[47]")
	private static WebElement sl_2ndRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[48]")
	private static WebElement sl_2ndRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[49]")
	private static WebElement sl_2ndRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[50]")
	private static WebElement sl_2ndRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_2']/td[51]")
	private static WebElement sl_2ndRow50thCol;
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_3']/td[2]")
	private static WebElement sl_3rdRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_3']/td[3]")
	private static WebElement sl_3rdRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[4]")
	private static WebElement sl_3rdRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[5]")
	private static WebElement sl_3rdRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[6]")
	private static WebElement sl_3rdRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[7]")
	private static WebElement sl_3rdRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[8]")
	private static WebElement sl_3rdRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[9]")
	private static WebElement sl_3rdRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[10]")
	private static WebElement sl_3rdRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[11]")
	private static WebElement sl_3rdRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[12]")
	private static WebElement sl_3rdRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[13]")
	private static WebElement sl_3rdRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[14]")
	private static WebElement sl_3rdRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[15]")
	private static WebElement sl_3rdRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[16]")
	private static WebElement sl_3rdRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[17]")
	private static WebElement sl_3rdRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[18]")
	private static WebElement sl_3rdRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[19]")
	private static WebElement sl_3rdRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[20]")
	private static WebElement sl_3rdRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[21]")
	private static WebElement sl_3rdRow20thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[22]")
	private static WebElement sl_3rdRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[23]")
	private static WebElement sl_3rdRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[24]")
	private static WebElement sl_3rdRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[25]")
	private static WebElement sl_3rdRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[26]")
	private static WebElement sl_3rdRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[27]")
	private static WebElement sl_3rdRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[28]")
	private static WebElement sl_3rdRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[29]")
	private static WebElement sl_3rdRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[30]")
	private static WebElement sl_3rdRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[31]")
	private static WebElement sl_3rdRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[32]")
	private static WebElement sl_3rdRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[33]")
	private static WebElement sl_3rdRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[34]")
	private static WebElement sl_3rdRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[35]")
	private static WebElement sl_3rdRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[36]")
	private static WebElement sl_3rdRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[37]")
	private static WebElement sl_3rdRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[38]")
	private static WebElement sl_3rdRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[39]")
	private static WebElement sl_3rdRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[40]")
	private static WebElement sl_3rdRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[41]")
	private static WebElement sl_3rdRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[42]")
	private static WebElement sl_3rdRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[43]")
	private static WebElement sl_3rdRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[44]")
	private static WebElement sl_3rdRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[45]")
	private static WebElement sl_3rdRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[46]")
	private static WebElement sl_3rdRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[47]")
	private static WebElement sl_3rdRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[48]")
	private static WebElement sl_3rdRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[49]")
	private static WebElement sl_3rdRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[50]")
	private static WebElement sl_3rdRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_3']/td[51]")
	private static WebElement sl_3rdRow50thCol;
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_4']/td[2]")
	private static WebElement sl_4thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_4']/td[3]")
	private static WebElement sl_4thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[4]")
	private static WebElement sl_4thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[5]")
	private static WebElement sl_4thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[6]")
	private static WebElement sl_4thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[7]")
	private static WebElement sl_4thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[8]")
	private static WebElement sl_4thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[9]")
	private static WebElement sl_4thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[10]")
	private static WebElement sl_4thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[11]")
	private static WebElement sl_4thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[12]")
	private static WebElement sl_4thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[13]")
	private static WebElement sl_4thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[14]")
	private static WebElement sl_4thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[15]")
	private static WebElement sl_4thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[16]")
	private static WebElement sl_4thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[17]")
	private static WebElement sl_4thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[18]")
	private static WebElement sl_4thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[19]")
	private static WebElement sl_4thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[20]")
	private static WebElement sl_4thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[21]")
	private static WebElement sl_4thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_4']/td[22]")
	private static WebElement sl_4thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[23]")
	private static WebElement sl_4thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[24]")
	private static WebElement sl_4thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[25]")
	private static WebElement sl_4thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[26]")
	private static WebElement sl_4thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[27]")
	private static WebElement sl_4thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[28]")
	private static WebElement sl_4thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[29]")
	private static WebElement sl_4thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[30]")
	private static WebElement sl_4thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[31]")
	private static WebElement sl_4thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[32]")
	private static WebElement sl_4thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[33]")
	private static WebElement sl_4thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[34]")
	private static WebElement sl_4thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[35]")
	private static WebElement sl_4thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[36]")
	private static WebElement sl_4thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[37]")
	private static WebElement sl_4thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[38]")
	private static WebElement sl_4thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[39]")
	private static WebElement sl_4thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[40]")
	private static WebElement sl_4thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[41]")
	private static WebElement sl_4thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[42]")
	private static WebElement sl_4thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[43]")
	private static WebElement sl_4thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[44]")
	private static WebElement sl_4thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[45]")
	private static WebElement sl_4thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[46]")
	private static WebElement sl_4thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[47]")
	private static WebElement sl_4thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[48]")
	private static WebElement sl_4thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[49]")
	private static WebElement sl_4thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[50]")
	private static WebElement sl_4thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_4']/td[51]")
	private static WebElement sl_4thRow50thCol;
	
	

	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_5']/td[2]")
	private static WebElement sl_5thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_5']/td[3]")
	private static WebElement sl_5thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[4]")
	private static WebElement sl_5thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[5]")
	private static WebElement sl_5thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[6]")
	private static WebElement sl_5thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[7]")
	private static WebElement sl_5thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[8]")
	private static WebElement sl_5thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[9]")
	private static WebElement sl_5thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[10]")
	private static WebElement sl_5thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[11]")
	private static WebElement sl_5thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[12]")
	private static WebElement sl_5thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[13]")
	private static WebElement sl_5thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[14]")
	private static WebElement sl_5thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[15]")
	private static WebElement sl_5thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[16]")
	private static WebElement sl_5thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[17]")
	private static WebElement sl_5thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[18]")
	private static WebElement sl_5thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[19]")
	private static WebElement sl_5thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[20]")
	private static WebElement sl_5thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[21]")
	private static WebElement sl_5thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_5']/td[22]")
	private static WebElement sl_5thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[23]")
	private static WebElement sl_5thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[24]")
	private static WebElement sl_5thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[25]")
	private static WebElement sl_5thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[26]")
	private static WebElement sl_5thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[27]")
	private static WebElement sl_5thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[28]")
	private static WebElement sl_5thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[29]")
	private static WebElement sl_5thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[30]")
	private static WebElement sl_5thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[31]")
	private static WebElement sl_5thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[32]")
	private static WebElement sl_5thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[33]")
	private static WebElement sl_5thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[34]")
	private static WebElement sl_5thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[35]")
	private static WebElement sl_5thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[36]")
	private static WebElement sl_5thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[37]")
	private static WebElement sl_5thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[38]")
	private static WebElement sl_5thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[39]")
	private static WebElement sl_5thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[40]")
	private static WebElement sl_5thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[41]")
	private static WebElement sl_5thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[42]")
	private static WebElement sl_5thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[43]")
	private static WebElement sl_5thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[44]")
	private static WebElement sl_5thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[45]")
	private static WebElement sl_5thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[46]")
	private static WebElement sl_5thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[47]")
	private static WebElement sl_5thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[48]")
	private static WebElement sl_5thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[49]")
	private static WebElement sl_5thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[50]")
	private static WebElement sl_5thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_5']/td[51]")
	private static WebElement sl_5thRow50thCol;
	
	
	
	

	
	@FindBy(xpath="//*[@id='trRender_6']/td[2]")
	private static WebElement sl_6thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_6']/td[3]")
	private static WebElement sl_6thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[4]")
	private static WebElement sl_6thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[5]")
	private static WebElement sl_6thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[6]")
	private static WebElement sl_6thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[7]")
	private static WebElement sl_6thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[8]")
	private static WebElement sl_6thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[9]")
	private static WebElement sl_6thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[10]")
	private static WebElement sl_6thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[11]")
	private static WebElement sl_6thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[12]")
	private static WebElement sl_6thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[13]")
	private static WebElement sl_6thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[14]")
	private static WebElement sl_6thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[15]")
	private static WebElement sl_6thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[16]")
	private static WebElement sl_6thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[17]")
	private static WebElement sl_6thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[18]")
	private static WebElement sl_6thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[19]")
	private static WebElement sl_6thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[20]")
	private static WebElement sl_6thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[21]")
	private static WebElement sl_6thRow20thCol;
	

	@FindBy(xpath="//*[@id='trRender_6']/td[22]")
	private static WebElement sl_6thRow21thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[23]")
	private static WebElement sl_6thRow22thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[24]")
	private static WebElement sl_6thRow23thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[25]")
	private static WebElement sl_6thRow24thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[26]")
	private static WebElement sl_6thRow25thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[27]")
	private static WebElement sl_6thRow26thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[28]")
	private static WebElement sl_6thRow27thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[29]")
	private static WebElement sl_6thRow28thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[30]")
	private static WebElement sl_6thRow29thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[31]")
	private static WebElement sl_6thRow30thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[32]")
	private static WebElement sl_6thRow31thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[33]")
	private static WebElement sl_6thRow32thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[34]")
	private static WebElement sl_6thRow33thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[35]")
	private static WebElement sl_6thRow34thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[36]")
	private static WebElement sl_6thRow35thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[37]")
	private static WebElement sl_6thRow36thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[38]")
	private static WebElement sl_6thRow37thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[39]")
	private static WebElement sl_6thRow38thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[40]")
	private static WebElement sl_6thRow39thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[41]")
	private static WebElement sl_6thRow40thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[42]")
	private static WebElement sl_6thRow41thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[43]")
	private static WebElement sl_6thRow42thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[44]")
	private static WebElement sl_6thRow43thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[45]")
	private static WebElement sl_6thRow44thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[46]")
	private static WebElement sl_6thRow45thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[47]")
	private static WebElement sl_6thRow46thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[48]")
	private static WebElement sl_6thRow47thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[49]")
	private static WebElement sl_6thRow48thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[50]")
	private static WebElement sl_6thRow49thCol;
	
	@FindBy(xpath="//*[@id='trRender_6']/td[51]")
	private static WebElement sl_6thRow50thCol;
	
	
	
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_7']/td[2]")
	private static WebElement sl_7thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_7']/td[3]")
	private static WebElement sl_7thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[4]")
	private static WebElement sl_7thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[5]")
	private static WebElement sl_7thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[6]")
	private static WebElement sl_7thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[7]")
	private static WebElement sl_7thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[8]")
	private static WebElement sl_7thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[9]")
	private static WebElement sl_7thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[10]")
	private static WebElement sl_7thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[11]")
	private static WebElement sl_7thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[12]")
	private static WebElement sl_7thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[13]")
	private static WebElement sl_7thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[14]")
	private static WebElement sl_7thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[15]")
	private static WebElement sl_7thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[16]")
	private static WebElement sl_7thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[17]")
	private static WebElement sl_7thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[18]")
	private static WebElement sl_7thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[19]")
	private static WebElement sl_7thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[20]")
	private static WebElement sl_7thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_7']/td[21]")
	private static WebElement sl_7thRow20thCol;
	
	
	
	
	
	@FindBy(xpath="//*[@id='trRender_8']/td[2]")
	private static WebElement sl_8thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_8']/td[3]")
	private static WebElement sl_8thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[4]")
	private static WebElement sl_8thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[5]")
	private static WebElement sl_8thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[6]")
	private static WebElement sl_8thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[7]")
	private static WebElement sl_8thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[8]")
	private static WebElement sl_8thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[9]")
	private static WebElement sl_8thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[10]")
	private static WebElement sl_8thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[11]")
	private static WebElement sl_8thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[12]")
	private static WebElement sl_8thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[13]")
	private static WebElement sl_8thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[14]")
	private static WebElement sl_8thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[15]")
	private static WebElement sl_8thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[16]")
	private static WebElement sl_8thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[17]")
	private static WebElement sl_8thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[18]")
	private static WebElement sl_8thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[19]")
	private static WebElement sl_8thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[20]")
	private static WebElement sl_8thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_8']/td[21]")
	private static WebElement sl_8thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_9']/td[2]")
	private static WebElement sl_9thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_9']/td[3]")
	private static WebElement sl_9thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[4]")
	private static WebElement sl_9thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[5]")
	private static WebElement sl_9thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[6]")
	private static WebElement sl_9thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[7]")
	private static WebElement sl_9thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[8]")
	private static WebElement sl_9thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[9]")
	private static WebElement sl_9thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[10]")
	private static WebElement sl_9thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[11]")
	private static WebElement sl_9thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[12]")
	private static WebElement sl_9thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[13]")
	private static WebElement sl_9thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[14]")
	private static WebElement sl_9thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[15]")
	private static WebElement sl_9thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[16]")
	private static WebElement sl_9thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[17]")
	private static WebElement sl_9thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[18]")
	private static WebElement sl_9thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[19]")
	private static WebElement sl_9thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[20]")
	private static WebElement sl_9thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_9']/td[21]")
	private static WebElement sl_9thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_10']/td[2]")
	private static WebElement sl_10thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_10']/td[3]")
	private static WebElement sl_10thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[4]")
	private static WebElement sl_10thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[5]")
	private static WebElement sl_10thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[6]")
	private static WebElement sl_10thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[7]")
	private static WebElement sl_10thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[8]")
	private static WebElement sl_10thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[9]")
	private static WebElement sl_10thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[10]")
	private static WebElement sl_10thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[11]")
	private static WebElement sl_10thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[12]")
	private static WebElement sl_10thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[13]")
	private static WebElement sl_10thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[14]")
	private static WebElement sl_10thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[15]")
	private static WebElement sl_10thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[16]")
	private static WebElement sl_10thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[17]")
	private static WebElement sl_10thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[18]")
	private static WebElement sl_10thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[19]")
	private static WebElement sl_10thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[20]")
	private static WebElement sl_10thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_10']/td[21]")
	private static WebElement sl_10thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_11']/td[2]")
	private static WebElement sl_11thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_11']/td[3]")
	private static WebElement sl_11thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[4]")
	private static WebElement sl_11thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[5]")
	private static WebElement sl_11thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[6]")
	private static WebElement sl_11thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[7]")
	private static WebElement sl_11thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[8]")
	private static WebElement sl_11thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[9]")
	private static WebElement sl_11thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[10]")
	private static WebElement sl_11thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[11]")
	private static WebElement sl_11thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[12]")
	private static WebElement sl_11thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[13]")
	private static WebElement sl_11thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[14]")
	private static WebElement sl_11thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[15]")
	private static WebElement sl_11thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[16]")
	private static WebElement sl_11thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[17]")
	private static WebElement sl_11thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[18]")
	private static WebElement sl_11thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[19]")
	private static WebElement sl_11thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[20]")
	private static WebElement sl_11thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_11']/td[21]")
	private static WebElement sl_11thRow20thCol;
	
	
	@FindBy(xpath="//*[@id='trRender_12']/td[2]")
	private static WebElement sl_12thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_12']/td[3]")
	private static WebElement sl_12thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[4]")
	private static WebElement sl_12thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[5]")
	private static WebElement sl_12thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[6]")
	private static WebElement sl_12thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[7]")
	private static WebElement sl_12thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[8]")
	private static WebElement sl_12thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[9]")
	private static WebElement sl_12thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[10]")
	private static WebElement sl_12thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[11]")
	private static WebElement sl_12thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[12]")
	private static WebElement sl_12thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[13]")
	private static WebElement sl_12thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[14]")
	private static WebElement sl_12thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[15]")
	private static WebElement sl_12thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[16]")
	private static WebElement sl_12thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[17]")
	private static WebElement sl_12thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[18]")
	private static WebElement sl_12thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[19]")
	private static WebElement sl_12thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[20]")
	private static WebElement sl_12thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_12']/td[21]")
	private static WebElement sl_12thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_13']/td[2]")
	private static WebElement sl_13thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_13']/td[3]")
	private static WebElement sl_13thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[4]")
	private static WebElement sl_13thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[5]")
	private static WebElement sl_13thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[6]")
	private static WebElement sl_13thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[7]")
	private static WebElement sl_13thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[8]")
	private static WebElement sl_13thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[9]")
	private static WebElement sl_13thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[10]")
	private static WebElement sl_13thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[11]")
	private static WebElement sl_13thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[12]")
	private static WebElement sl_13thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[13]")
	private static WebElement sl_13thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[14]")
	private static WebElement sl_13thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[15]")
	private static WebElement sl_13thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[16]")
	private static WebElement sl_13thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[17]")
	private static WebElement sl_13thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[18]")
	private static WebElement sl_13thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[19]")
	private static WebElement sl_13thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[20]")
	private static WebElement sl_13thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_13']/td[21]")
	private static WebElement sl_13thRow20thCol;
	
	
	
	@FindBy(xpath="//*[@id='trRender_14']/td[2]")
	private static WebElement sl_14thRow1stCol;
			
	@FindBy(xpath="//*[@id='trRender_14']/td[3]")
	private static WebElement sl_14thRow2ndCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[4]")
	private static WebElement sl_14thRow3rdCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[5]")
	private static WebElement sl_14thRow4thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[6]")
	private static WebElement sl_14thRow5thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[7]")
	private static WebElement sl_14thRow6thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[8]")
	private static WebElement sl_14thRow7thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[9]")
	private static WebElement sl_14thRow8thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[10]")
	private static WebElement sl_14thRow9thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[11]")
	private static WebElement sl_14thRow10thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[12]")
	private static WebElement sl_14thRow11thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[13]")
	private static WebElement sl_14thRow12thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[14]")
	private static WebElement sl_14thRow13thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[15]")
	private static WebElement sl_14thRow14thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[16]")
	private static WebElement sl_14thRow15thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[17]")
	private static WebElement sl_14thRow16thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[18]")
	private static WebElement sl_14thRow17thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[19]")
	private static WebElement sl_14thRow18thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[20]")
	private static WebElement sl_14thRow19thCol;
	
	@FindBy(xpath="//*[@id='trRender_14']/td[21]")
	private static WebElement sl_14thRow20thCol;
	
	
	
	/////////////////////////////////
	
	// Opening Stock Register Elements
	
	@FindBy (xpath="//li[@id='154']/a[2]")
	private static WebElement osr_ItemsGroupBtn;
	
	@FindBy(xpath="//select[@id='DateOptions_']")
	private static WebElement osr_dateOptionDropdown;
	
	@FindBy(xpath="//input[@id='id_starting_date_']")
	private static WebElement osr_StartDateTxt;
	
	@FindBy(xpath="//td[@id='id_starting_date__input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement osr_startdateCalanderBtn;
	
	@FindBy(xpath="//input[@id='id_ending_date_']")
	private static WebElement osr_EndDateTxt;
	
	@FindBy(xpath="//td[@id='id_ending_date__input_image']//span[@class='icon-calender theme_color-inverse datecontrol_arrow_margin datecontrol_arrow']")
	private static WebElement osr_EndDateCalanderBtn;
	
	@FindBy(xpath="//select[@id='RITLayout_']")
	private static WebElement osr_layoutDropdown;
	
	@FindBy(xpath="//select[@id='RITOutput_']")
	private static WebElement osr_outputDropdown;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-schedule']")
	private static WebElement osr_ScheduleBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-custamize']")
	private static WebElement osr_CustomizeBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-filter']")
	private static WebElement osr_FilterBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-ok']")
	private static WebElement osr_OkBtn;
	
	@FindBy(xpath="//i[@class='icon-font6 icon-close']")
	private static WebElement osr_CloseBtn;
	
	///////
	
	@FindBy(xpath="//input[@id='id_body_37']")
	private static WebElement enter_Expirydate;
	
	@FindBy(xpath="//input[@id='id_body_36']")
	private static WebElement enter_MfgDate;
	
	@FindBy(xpath="//input[@id='id_body_108']")
	private static WebElement enter_BatchRate;
	
	@FindBy(xpath="//input[@id='id_body_109']")
	private static WebElement enter_BatchRateValue1;
	
	@FindBy(xpath="//input[@id='id_body_110']")
	private static WebElement enter_BatchRateValue2;
	
	
	////////////////////////
	
	// Finance Reports Almost Common Some Fields Are Added Below
	
	@FindBy (xpath="//li[@id='18']/a[1]")
	private static WebElement assetsExpandOrCollepseBtn;
	
	@FindBy(xpath="//li[@id='18']/a[2]")
	private static WebElement assets;
	
	@FindBy(xpath="//li[@id='17']/a[2]")
	private static WebElement fixedAssets;
	
	@FindBy (xpath="//li[@id='23']/a[1]")
	private static WebElement currentAssetsExpandOrCollepseBtn;	
			
	@FindBy(xpath="//li[@id='23']/a[2]")
	private static WebElement currentAssets;
	
	@FindBy(xpath="//li[@id='8']/a[2]")
	private static WebElement cashAndBank;
	
	@FindBy(xpath="//li[@id='13']/a[2]")
	private static WebElement inventories;
	
	@FindBy(xpath="//li[@id='22']/a[2]")
	private static WebElement accountsReceivable;
	
	@FindBy (xpath="//li[@id='83']/a[2]")
	private static WebElement customerUpdateGroup;
	
	@FindBy(xpath="//li[@id='72']/a[2]")
	private static WebElement investments;
	
	@FindBy (xpath="//li[@id='25']/a[1]")
	private static WebElement expensesExpensionOrCollepseBtn;
	
	@FindBy(xpath="//li[@id='25']/a[2]")
	private static WebElement expenses;
	
	@FindBy(xpath="//li[@id='24']/a[2]")
	private static WebElement directExpenses;
	
	@FindBy (xpath="//li[@id='73']/a[1]")
	private static WebElement indirectExpensesExpandOrCollepseBtn; 
	
	@FindBy(xpath="//li[@id='73']/a[2]")
	private static WebElement indirectExpenses;
	
	@FindBy(xpath="//li[@id='54']/a[2]")
	private static WebElement administrativeExpenses;
	
	@FindBy(xpath="//li[@id='60']/a[2]")
	private static WebElement employeeBenefits;
	
	@FindBy(xpath="//li[@id='64']/a[2]")
	private static WebElement financialCharges;
	
	@FindBy(xpath="//li[@id='69']/a[2]")
	private static WebElement gainAndLoss;
	
	@FindBy(xpath="//li[@id='26']/a[2]")
	private static WebElement controlAccounts;
	
	@FindBy (xpath="//li[@id='29']/a[1]")
	private static WebElement revenueExpandOrCollepseBtn;
	
	@FindBy(xpath="//li[@id='29']/a[2]")
	private static WebElement revenue;
	
	@FindBy (xpath="//li[@id='28']/a[2]")
	private static WebElement sales;
	
	@FindBy (xpath="//li[@id='33']/a[1]")
	private static WebElement equitiesExpandOrCollepseBtn;
	
	@FindBy(xpath="//li[@id='33']/a[2]")
	private static WebElement equities;
	
	@FindBy (xpath="//li[@id='32']/a[2]")
	private static WebElement capital;
	
	@FindBy (xpath="//li[@id='39']/a[1]")
	private static WebElement liabilitiesExpandOrCollepseBtn;
	
	@FindBy (xpath="//li[@id='39']/a[2]")
	private static WebElement liabilities;
	
	@FindBy (xpath="//li[@id='38']/a[1]")
	private static WebElement loansAndBorrowingsExpandOrCollepseBtn;
	
	@FindBy (xpath="//li[@id='38']/a[2]")
	private static WebElement loansAndBorrowings;
	
	@FindBy (xpath="//li[@id='37']/a[2]")
	private static WebElement loans;
	
	@FindBy (xpath="//li[@id='42']/a[2]")
	private static WebElement accruedLiabilities;
	
	@FindBy (xpath="//li[@id='45']/a[2]")
	private static WebElement tradePayable;
	
	@FindBy (xpath="//li[@id='48']/a[2]")
	private static WebElement provisions;
	
	/////////////////////////////////////////////////////////////////////////
	
	
	@FindBy (xpath="//input[@id='txtSerialNo']")
	private static WebElement RMAPopupSerialNumberTxtField;

	@FindBy (xpath="//input[@id='txtQuantity']")
	private static WebElement RMAPopupQuantityTxtField;
	
	@FindBy (xpath="//div[@id='img_add']/span")
	private static WebElement RMAPopupAddBtn;
		
	@FindBy (xpath="//div[@id='Modal_Search_Body']/div[3]/label")
	private static WebElement RMAPopupNumberofItemsLabel;
	
	@FindBy (xpath="//label[@id='lblItems']")
	private static WebElement RMAPopupNumberOfItems;
	
	@FindBy (xpath="//th[@id='RMA_Table_control_heading_1']/div")
	private static WebElement RMAPopupTableHeadingRMA;
	
	@FindBy (xpath="//th[@id='RMA_Table_control_heading_2']/div")
	private static WebElement RMAPopupTableHeadingDocumentNo;
	
	@FindBy (xpath="//th[@id='RMA_Table_control_heading_3']/div")
	private static WebElement RMAPopupTableHeadingDocumentDate;
	
	@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[1]/label")
	private static WebElement RMAPopupClearBtn;
	
	@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[2]/label")
	private static WebElement RMAPopupOkBtn;
	
	@FindBy (xpath="//div[@id='RMAModel_Bottom']/div[3]/label")
	private static WebElement RMAPopupCancelBtn;
	
	@FindBy (xpath="//div[@id='Modal_Header']/div[2]/span/i")
	private static WebElement RMAPopupCloseBtn;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_1-1']")
	private static WebElement RMAPopupTableRow1Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_2-1']")
	private static WebElement RMAPopupTableRow2Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_3-1']")
	private static WebElement RMAPopupTableRow3Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_4-1']")
	private static WebElement RMAPopupTableRow4Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_5-1']")
	private static WebElement RMAPopupTableRow5Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_6-1']")
	private static WebElement RMAPopupTableRow6Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_7-1']")
	private static WebElement RMAPopupTableRow7Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_8-1']")
	private static WebElement RMAPopupTableRow8Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_9-1']")
	private static WebElement RMAPopupTableRow9Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_10-1']")
	private static WebElement RMAPopupTableRow10Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_11-1']")
	private static WebElement RMAPopupTableRow11Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_12-1']")
	private static WebElement RMAPopupTableRow12Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_13-1']")
	private static WebElement RMAPopupTableRow13Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_14-1']")
	private static WebElement RMAPopupTableRow14Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_15-1']")
	private static WebElement RMAPopupTableRow15Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_16-1']")
	private static WebElement RMAPopupTableRow16Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_17-1']")
	private static WebElement RMAPopupTableRow17Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_18-1']")
	private static WebElement RMAPopupTableRow18Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_19-1']")
	private static WebElement RMAPopupTableRow19Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_20-1']")
	private static WebElement RMAPopupTableRow20Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_21-1']")
	private static WebElement RMAPopupTableRow21Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_22-1']")
	private static WebElement RMAPopupTableRow22Column1;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_1-2']")
	private static WebElement RMAPopupTableRow1Column2;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_1-3']")
	private static WebElement RMAPopupTableRow1Column3;
	
	@FindBy (xpath="//td[@id='id_body_38_input_image']/img")
	private static WebElement RMAPopupExpansionBtn;
	
	@FindBy (xpath="//*[@id='id_transactionentry_infopanel_container']/div[1]/div[3]/span")
	private static WebElement infoSideBarBtn;
	
	@FindBy (xpath="//tr[@id='trRender_1']/td[4]")
	private static WebElement savedVoucher1stRowVoucherNumer;
	
	@FindBy (xpath="//span[@id='reportClose']")
	private static WebElement sl_ReportsCloseBtn;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
	private static WebElement stockStatmentReportOpeningBalance;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[5]")
	private static WebElement stockStatmentReportBalanceQuantity;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[6]")
	private static WebElement stockStatmentReportValue;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
	private static WebElement stockMovementOpeningBalanceQty;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[3]")
	private static WebElement stockMovementOpeningBalanceValue;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[8]")
	private static WebElement stockMovementBalanceQuantity;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[9]")
	private static WebElement stockMovementBalanceStockValue;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[10]")
	private static WebElement stockMovementAverageRate;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
	private static WebElement multiLevelStockMovementOpeningBalanceQty;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[3]")
	private static WebElement multiLevelStockMovementOpeningBalanceValue;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[8]")
	private static WebElement multiLevelStockMovementBalanceQuantity;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[9]")
	private static WebElement multiLevelStockMovementBalanceStockValue;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[10]")
	private static WebElement multiLevelStockMovementAverageRate;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
	private static WebElement virtualStockAnalysisStockBal;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[6]")
	private static WebElement virtualStockAnalysisVirtualStock;
	
	@FindBy (xpath="//span[contains(text(),'Stock valuation of')]")
	private static WebElement stockValidationReportsLabel;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[4]")
	private static WebElement stockValidationQuantity;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[5]")
	private static WebElement stockValidationStockValue;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[6]")
	private static WebElement stockValidationUnitPrice;
	

	//Stock Analysis by RMA Reports Table
	//RMA Number
	@FindBy (xpath="//tr[@id='trRender_1']/td[1]")
	private static WebElement rmaNumber1stRow;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[1]")
	private static WebElement rmaNumber2ndRow;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[1]")
	private static WebElement rmaNumber3rdRow;
	
	@FindBy (xpath="//tr[@id='trRender_4']/td[1]")
	private static WebElement rmaNumber4thRow;
	
	@FindBy (xpath="//tr[@id='trRender_5']/td[1]")
	private static WebElement rmaNumber5thRow;
	
	@FindBy (xpath="//tr[@id='trRender_6']/td[1]")
	private static WebElement rmaNumber6thRow;
	
	@FindBy (xpath="//tr[@id='trRender_7']/td[1]")
	private static WebElement rmaNumber7thRow;
	
	@FindBy (xpath="//tr[@id='trRender_8']/td[1]")
	private static WebElement rmaNumber8thRow;
	
	@FindBy (xpath="//tr[@id='trRender_9']/td[1]")
	private static WebElement rmaNumber9thRow;
	
	@FindBy (xpath="//tr[@id='trRender_10']/td[1]")
	private static WebElement rmaNumber10thRow;
	
	@FindBy (xpath="//tr[@id='trRender_11']/td[1]")
	private static WebElement rmaNumber11thRow;
	
	@FindBy (xpath="//tr[@id='trRender_12']/td[1]")
	private static WebElement rmaNumber12thRow;
	
	@FindBy (xpath="//tr[@id='trRender_13']/td[1]")
	private static WebElement rmaNumber13thRow;
	
	@FindBy (xpath="//tr[@id='trRender_14']/td[1]")
	private static WebElement rmaNumber14thRow;
	
	@FindBy (xpath="//tr[@id='trRender_1']/td[1]")
	private static WebElement rmaNumberPg2_1stRow;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[1]")
	private static WebElement rmaNumberPg2_2ndRow;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[1]")
	private static WebElement rmaNumberPg2_3rdRow;
	
	@FindBy (xpath="//tr[@id='trRender_4']/td[1]")
	private static WebElement rmaNumberPg2_4thRow;
	
	@FindBy (xpath="//tr[@id='trRender_5']/td[1]")
	private static WebElement rmaNumberPg2_5thRow;
	
	@FindBy (xpath="//tr[@id='trRender_6']/td[1]")
	private static WebElement rmaNumberPg2_6thRow;
	
	
	//Quantity
	@FindBy (xpath="//tr[@id='trRender_1']/td[2]")
	private static WebElement quantity1stRow;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
	private static WebElement quantity2ndRow;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
	private static WebElement quantity3rdRow;
	
	@FindBy (xpath="//tr[@id='trRender_4']/td[2]")
	private static WebElement quantity4thRow;
	
	@FindBy (xpath="//tr[@id='trRender_5']/td[2]")
	private static WebElement quantity5thRow;
	
	@FindBy (xpath="//tr[@id='trRender_6']/td[2]")
	private static WebElement quantity6thRow;
	
	@FindBy (xpath="//tr[@id='trRender_7']/td[2]")
	private static WebElement quantity7thRow;
	
	@FindBy (xpath="//tr[@id='trRender_8']/td[2]")
	private static WebElement quantity8thRow;
	
	@FindBy (xpath="//tr[@id='trRender_9']/td[2]")
	private static WebElement quantity9thRow;
	
	@FindBy (xpath="//tr[@id='trRender_10']/td[2]")
	private static WebElement quantity10thRow;
	
	@FindBy (xpath="//tr[@id='trRender_11']/td[2]")
	private static WebElement quantity11thRow;
	
	@FindBy (xpath="//tr[@id='trRender_12']/td[2]")
	private static WebElement quantity12thRow;
	
	@FindBy (xpath="//tr[@id='trRender_13']/td[2]")
	private static WebElement quantity13thRow;
	
	@FindBy (xpath="//tr[@id='trRender_14']/td[2]")
	private static WebElement quantity14thRow;
	
	@FindBy (xpath="//tr[@id='trRender_1']/td[2]")
	private static WebElement quantityPg2_1stRow;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[2]")
	private static WebElement quantityPg2_2ndRow;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[2]")
	private static WebElement quantityPg2_3rdRow;
	
	@FindBy (xpath="//tr[@id='trRender_4']/td[2]")
	private static WebElement quantityPg2_4thRow;
	
	@FindBy (xpath="//tr[@id='trRender_5']/td[2]")
	private static WebElement quantityPg2_5thRow;
	
	@FindBy (xpath="//tr[@id='trRender_6']/td[2]")
	private static WebElement quantityPg2_6thRow;
	
	//Rate
	@FindBy (xpath="//tr[@id='trRender_1']/td[3]")
	private static WebElement rate1stRow;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[3]")
	private static WebElement rate2ndRow;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[3]")
	private static WebElement rate3rdRow;
	
	@FindBy (xpath="//tr[@id='trRender_4']/td[3]")
	private static WebElement rate4thRow;
	
	@FindBy (xpath="//tr[@id='trRender_5']/td[3]")
	private static WebElement rate5thRow;
	
	@FindBy (xpath="//tr[@id='trRender_6']/td[3]")
	private static WebElement rate6thRow;
	
	@FindBy (xpath="//tr[@id='trRender_7']/td[3]")
	private static WebElement rate7thRow;
	
	@FindBy (xpath="//tr[@id='trRender_8']/td[3]")
	private static WebElement rate8thRow;
	
	@FindBy (xpath="//tr[@id='trRender_9']/td[3]")
	private static WebElement rate9thRow;
	
	@FindBy (xpath="//tr[@id='trRender_10']/td[3]")
	private static WebElement rate10thRow;
	
	@FindBy (xpath="//tr[@id='trRender_11']/td[3]")
	private static WebElement rate11thRow;
	
	@FindBy (xpath="//tr[@id='trRender_12']/td[3]")
	private static WebElement rate12thRow;
	
	@FindBy (xpath="//tr[@id='trRender_13']/td[3]")
	private static WebElement rate13thRow;
	
	@FindBy (xpath="//tr[@id='trRender_14']/td[3]")
	private static WebElement rate14thRow;
	
	@FindBy (xpath="//tr[@id='trRender_1']/td[3]")
	private static WebElement ratePg2_1stRow;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[3]")
	private static WebElement ratePg2_2ndRow;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[3]")
	private static WebElement ratePg2_3rdRow;
	
	@FindBy (xpath="//tr[@id='trRender_4']/td[3]")
	private static WebElement ratePg2_4thRow;
	
	@FindBy (xpath="//tr[@id='trRender_5']/td[3]")
	private static WebElement ratePg2_5thRow;
	
	@FindBy (xpath="//tr[@id='trRender_6']/td[3]")
	private static WebElement ratePg2_6thRow;
	
	//Stock Value
	@FindBy (xpath="//tr[@id='trRender_1']/td[4]")
	private static WebElement stockValue1stRow;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[4]")
	private static WebElement stockValue2ndRow;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[4]")
	private static WebElement stockValue3rdRow;
	
	@FindBy (xpath="//tr[@id='trRender_4']/td[4]")
	private static WebElement stockValue4thRow;
	
	@FindBy (xpath="//tr[@id='trRender_5']/td[4]")
	private static WebElement stockValue5thRow;
	
	@FindBy (xpath="//tr[@id='trRender_6']/td[4]")
	private static WebElement stockValue6thRow;
	
	@FindBy (xpath="//tr[@id='trRender_7']/td[4]")
	private static WebElement stockValue7thRow;
	
	@FindBy (xpath="//tr[@id='trRender_8']/td[4]")
	private static WebElement stockValue8thRow;
	
	@FindBy (xpath="//tr[@id='trRender_9']/td[4]")
	private static WebElement stockValue9thRow;
	
	@FindBy (xpath="//tr[@id='trRender_10']/td[4]")
	private static WebElement stockValue10thRow;
	
	@FindBy (xpath="//tr[@id='trRender_11']/td[4]")
	private static WebElement stockValue11thRow;
	
	@FindBy (xpath="//tr[@id='trRender_12']/td[4]")
	private static WebElement stockValue12thRow;
	
	@FindBy (xpath="//tr[@id='trRender_13']/td[4]")
	private static WebElement stockValue13thRow;
	
	@FindBy (xpath="//tr[@id='trRender_14']/td[4]")
	private static WebElement stockValue14thRow;
	
	@FindBy (xpath="//tr[@id='trRender_1']/td[4]")
	private static WebElement stockValuePg2_1stRow;
	
	@FindBy (xpath="//tr[@id='trRender_2']/td[4]")
	private static WebElement stockValuePg2_2ndRow;
	
	@FindBy (xpath="//tr[@id='trRender_3']/td[4]")
	private static WebElement stockValuePg2_3rdRow;
	
	@FindBy (xpath="//tr[@id='trRender_4']/td[4]")
	private static WebElement stockValuePg2_4thRow;
	
	@FindBy (xpath="//tr[@id='trRender_5']/td[4]")
	private static WebElement stockValuePg2_5thRow;
	
	@FindBy (xpath="//tr[@id='trRender_6']/td[4]")
	private static WebElement stockValuePg2_6thRow;
	
	@FindBy (xpath="//button[@id='pgnumber_']")
	private static WebElement rmaReportsCurrentPageBtn;
	
	@FindBy (xpath="//td[@id='RMA_Table_col_8-4']")
	private static WebElement RMAPopupTable8thRowClrBtn;
	
	
		
	
			
	@FindBy (xpath="//input[@id='RITNumber__11']")
	private static WebElement slab1;
	
	@FindBy (xpath="//input[@id='RITNumber__12']")
	private static WebElement slab2;
	
	@FindBy (xpath="//input[@id='RITNumber__13']")
	private static WebElement slab3;
	
	@FindBy (xpath="//input[@id='RITNumber__14']")
	private static WebElement slab4;
	
	@FindBy (xpath="//input[@id='RITNumber__15']")
	private static WebElement slab5;
	
	@FindBy (xpath="//input[@id='RITNumber__16']")
	private static WebElement slab6;
	
	@FindBy (xpath="//input[@id='RITNumber__17']")
	private static WebElement slab7;
	
	@FindBy (xpath="//select[@id='RITCombobox__8']")
	private static WebElement slabUptoDrpdwn;
	
	
	
	/*@FindBy(xpath="//tr[@id='id_header_2_day_grid']")
	private static WebElement cal;
	
	
	@FindBy(xpath="//select[@id='id_header_2_month']")
	private static WebElement month;
	
	@FindBy(xpath="//select[@id='id_header_2_year']")
	private static WebElement year;
	*/
	
	

	@FindBy(xpath="//input[contains(@name,'chkRowCheck')]")
	private static WebElement selectGridFirstRow;


	@FindBy(xpath="//*[@id='lblnchecked']/input")
	private static WebElement selectGridSecondRow;


	@FindBy(xpath="//select[@id='iValuationMethod']")
	private static WebElement validationMethodDropdown;

    @FindBy(xpath="//*[@id='btnMasterEdit']")
    private static WebElement itemEditBtn;
    
    @FindBy(xpath="//*[@id='btnDelete']")
    private static WebElement itemDeleteBtn;
    
    @FindBy(xpath="//*[@id='btnClose']")
    private static WebElement itemCloseBtn;

    @FindBy(xpath="//*[@id='toggle_ribbon']")
    private static WebElement itemToggleRibbonBtn;
    
    
	     @FindBy(xpath="//*[@id='btnMasterSaveClick']")
	     private static WebElement itemEditSaveBtn;
	     
	     @FindBy(xpath="//*[@id='btnMasterCopy']")
	     private static WebElement itemEditCpoyBtn;
	     
	     @FindBy(xpath="//*[@id='btnMasterClone']")
	     private static WebElement itemEditCloneBtn;
	     
	     @FindBy(xpath="//*[@id='GenerateNewMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[6]")
	     private static WebElement itemEditCloseBtn;
	     
	     @FindBy(xpath="//*[@id='divBtnGroup0']/div/a")
	     private static WebElement ItemEditGeneralBtn;
	 	     
		     @FindBy(xpath="//*[@id='sName']")
		     private static WebElement EditGeneralName;
		     
		     @FindBy(xpath="//*[@id='sCode']")
		     private static WebElement EditGeneralCode;
		     
		     @FindBy(xpath="//*[@id='iProductType']")
		     private static WebElement EditGeneralItemTypeDropDown;
		     
		     @FindBy(xpath="//*[@id='fReorderLevel']")
		     private static WebElement EditGeneralReorderLevel;
		     
		     @FindBy(xpath="//*[@id='iBinCapacity']")
		     private static WebElement EditGeneralBinCapacity;
		     
		     @FindBy(xpath="//*[@id='iValuationMethod']")
		     private static WebElement EditGeneralValuationMethodDropDown;
		     
		     @FindBy(xpath="//*[@id='iCategory']")
		     private static WebElement EditGeneralCategoryDropDown;
		     
		     @FindBy(xpath="//*[@id='iCategory_input_settings']/span")
		     private static WebElement EditGeneralCategorySettingBtn;
		     
		     @FindBy(xpath="//*[@id='iProductMake']")
		     private static WebElement EditGeneralItemMakeDropDown;
		     
		     @FindBy(xpath="//*[@id='Printer']")
		     private static WebElement EditGeneralPrint;
		     
		     @FindBy(xpath="//*[@id='iAlternateCategory']")
		     private static WebElement EditGeneralAlternativeCategoryDropdown;
		     
		     @FindBy(xpath="//*[@id='iAlternateCategory_input_settings']/span")
		     private static WebElement EditGeneralAlternativeCategoryDropdownSettingBtn;
		     
		     @FindBy(xpath="//*[@id='sDescription']")
		     private static WebElement EditGeneralDescription;
		     
		     @FindBy(xpath="//*[@id='bPerishableItem']")
		     private static WebElement EditGeneralPerishableItemCheckBox;
		     
		     @FindBy(xpath="//*[@id='iBin']")
		     private static WebElement EditGeneralBinDropdown;
		     
		     @FindBy(xpath="//*[@id='iBin_input_settings']/span")
		     private static WebElement EditGeneralBinDropdownSettingBtn;
		     		     
		     @FindBy(xpath="//*[@id='BrowsepImage']")
		     private static WebElement EditGeneralUploadImageOrFileBtn;
		     
		     @FindBy(xpath="//*[@id='btnMasterSaveClick']/i")
		     private static WebElement EditGeneralSaveBtn;
		     
		     @FindBy(xpath="//*[@id='GenerateEditMasterModel']/div/div[1]/div[2]/div/ul/li[2]/button[5]")
		     private static WebElement EditGeneralCLoseBtn;
		     
	
	
	
	@FindBy (xpath="//span[@id='sp_search']")
	private static WebElement RMAPopupSerialNoExpansionBtn;
	
	@FindBy (xpath="//input[@id='Search_txtSearchBox']")
	private static WebElement searchRMASearchTxtField;
	
	@FindBy (xpath="//input[@id='Search_txtQuantity']")
	private static WebElement searchRMAQuantityTxtField;
	
	@FindBy (xpath="//label[@id='Search_lblItems']")
	private static WebElement searchRMANoOfItemsTxt;
	
	@FindBy (xpath="//input[@id='chkSelectALL']")
	private static WebElement searchRMASelectAllChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[4]/td[1]/input")
	private static WebElement searchRMA4ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[101]/td[1]/input")
	private static WebElement searchRMA101ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[102]/td[1]/input")
	private static WebElement searchRMA102ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[103]/td[1]/input")
	private static WebElement searchRMA103ChkBox;
	
	@FindBy (xpath="//*[@id='RMASearchTable']/tbody/tr[2]/td[1]/input")
	private static WebElement searchRMA2ndRowChkBox;
	
	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[2]")
	private static WebElement searchRMATableHeadingSerialNo;
	
	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[3]")
	private static WebElement searchRMATableHeadingDocNo;
	
	@FindBy (xpath="//table[@id='RMASearchTable']/thead/tr/td[4]")
	private static WebElement searchRMATableHeadingDate;
	
	@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[1]/label")
	private static WebElement searchRMAOkBtn;
	
	@FindBy (xpath="//*[@id='SearchModal_Content']/div[3]/div/div[2]/label")
	private static WebElement searchRMACancelBtn;
	
	@FindBy (xpath="//*[@id='SearchModal_Content']/div[1]/div[2]/span/i")
	private static WebElement searchRMACloseBtn;
	
	
	
	@FindBy(xpath="//a[@id='16']")
	private static WebElement  SettingsmenuBtn;
	
	@FindBy(xpath="//span[contains(text(),'Configure Transactions')]")
	private static WebElement  ConfigureTransactionBtn;
	
	@FindBy(xpath="//label[contains(text(),'Preferences')]")
	private static WebElement  PreferencesBtn;
	
	@FindBy(xpath="//div[@id='docCustomization']")
	private static WebElement  DocumentCustomizationBtn;
	
	@FindBy(xpath="//a[@id='0']")
	private static WebElement  TagsBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='1']")
	private static WebElement  AccountsBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='2']")
	private static WebElement  BudgetBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='3']")
	private static WebElement  ARAPBtn;
	
	@FindBy(xpath="//a[@id='4']")
	private static WebElement  MiselleanousBtn;
	
	@FindBy(xpath="//a[@id='5']")
	private static WebElement  PDCBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='6']")
	private static WebElement  InventoryBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='7']")
	private static WebElement  BatchBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='30']")
	private static WebElement  RMABtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='8']")
	private static WebElement  BinsBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='9']")
	private static WebElement  HirePurchaseBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='10']")
	private static WebElement  QuotationAnalysisBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='34']")
	private static WebElement  RFIDBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='29']")
	private static WebElement  AutoIndentBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='14']")
	private static WebElement  ABCAnalysisBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='11']")
	private static WebElement  ReportBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='12']")
	private static WebElement  InternetBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//ul//li//a[@id='13']")
	private static WebElement  MailSettingsBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='16']")
	private static WebElement  MastersBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='17']")
	private static WebElement  ExternalModulesBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='18']")
	private static WebElement  InfoBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='19']")
	private static WebElement  ProductionBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='20']")
	private static WebElement  MrpBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='22']")
	private static WebElement  FixedAssetsBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='25']")
	private static WebElement  VatBtn;
	
	@FindBy(xpath="//a[@id='28']")
	private static WebElement  PosBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='35']")
	private static WebElement  WareHouseManagementBtn;
	
	@FindBy(xpath="//a[@id='36']")
	private static WebElement  LetterForCreditBtn;
	
	@FindBy(xpath="//ul[@id='preferenceUL']//a[@id='37']")
	private static WebElement  PronghornBnt;
	
	@FindBy(xpath="//input[@id='txtVoucherWizard']")
	private static WebElement  SearchTxt;
	
	@FindBy(xpath="//i[@class='icon-close icon-font6']")
	private static WebElement  CloseBtn;



		@FindBy(xpath="//input[@id='chkRMASupport']")
		private static WebElement  RmaSupportChkBox;
		
		@FindBy(xpath="//input[@id='chkRMAbasedalternateQuantity']")
		private static WebElement  RMAbasedalternateQuantityChkBox;
		
		@FindBy(xpath="//input[@id='chkRMANumberAlwaysnumeric']")
		private static WebElement  RMANumberAlwaysnumericChkBox;
		
		@FindBy(xpath="//input[@id='chkRMANumberUniqueAcrossAllItems']")
		private static WebElement  RMANumberUniqueAcrossAllItemsChkBox;
		
		@FindBy(xpath="//input[@id='chkInputRMANo']")
		private static WebElement  InputRMANoChkBox;
		
		@FindBy(xpath="//input[@id='chkRMANumberCantBeUsed']")
		private static WebElement  RMANumberCantBeUsedChkBox;
		
		@FindBy(xpath="//input[@id='PrefixVoucherNo']")
		private static WebElement  PrefixVoucherNoChkBox;



		
		@FindBy(xpath="//*[@id='txtUsername']")
		private static WebElement username;

		@FindBy(id="txtPassword")
		private static WebElement password;

		@FindBy(id="btnSignin")
		private static WebElement signIn;

	    @FindBy(id="ddlCompany")
	    private static WebElement companyDropDownList;

		@FindBy(xpath="//span[@class='hidden-xs']")
		private static WebElement userNameDisplay;

		@FindBy(xpath="//*[@id='companyLogo']")
		private static WebElement companyLogo;

		@FindBy(xpath="//*[@id='ulCompanyDetails_HomePage']/li[1]")
		private static WebElement companyName;

	    @FindBy(xpath="//*[@id='userprofile']/li/span[2]")
		private static WebElement logoutOption;
	    
	    
	    
	    @FindBy (xpath="//*[@id='RMA_Table_body']/tr[1]/td[2]")
		private static WebElement stockTransferRMA1stRow1stColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[2]/td[2]")
		private static WebElement stockTransferRMA2ndRow1stColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[3]/td[2]")
		private static WebElement stockTransferRMA3rdRow1stColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[4]/td[2]")
		private static WebElement stockTransferRMA4thRow1stColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[5]/td[2]")
		private static WebElement stockTransferRMA5thRow1stColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[6]/td[2]")
		private static WebElement stockTransferRMA6thRow1stColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[7]/td[2]")
		private static WebElement stockTransferRMA7thRow1stColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[8]/td[2]")
		private static WebElement stockTransferRMA8thRow1stColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[9]/td[2]")
		private static WebElement stockTransferRMA9thRow1stColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[10]/td[2]")
		private static WebElement stockTransferRMA10thRow1stColumn;
		

		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[1]/td[3]")
		private static WebElement stockTransferRMA1stRow2ndColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[2]/td[3]")
		private static WebElement stockTransferRMA2ndRow2ndColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[1]/td[4]")
		private static WebElement stockTransferRMA1stRow3rdColumn;
		
		@FindBy (xpath="//*[@id='RMA_Table_body']/tr[2]/td[4]")
		private static WebElement stockTransferRMA2ndRow3rdColumn;
		

		
	
        @FindBy(xpath="//input[@id='donotshow']")
        private static WebElement DontShowChkBox;
        
        @FindBy(xpath="//*[@id='2053']")
        private static WebElement salesInvoiceNvoucher;
        
        @FindBy(xpath="//a[@id='137']//span[contains(text(),'Transactions')]")
		private static WebElement  inventoryTransactionsMenu; 

		@FindBy(xpath="//a[@id='2033']//span[contains(text(),'Stocks')]")
		private static WebElement  inventoryTransactionsStocksMenu; 
        
			
			
		@FindBy(xpath="//tr[@id='id_header_2_day_grid']")
		private static WebElement calDates;
		
		
		@FindBy(xpath="//select[@id='id_header_2_month']")
		private static WebElement monthDropDwn;
		
		@FindBy(xpath="//select[@id='id_header_2_year']")
		private static WebElement yearDropDwn;
		
		
		@FindBy(xpath="//tr[@id='id_header_2_day_grid']")
		private static WebElement salesInvoiceCalenderDates;
		
		
		@FindBy(xpath="//select[@id='id_header_2_month']")
		private static WebElement salesInvoiceCalenderMonthDropdwn;
		
		@FindBy(xpath="//select[@id='id_header_2_year']")
		private static WebElement salesInvoiceCalenderYearDropdwn;
			
		
		@FindBy(xpath="//input[@id='id_header_6']")
		private static WebElement  voucherHeaderDueDate;
		
		@FindBy(xpath="//input[@id='id_header_10']")
		private static WebElement  voucherHeaderCurrency;
		
		@FindBy(xpath="//input[@id='id_header_11']")
		private static WebElement  voucherHeaderExchangeRate;
		
		@FindBy(xpath="//input[@id='id_header_145']")
		private static WebElement  voucherHeaderLocalExchangeRate;

		
		// Batch Popup Elements
		
		@FindBy(xpath="//label[@id='lblitem']")
		private static WebElement batchItemName;
		
		@FindBy(xpath="//label[@id='lblTotalQty']")
		private static WebElement batchTotalQtyAmt;
		
		@FindBy(xpath="//label[@id='lblAdjustQty']")
		private static WebElement batchAdjustQtyAmt;
		
		
		@FindBy(xpath="//label[@id='lblBalnceQty']")
		private static WebElement batchBalanceAmt;
		
		@FindBy(xpath="//div[contains(@class,'col-xs-12 col-sm-12 col-md-12 col-lg-12 P_ingBottom')]//div[2]//input[1]")
		private static WebElement batchExipiringInRadioBtn;
		             
		@FindBy(xpath="//section[@id='page_Content']//div[@class='row']//div//div[3]//input[1]")
		private static WebElement batchExipiringAfetrRadioBtn;
		
		@FindBy(xpath="//input[@id='txtWithin']")
		private static WebElement batchWithInTxt;
		
		@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_control_heading_6']")
		private static WebElement batchTableHeaderRateColumn;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-1']")
		private static WebElement batchTable1stRow1stCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-2']")
		private static WebElement batchTable1stRow2ndCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-5']")
		private static WebElement batchTable1stRow3rdCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-6']")
		private static WebElement batchTable1stRow4thCol;
		               
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-8']")
		private static WebElement batchTable1stRow5thCol;
		
		@FindBy(xpath="//input[@id='MRPBatch_AdjBatchQty']")
		private static WebElement enter_BatchTableQtyAdjusted;
		
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-13']")
		private static WebElement batchTable1stRow6thCol;
		
		
		@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_2-1']")
		private static WebElement batchTable2ndRow1stCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-2']")
		private static WebElement batchTable2ndRow2ndCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-5']")
		private static WebElement batchTable2ndRow3rdCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-6']")
		private static WebElement batchTable2ndRow4thCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-7']")
		private static WebElement batchTable2ndRow5thCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_2-13']")
		private static WebElement batchTable2ndRow6thCol;
		
		
		@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_3-1']")
		private static WebElement batchTable3rdRow1stCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-2']")
		private static WebElement batchTable3rdRow2ndCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-5']")
		private static WebElement batchTable3rdRow3rdCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-6']")
		private static WebElement batchTable3rdRow4thCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-7']")
		private static WebElement batchTable3rdRow5thCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_3-13']")
		private static WebElement batchTable3rdRow6thCol;
		
		
		
		@FindBy(xpath="//*[@id='Id_MRPBatch_Grid_col_4-1']")
		private static WebElement batchTable4thRow1stCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-2']")
		private static WebElement batchTable4thRow2ndCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-5']")
		private static WebElement batchTable4thRow3rdCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-6']")
		private static WebElement batchTable4thRow4thCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-7']")
		private static WebElement batchTable4thRow5thCol;
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_4-13']")
		private static WebElement batchTable4thRow6thCol;
		
		@FindBy(xpath="//*[@id='MRPBatch_AdjBatchQty']")
		private static WebElement batchTableEnterQtyAdjusted;
		
		
		/*@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr")
		private static List<WebElement> batchPopupTable;*/
		
		@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']")
		private static WebElement batchPopupTable;
		
		@FindBy(xpath="//i[@class='icon-refresh icon-font7']")
		private static WebElement batchRefreshBtn;
		
		@FindBy(xpath="//input[@id='Batch_Search']")
		private static WebElement batchSearchTxt;
		
		@FindBy(xpath="//input[@class='Fcheckbox']")
		private static WebElement batchShowAllAvalibleBatches;
		
		@FindBy(xpath="//label[contains(text(),'Customization')]")
		private static WebElement batchCustomizationIcon;
		
		/*@FindBy(xpath="//label[contains(text(),'Pick On FIFO')]")
		private static WebElement batchPickOnFIFOIcon;*/
		
		@FindBy(xpath="//div[@class='btnhighlight theme_button_color P_LeftRight10'][2]")
		private static WebElement batchPickOnFIFOIcon;
		
		@FindBy(xpath="//label[@id='div_Ok']")
		private static WebElement batchOkIcon;

		@FindBy(xpath="//div[@class='col-xs-12 col-sm-12 col-md-12 col-lg-12']//div[6]//label[1]")
		private static WebElement batchTotalAdjustedQty;
		
		@FindBy(xpath="//*[@id='MBatch_Content']/div[3]/div/div[3]/div[4]/label")
		private static WebElement batchCancelIcon;
		
		@FindBy(xpath="//*[@id='MBatch_Content']/div[1]/div[2]/span/i")
		private static WebElement batchCloseIcon;
		
		@FindBy(xpath="//*[@id='MBatch_Content']/div[2]/div/div[5]/div/div[3]")
		private static WebElement batchTotalQuantity;
		
		
		
		@FindBy(xpath="//span[@id='btnPick']")
		private static WebElement pickBtn;
		
		@FindBy(xpath="//input[@id='txtNewReference']")
		private static WebElement newReferenceTxt;
		
		@FindBy(xpath="//span[@id='btnOk']")
		private static WebElement Bill_OkBtn;
		
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[1]")
		private static WebElement iq_stockTransaction1stRow1stColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[2]")
		private static WebElement iq_stockTransaction1stRow2ndColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[3]")
		private static WebElement iq_stockTransaction1stRow3rdColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[4]")
		private static WebElement iq_stockTransaction1stRow4thColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[5]")
		private static WebElement iq_stockTransaction1stRow5thColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[1]/td[6]")
		private static WebElement iq_stockTransaction1stRow6thColumn;
		
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[1]")
		private static WebElement iq_stockTransaction2ndRow1stColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[2]")
		private static WebElement iq_stockTransaction2ndRow2ndColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[3]")
		private static WebElement iq_stockTransaction2ndRow3rdColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[4]")
		private static WebElement iq_stockTransaction2ndRow4thColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[5]")
		private static WebElement iq_stockTransaction2ndRow5thColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[2]/td[6]")
		private static WebElement iq_stockTransaction2ndRow6thColumn;
		
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[1]")
		private static WebElement iq_stockTransaction3rdRow1stColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[2]")
		private static WebElement iq_stockTransaction3rdRow2ndColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[3]")
		private static WebElement iq_stockTransaction3rdRow3rdColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[4]")
		private static WebElement iq_stockTransaction3rdRow4thColumn;
		
		@FindBy (xpath="//*[@id='salesTable']/tbody/tr[3]/td[5]")
		private static WebElement iq_stockTransaction3rdRow5thColumn;
		
		@FindBy (xpath="//tr[@id='id_ending_date__day_today']//span[@class='theme_color-inverse'][contains(text(),'Today')]")
		private static WebElement sl_EndDateCalender_TodayBtn;
		
		

		@FindBy (xpath="//*[@id='id_ending_date__month']")
		private static WebElement endDateCalMonthDrpdwn;
		
		@FindBy (xpath="//*[@id='id_ending_date__year']")
		private static WebElement endDateCalYearDrpdwn;
		
		@FindBy (xpath="//*[@id='id_ending_date__day_grid']/td/table/tbody")
		private static WebElement endDateCalDates;
		
		
		@FindBy (xpath="//*[@id='id_starting_date__month']")
		private static WebElement startDateCalMonthDrpdwn;
		
		@FindBy (xpath="//*[@id='id_starting_date__year']")
		private static WebElement startDateCalYearDrpdwn;
		
		@FindBy (xpath="//*[@id='id_starting_date__day_grid']/td/table/tbody")
		private static WebElement startDateCalDates;
		
		
		
		/*@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr")
		private static List<WebElement> reportsBodyGridRowsCount;*/

		
		@FindBy (xpath="//*[@id='tblBodyTransRender']/tr[1]/td[11]")
		private static WebElement grid_1stRowSuspendStatus;
		
		@FindBy (xpath="//*[@id='tblBodyTransRender']/tr[2]/td[11]")
		private static WebElement grid_2ndRowSuspendStatus;
		
		
		@FindBy (xpath="//*[@id='id_transaction_entry_detail_table_control_heading_1']/div[1]")
		private static WebElement stockTransferWarehouse2TableHeader;
		
		
		@FindBy (xpath="//input[@id='id_header_86']")
		private static WebElement stockTransferWarehouse1;
		
		/*@FindBy (xpath="//*[@id='tblBodyReportRender']/tr")
		private static List<WebElement> reports_TableBody;*/
		
		
		
		@FindBy(xpath="//input[@id='chkEnableBatchNumbers']")
		private static WebElement  EnableBatchesNoChkBox;
		
		@FindBy(xpath="//input[@id='chkAllowNegativeQuantity']")
		private static WebElement  AllowNegativeBatchesQtyChkBox;
		
		@FindBy(xpath="//input[@id='chkDontAcceptDupDoc']")
		private static WebElement  DontAcceptDuplicateBatchesChkBox;
		
		@FindBy(xpath="//input[@id='chkExpiryDatesBatches']")
		private static WebElement  ExpiryDatesOfBatchesChkBox;
		
		@FindBy(xpath="//input[@id='chkExpiryDatesOptional']")
		private static WebElement  ExpiryDateOptionalChkBox;
		
		@FindBy(xpath="//input[@id='chkIgnoreDayInExpiry']")
		private static WebElement  IgnoringDayInExpiryChkBox;
		
		@FindBy(xpath="//input[@id='chkCalculateExpiryDateFromItem']")
		private static WebElement  CalculateExpiryDateFromItemChkBox;
		
		@FindBy(xpath="//input[@id='chkCantSellBatchesNxt']")
		private static WebElement  CantSellBatchesNxtChkBox;
		
		@FindBy(xpath="//input[@id='chkDontClubBatchesMfDt']")
		private static WebElement  DontClubBatchesMfDtChkBox;
		
		@FindBy(xpath="//input[@id='chkSortBatchesExpDate']")
		private static WebElement  SortBatchesExpDateChkBox;
		
		@FindBy(xpath="//input[@id='chkInputBatchMrp']")
		private static WebElement  InputBatchMrpChkBox;
		
		@FindBy(xpath="//input[@id='chkLoadAllDtlsBatch']")
		private static WebElement  LoadAllDtlsBatchChkBox;
		
		@FindBy(xpath="//input[@id='chkLoadScrnFldDtlsBatch']")
		private static WebElement  LoadScreenDtlsBatchChkBox;
		
		@FindBy(xpath="//input[@id='chkLoadLayoutFldDtlsBatch']")
		private static WebElement  LoadLayoutDtlsBatchChkBox;
		
		@FindBy(xpath="//input[@id='chkManufacturingDateByBaches']")
		private static WebElement  ManufacturingDateByBatchesChkBox;
		
		@FindBy(xpath="//input[@id='chkSuggestNextBatchNoDoc']")
		private static WebElement  SuggestNextBatchNoDocChkBox;
		
		@FindBy(xpath="//input[@id='chkConsolidateBatchesByBatchNo']")
		private static WebElement  ConsolidateBatchesByBatchNoChkBox;
		
		@FindBy(xpath="//input[@id='chkHideRatesOption']")
		private static WebElement  HideRatesOptionChkBox;
		
		@FindBy(xpath="//input[@id='chkDonotshowbatchesconsumedinsuspendedandpendingdocuments']")
		private static WebElement  donotshowbatchesconsumedinsuspendedandpendingdocumentsChkBox;
		
		@FindBy(xpath="//input[@id='chkDonotconverttouppercase']")
		private static WebElement  doNotConvertToUpperCaseChkBox;
		
		
		
		@FindBy (xpath="//input[@id='idEraseTransaction']")
		private static WebElement eraseTranscationsRadio;
		
		@FindBy (xpath="//span[contains(text(),'Ok')]")
		private static WebElement eraseAllOkBtn;
		
		@FindBy (xpath="//ul[@class='nav navbar-nav navbar-right']//i[@class='icon-font6 icon-close']")
		private static WebElement eraseAllCancelBtn;
		
		
		
		@FindBy(xpath="//input[@id='txtValue1']")
		private static WebElement  InputBatch_Value1Txt;
		
		@FindBy(xpath="//input[@id='txtValue2']")
		private static WebElement  InputBatch_Value2Txt;
		
		@FindBy(xpath="//input[@id='txtNoofbatch']")
		private static WebElement  CantSellBatches_Txt;
		
		@FindBy(xpath="//select[@id='cmbBatchExpire']")
		private static WebElement  CantSellBatches_Dropdown;
		
		
		@FindBy(xpath="//td[@id='Id_MRPBatch_Grid_col_1-4']")
        private static WebElement batchTableManufactureDate;
		
		
		@FindBy(xpath="//*[@id='iExpiryDays']")
        private static WebElement itemCreationSettingsTabExpiryDaysTxt;
		
		
		@FindBy(xpath="//span[contains(text(),'Edit Screen')]")
	   	private static WebElement  editScreenTab; 
		
		@FindBy(xpath="//button[@id='btnEditScreenNext']")
	   	private static WebElement  editScreenTabNextBtn; 
		
		@FindBy(xpath="//span[contains(text(),'Edit Layout')]")
		private static WebElement editLayoutTab;
		
		@FindBy(xpath="//ul[@id='editLayout_tabs']/li[2]/a[contains(text(),'Body')]")
		private static WebElement editLayoutBodyTab;
		
		
		
		@FindBy(xpath="//*[@id='cmbBehaviour']")
		private static WebElement editScreenAddFieldsBehaviourDropdown;
		
		@FindBy(xpath="//input[@id='id_footer_134217750']")
		private static WebElement pvVoucherFooterDiscountTxt;
		
		
		@FindBy(xpath="//div[@id='idGlobalError']")
		private static WebElement  globalError; 
		
		
		
		@FindBy (xpath="//input[@id='id_footer_134217749']")
        private static WebElement pvFooterFD;
    	
		
		//DataManagement menu
    	@FindBy (xpath="//*[@id='25']/span")
        private static WebElement dataMangementMenu;
    	
		@FindBy (xpath="//*[@id='26']/span")
		private static WebElement backup;
			
		@FindBy (xpath="//*[@id='27']/span")
		private static WebElement restore;
		
		@FindBy (xpath="//*[@id='111']/span")
		private static WebElement reindex;
		
		@FindBy (xpath="//*[@id='115']/span")
		private static WebElement eraseAll;
		
		@FindBy (xpath="//*[@id='216']/span")
		private static WebElement lockAndUnlock;
		
		
		
		@FindBy (xpath="//button[@class='btn Fbutton']")
    	private static WebElement folderpathExpandBtn;
    	
    	@FindBy (xpath="//div[@id='RestoreControls']//div[1]//div[1]")
    	private static WebElement restoreCompanyBtn;
    	
    	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Yes')]")
    	private static WebElement overRideYesBtn;
    	
    	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'No')]")
    	private static WebElement overRideNoBtn;
    	
    	@FindBy (xpath="//button[@class='Fbutton'][contains(text(),'Cancel')]")
    	private static WebElement overRideCancelBtn;
    	
    	
    	
    	@FindBy(xpath="//tbody[@id='id_header_268435460_table_body']/tr/td[2]")
		private static List<WebElement> warehouseHeaderComboList;
		
		@FindBy(xpath="//tbody[@id='id_body_23_table_body']/tr/td[2]")
		private static List<WebElement> itemComboList;
    	
    	
		
		@FindBy(xpath="//tbody[@id='productQuery_table_body']/tr/td[2]")
		private static List<WebElement> iqItemComboList;
		
		
		
		@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
		private static List<WebElement> customerAccountComboList;
		
		@FindBy(xpath="//tbody[@id='id_header_10_table_body']/tr/td[2]")
		private static List<WebElement> currencyComboList;
		
		@FindBy(xpath="//tbody[@id='id_header_268435459_table_body']/tr/td[2]")
		private static List<WebElement> departmentComboList;
		
		@FindBy(xpath="//tbody[@id='id_body_536870916_table_body']/tr/td[2]")
		private static List<WebElement> warehouseBodyComboList;
		
		@FindBy(xpath="//tbody[@id='id_header_86_table_body']/tr/td[2]")
		private static List<WebElement> st_warehouse1HeaderComboList;
		
		@FindBy(xpath="//tbody[@id='id_body_87_table_body']/tr/td[2]")
		private static List<WebElement> st_warehouse2BodyComboList;
		
		
		
		@FindBy(xpath="//input[@id='id_body_12']")
		private static WebElement  enter_SalesAccount;
		
		@FindBy(xpath="//tbody[@id='id_body_12_table_body']/tr/td[2]")
		private static List<WebElement>  salesAccountBodyComboList;
		
		
		
		@FindBy(xpath="//input[@id='id_body_16777328']")
		private static WebElement  enter_TaxCode;
		
		
		
		@FindBy(xpath="//input[@id='id_header_268435470']")
		private static WebElement  salesInvoiceVATPlaceOFSupply;
		
		
		@FindBy(xpath="//*[@id='id_body_33554511']")
		private static WebElement enter_AQ;
		
		@FindBy(xpath="//*[@id='id_body_33554512']")
		private static WebElement enter_FQ;
		
		@FindBy(xpath="//*[@id='id_body_33554513']")
		private static WebElement enter_RD;
		
		
		
		@FindBy(xpath="//a[@id='2060']/span")
		private static WebElement  salesInvoiceVATVoucher;
		
		
		
		@FindBy(xpath="//input[@id='id_body_33554503']")
		private static WebElement enter_Discount;
		
		@FindBy(xpath="//input[@id='id_body_33554490']")
		private static WebElement enter_PVDiscount;
		
		@FindBy(xpath="//input[@id='id_body_33554521']")
		private static WebElement enter_VAT;
		
		@FindBy(xpath="//input[@id='id_body_33554522']")
		private static WebElement enter_Taxable;
		
		@FindBy(xpath="//input[@id='id_body_33554540']")
		private static WebElement enter_PVLoadScreenIntoIssue;
		
		@FindBy(xpath="//input[@id='id_body_33554542']")
		private static WebElement enter_PV1LoadScreenIntoIssue;
		
		@FindBy(xpath="//input[@id='id_body_16777353']")
		private static WebElement enter_PVLoadLayoutIntoIssue;
		
		@FindBy(xpath="//input[@id='id_body_16777355']")
		private static WebElement enter_PV1LoadLayoutIntoIssue;
		
		@FindBy(xpath="//input[@id='id_body_536870916']")
	    private static WebElement enter_WarehouseTxt;
		
		@FindBy(xpath="//*[@id='id_body_16777296']")
	    private static WebElement enter_RemarksTxt;
		
		@FindBy(xpath="//input[@id='id_body_16777354']")
	    private static WebElement enter_SalesInvoiceLoadLayoutIntoIssue;
		
		@FindBy(xpath="//input[@id='id_body_16777356']")
	    private static WebElement enter_SalesInvoice1LoadLayoutIntoIssue;
		
		
			
	    @FindBy(xpath="//*[@id='id_body_536870916_table_body']/tr")
	    private static List<WebElement> pvvGridWarehouseList;
		
	    @FindBy(xpath="//*[@id='id_body_23_table_body']/tr")
	    private static List<WebElement> pvvGridItemList;
	    
	    
	    
	    @FindBy(xpath="//input[@id='id_body_33554486']")
		private static WebElement enter_PvTaxable;
		
		@FindBy(xpath="//tbody[@id='id_body_16777307_table_body']/tr/td")
		private static List<WebElement> pvvGridTaxCodeList;
		
		@FindBy(xpath="//input[@id='id_body_16777323']")
		private static WebElement enter_PvTaxCode;
		
		
		@FindBy(xpath="//a[@id='2057']//span[contains(text(),'Purchases Voucher VAT')]")
		private static WebElement  purchaseVouchersVat;
		
		
		@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
		private static List<WebElement> purchaseAccountComboList;
		
		@FindBy(xpath="//tbody[@id='id_header_3_table_body']/tr/td[2]")
		private static List<WebElement> salesAccountHeaderComboList;
		
		
		@FindBy(xpath="//tbody[@id='id_header_4_table_body']/tr/td[2]")
		private static List<WebElement> vendorAccountComboList;
		
		
		@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr/td[2]")
		private static List<WebElement> batchPopupBatchNoList;
		
		@FindBy(xpath="//tbody[@id='Id_MRPBatch_Grid_body']/tr/td[1]")
		private static List<WebElement> batchPopupRowNosList;
		
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_1-1']/input")
		private static WebElement workFlowChkBox1;
		
		@FindBy(xpath="//td[@id='id_transaction_entry_detail_workflow_col_2-1']/input")
		private static WebElement workFlowChkBox2;
		
		@FindBy(xpath="//span[@id='id_transaction_entry_workflow_togglebutton']")
		private static WebElement workFlowExpandBtn;
		
		@FindBy(xpath="//input[@id='id_transaction_entry_detail_workflow_control_heading_ctrl_1']")
		private static WebElement  workFlowHeaderChkBoxCL;
		
		@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_body']/tr/td[2]/input")
		private static List<WebElement> workFlowChkBoxList;
		
		@FindBy (xpath="//tbody[@id='id_transaction_entry_detail_workflow_body']/tr/td[7]")
		private static List<WebElement> workFlowVoucherNosList;
		
		@FindBy(xpath="//span[@class='icon-ok icon-font7']")
		private static WebElement  workFlowOkBtnCL;
		
		
		
		@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[2]/input")
		private static List<WebElement> grid_CheckBoxList;
		
		@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[5]")
		private static List<WebElement> grid_VoucherNoList;
		
		@FindBy (xpath="//tbody[@id='tblBodyTransRender']/tr/td[12]")
		private static List<WebElement> grid_SuspendStatusList;
		
		
		
		@FindBy(xpath="//div[@id='ShowLoginErrId']/div/div/div[2]")
		private static WebElement loginWarningPopup;
		
		@FindBy(xpath="//div[@id='ShowLoginErrId']/div/div/div[3]/button")
		private static WebElement loginWarningPopupOkBtn;
		
		
		
		@FindBy (xpath="//table[@id='IPtable']/tbody/tr")
		private static WebElement endIpValueR2C2;
		
		
		/*@FindBy (xpath="//table[@id='tagWiseData']/tbody/tr")
		private static List<WebElement> IQ_WHTableRowsCount;*/
		
		@FindBy (xpath="//*[@id='tagWiseData']/tbody")
		private static WebElement IQ_WHTable;
		
		
		
		@FindBy (xpath="//tr[@id='Id_MRPBatch_Grid_row_heading']/th/div[1]")
		private static List<WebElement> batchPopupHeaderList;
		
		@FindBy (xpath="//tr[@id='id_transaction_entry_detail_table_row_heading']/th/div[1]")
		private static List<WebElement> voucherEntryHeaderList;
		
		
		
		
		// Sales Table
		
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[1]")
					private static WebElement sal1strow_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[2]")
					private static WebElement sal1strow_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[3]")
					private static WebElement sal1strow_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[4]")
					private static WebElement sal1strow_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[5]")
					private static WebElement sal1strow_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[6]")
					private static WebElement sal1strow_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[7]")
					private static WebElement sal1strow_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[8]")
					private static WebElement sal1strow_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[9]")
					private static WebElement sal1strow_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[1]/td[10]")
					private static WebElement sal1strow_10thColumn;
					
					// 2nd
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[1]")
					private static WebElement sal2ndrow_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[2]")
					private static WebElement sal2ndrow_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[3]")
					private static WebElement sal2ndrow_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[4]")
					private static WebElement sal2ndrow_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[5]")
					private static WebElement sal2ndrow_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[6]")
					private static WebElement sal2ndrow_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[7]")
					private static WebElement sal2ndrow_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[8]")
					private static WebElement sal2ndrow_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[9]")
					private static WebElement sal2ndrow_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[2]/td[10]")
					private static WebElement sal2ndrow_10thColumn;
					
					// 3rd
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[1]")
					private static WebElement sal3rdrow_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[2]")
					private static WebElement sal3rdrow_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[3]")
					private static WebElement sal3rdrow_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[4]")
					private static WebElement sal3rdrow_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[5]")
					private static WebElement sal3rdrow_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[6]")
					private static WebElement sal3rdrow_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[7]")
					private static WebElement sal3rdrow_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[8]")
					private static WebElement sal3rdrow_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[9]")
					private static WebElement sal3rdrow_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[3]/td[10]")
					private static WebElement sal3rdrow_10thColumn;
					
					// 4th
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[1]")
					private static WebElement sal4throw_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[2]")
					private static WebElement sal4throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[3]")
					private static WebElement sal4throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[4]")
					private static WebElement sal4throw_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[5]")
					private static WebElement sal4throw_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[6]")
					private static WebElement sal4throw_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[7]")
					private static WebElement sal4throw_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[8]")
					private static WebElement sal4throw_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[9]")
					private static WebElement sal4throw_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[4]/td[10]")
					private static WebElement sal4throw_10thColumn;
					
					//5th
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[1]")
					private static WebElement sal5throw_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[2]")
					private static WebElement sal5throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[3]")
					private static WebElement sal5throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[4]")
					private static WebElement sal5throw_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[5]")
					private static WebElement sal5throw_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[6]")
					private static WebElement sal5throw_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[7]")
					private static WebElement sal5throw_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[8]")
					private static WebElement sal5throw_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[9]")
					private static WebElement sal5throw_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[5]/td[10]")
					private static WebElement sal5throw_10thColumn;
					
					//6th
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[1]")
					private static WebElement sal6throw_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[2]")
					private static WebElement sal6throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[3]")
					private static WebElement sal6throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[4]")
					private static WebElement sal6throw_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[5]")
					private static WebElement sal6throw_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[6]")
					private static WebElement sal6throw_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[7]")
					private static WebElement sal6throw_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[8]")
					private static WebElement sal6throw_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[9]")
					private static WebElement sal6throw_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[6]/td[10]")
					private static WebElement sal6throw_10thColumn;
					
					// 7th
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[1]")
					private static WebElement sal7throw_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[2]")
					private static WebElement sal7throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[3]")
					private static WebElement sal7throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[4]")
					private static WebElement sal7throw_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[5]")
					private static WebElement sal7throw_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[6]")
					private static WebElement sal7throw_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[7]")
					private static WebElement sal7throw_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[8]")
					private static WebElement sal7throw_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[9]")
					private static WebElement sal7throw_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[7]/td[10]")
					private static WebElement sal7throw_10thColumn;
				
					
					
					// 8th
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[1]")
					private static WebElement sal8throw_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[2]")
					private static WebElement sal8throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[3]")
					private static WebElement sal8throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[4]")
					private static WebElement sal8throw_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[5]")
					private static WebElement sal8throw_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[6]")
					private static WebElement sal8throw_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[7]")
					private static WebElement sal8throw_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[8]")
					private static WebElement sal8throw_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[9]")
					private static WebElement sal8throw_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[8]/td[10]")
					private static WebElement sal8throw_10thColumn;
				
					
					
					// 9th
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[1]")
					private static WebElement sal9throw_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[2]")
					private static WebElement sal9throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[3]")
					private static WebElement sal9throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[4]")
					private static WebElement sal9throw_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[5]")
					private static WebElement sal9throw_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[6]")
					private static WebElement sal9throw_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[7]")
					private static WebElement sal9throw_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[8]")
					private static WebElement sal9throw_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[9]")
					private static WebElement sal9throw_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[9]/td[10]")
					private static WebElement sal9throw_10thColumn;
				
					
					
					// 10th
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[1]")
					private static WebElement sal10throw_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[2]")
					private static WebElement sal10throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[3]")
					private static WebElement sal10throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[4]")
					private static WebElement sal10throw_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[5]")
					private static WebElement sal10throw_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[6]")
					private static WebElement sal10throw_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[7]")
					private static WebElement sal10throw_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[8]")
					private static WebElement sal10throw_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[9]")
					private static WebElement sal10throw_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[10]/td[10]")
					private static WebElement sal10throw_10thColumn;
				
					
					
					// 11th
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[1]")
					private static WebElement sal11throw_1stColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[2]")
					private static WebElement sal11throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[3]")
					private static WebElement sal11throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[4]")
					private static WebElement sal11throw_4thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[5]")
					private static WebElement sal11throw_5thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[6]")
					private static WebElement sal11throw_6thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[7]")
					private static WebElement sal11throw_7thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[8]")
					private static WebElement sal11throw_8thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[9]")
					private static WebElement sal11throw_9thColumn;
					
					@FindBy(xpath="//*[@id='salesTable']/tbody/tr[11]/td[10]")
					private static WebElement sal11throw_10thColumn;
				
					
					
				
					
					// 1st 
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[2]")
					private static WebElement sbr1strow_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[3]")
					private static WebElement sbr1strow_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[4]")
					private static WebElement sbr1strow_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[1]/td[5]")
					private static WebElement sbr1strow_5thColumn;
					
					// 2nd 
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[2]")
					private static WebElement sbr2ndrow_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[3]")
					private static WebElement sbr2ndrow_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[4]")
					private static WebElement sbr2ndrow_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[2]/td[5]")
					private static WebElement sbr2ndrow_5thColumn;
					
					//3rd
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[2]")
					private static WebElement sbr3rdrow_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[3]")
					private static WebElement sbr3rdrow_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[4]")
					private static WebElement sbr3rdrow_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[3]/td[5]")
					private static WebElement sbr3rdrow_5thColumn;
					
					// 4th
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[2]")
					private static WebElement sbr4throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[3]")
					private static WebElement sbr4throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[4]")
					private static WebElement sbr4throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[4]/td[5]")
					private static WebElement sbr4throw_5thColumn;
					
					
					
					// 5th
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[2]")
					private static WebElement sbr5throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[3]")
					private static WebElement sbr5throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[4]")
					private static WebElement sbr5throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[5]/td[5]")
					private static WebElement sbr5throw_5thColumn;
						
						
					// 6th
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[2]")
					private static WebElement sbr6throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[3]")
					private static WebElement sbr6throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[4]")
					private static WebElement sbr6throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[6]/td[5]")				
					private static WebElement sbr6throw_5thColumn;
						
					
					
					// 7th

					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[2]")
					private static WebElement sbr7throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[3]")
					private static WebElement sbr7throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[4]")
					private static WebElement sbr7throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[7]/td[5]")
					private static WebElement sbr7throw_5thColumn;
						
						
					// 8th
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[2]")
					private static WebElement sbr8throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[3]")
					private static WebElement sbr8throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[4]")
					private static WebElement sbr8throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[8]/td[5]")
					private static WebElement sbr8throw_5thColumn;
						
						
					
					// 9th
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[2]")
					private static WebElement sbr9throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[3]")
					private static WebElement sbr9throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[4]")
					private static WebElement sbr9throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[9]/td[5]")
					private static WebElement sbr9throw_5thColumn;
						
						
					// 10th
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[2]")
					private static WebElement sbr10throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[3]")
					private static WebElement sbr10throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[4]")
					private static WebElement sbr10throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[10]/td[5]")
					private static WebElement sbr10throw_5thColumn;
					
					
					// 11th
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[2]")
					private static WebElement sbr11throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[3]")
					private static WebElement sbr11throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[4]")
					private static WebElement sbr11throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[11]/td[5]")
					private static WebElement sbr11throw_5thColumn;
					
					
					
					// 12th
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[2]")
					private static WebElement sbr12throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[3]")
					private static WebElement sbr12throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[4]")
					private static WebElement sbr12throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[12]/td[5]")
					private static WebElement sbr12throw_5thColumn;
					
					
					
					// 13th
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[2]")
					private static WebElement sbr13throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[3]")
					private static WebElement sbr13throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[4]")
					private static WebElement sbr13throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[13]/td[5]")
					private static WebElement sbr13throw_5thColumn;
					
					
					// 14th
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[2]")
					private static WebElement sbr14throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[3]")
					private static WebElement sbr14throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[4]")
					private static WebElement sbr14throw_4thColumn;
					
					@FindBy(xpath="//*[@id='ratesWiseData']/tbody/tr[14]/td[5]")
					private static WebElement sbr14throw_5thColumn;
					
					
					// Item Query Elements
					
					@FindBy(xpath="//input[@id='productQuery']")
					private static WebElement iq_ItemTxt;
					
					@FindBy(xpath="//button[contains(text(),'GetStock')]")
					private static WebElement iq_getStockBtn;
					
					@FindBy(xpath="//button[contains(text(),'Customize')]")
					private static WebElement iq_customizeBtn;
					
					@FindBy(xpath="//span[@id='id_productquery_button_clear']")
					private static WebElement iq_clearBtn;
					
					@FindBy(xpath="//span[@id='id_productquery_button_close']")
					private static WebElement iq_closeBtn;
					
					@FindBy(xpath="//label[contains(text(),'Opening Stock Quantity:')]")
					private static WebElement iq_OpeningStockQtyLable;
					
					@FindBy(xpath="//label[contains(text(),'Pending purchases orders :')]")
					private static WebElement iq_PendingPurchaseOrdersLable;
					
					@FindBy(xpath="//label[contains(text(),'Current Stock :')]")
					private static WebElement iq_CurrentStockLable;
					
					@FindBy(xpath="//label[contains(text(),'Pending Sales Orders :')]")
					private static WebElement iq_PendingSalesOrdersLable;
					
					@FindBy(xpath="//label[contains(text(),'Avg. Stock Rate :')]")
					private static WebElement iq_AvgStockRateLable;
					
					@FindBy(xpath="//label[contains(text(),'Qty to be Ordered :')]")
					private static WebElement iq_QtytobeOrderedLable;
					
					@FindBy(xpath="//label[contains(text(),'Base Unit :')]")
					private static WebElement iq_BaseUnitLable;
					
					@FindBy(xpath="//label[contains(text(),'Value :')]")
					private static WebElement iq_ValueLable;
					
					@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Date')]")
					private static WebElement iq_PurDate;
					
					@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Voucher No')]")
					private static WebElement iq_PurVoucherNo;
					
					@FindBy(xpath="//th[contains(text(),'Vendor')]")
					private static WebElement iq_PurVendor;
					
					@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity')]")
					private static WebElement iq_PurQty;
					
					@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Unit')]")
					private static WebElement iq_PurUnit;
					
					@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Rate')]")
					private static WebElement iq_PurRate;
					
					@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Currency')]")
					private static WebElement iq_PurCurrency;
					
					@FindBy(xpath="//table[@id='purchaseTable']//th[contains(text(),'Quantity In Base')]")
					private static WebElement iq_PurQtyInBase;
					
					@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Date')]")
					private static WebElement iq_SaleDate;
					
					@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Voucher No')]")
					private static WebElement iq_SaleVoucherNo;
					
					@FindBy(xpath="//th[contains(text(),'Customer')]")
					private static WebElement iq_SaleCustomer;
					
					@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity')]")
					private static WebElement iq_SaleQty;
					
					@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Unit')]")
					private static WebElement iq_SaleUnit;
					
					@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Rate')]")
					private static WebElement iq_SaleRate;
					
					@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Currency')]")
					private static WebElement iq_SaleCurrency;
					
					@FindBy(xpath="//table[@id='salesTable']//th[contains(text(),'Quantity In Base')]")
					private static WebElement iq_SaleQtyInBase;
					
					
					@FindBy(xpath="//span[@id='openingStock']")
					private static WebElement iq_OpeningStocks;
					
					@FindBy(xpath="//span[@id='currentStock']")
					private static WebElement iq_CurrentStock;
					
					@FindBy(xpath="//span[@id='avgStockRate']")
					private static WebElement iq_AvgStockRate;
					
					@FindBy(xpath="//span[@id='value']")
					private static WebElement iq_Value;
					
					@FindBy(xpath="//span[@id='iBaseUnit']")
					private static WebElement iq_BaseUnit;
					
					@FindBy(xpath="//span[@id='purchaseOrdered']")
					private static WebElement iq_PendingPurchaseOrders;
					
					@FindBy(xpath="//span[@id='salesOrdered']")
					private static WebElement iq_PendingSalesOrders;
					
					@FindBy(xpath="//span[@id='quantityToBeOrdered']")
					private static WebElement iq_QtyToBeOrdered;
					
		
					// Purchase Table
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[1]")
					private static WebElement pur1strow_1stColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[2]")
					private static WebElement pur1strow_2ndColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[3]")
					private static WebElement pur1strow_3rdColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[4]")
					private static WebElement pur1strow_4thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[5]")
					private static WebElement pur1strow_5thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[6]")
					private static WebElement pur1strow_6thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[7]")
					private static WebElement pur1strow_7thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[8]")
					private static WebElement pur1strow_8thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[9]")
					private static WebElement pur1strow_9thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[1]/td[10]")
					private static WebElement pur1strow_10thColumn;
					
					
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[1]")
					private static WebElement pur2ndrow_1stColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[2]")
					private static WebElement pur2ndrow_2ndColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[3]")
					private static WebElement pur2ndrow_3rdColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[4]")
					private static WebElement pur2ndrow_4thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[5]")
					private static WebElement pur2ndrow_5thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[6]")
					private static WebElement pur2ndrow_6thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[7]")
					private static WebElement pur2ndrow_7thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[8]")
					private static WebElement pur2ndrow_8thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[9]")
					private static WebElement pur2ndrow_9thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[2]/td[10]")
					private static WebElement pur2ndrow_10thColumn;
					
					
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[1]")
					private static WebElement pur7thRow_1stColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[2]")
					private static WebElement pur3rdrow_2ndColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[3]")
					private static WebElement pur3rdrow_3rdColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[4]")
					private static WebElement pur3rdrow_4thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[5]")
					private static WebElement pur3rdrow_5thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[6]")
					private static WebElement pur3rdrow_6thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[7]")
					private static WebElement pur3rdrow_7thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[8]")
					private static WebElement pur3rdrow_8thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[9]")
					private static WebElement pur3rdrow_9thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[3]/td[10]")
					private static WebElement pur3rdrow_10thColumn;
					
					
					// 4TH
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[1]")
					private static WebElement pur4throw_1stColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[2]")
					private static WebElement pur4throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[3]")
					private static WebElement pur4throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[4]")
					private static WebElement pur4throw_4thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[5]")
					private static WebElement pur4throw_5thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[6]")
					private static WebElement pur4throw_6thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[7]")
					private static WebElement pur4throw_7thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[8]")
					private static WebElement pur4throw_8thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[9]")
					private static WebElement pur4throw_9thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[4]/td[10]")
					private static WebElement pur4throw_10thColumn;
					
					// 5TH
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[1]")
					private static WebElement pur5throw_1stColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[2]")
					private static WebElement pur5throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[3]")
					private static WebElement pur5throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[4]")
					private static WebElement pur5throw_4thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[5]")
					private static WebElement pur5throw_5thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[6]")
					private static WebElement pur5throw_6thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[7]")
					private static WebElement pur5throw_7thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[8]")
					private static WebElement pur5throw_8thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[9]")
					private static WebElement pur5throw_9thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[5]/td[10]")
					private static WebElement pur5throw_10thColumn;
					
					// 6TH
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[1]")
					private static WebElement pur6throw_1stColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[2]")
					private static WebElement pur6throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[3]")
					private static WebElement pur6throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[4]")
					private static WebElement pur6throw_4thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[5]")
					private static WebElement pur6throw_5thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[6]")
					private static WebElement pur6throw_6thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[7]")
					private static WebElement pur6throw_7thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[8]")
					private static WebElement pur6throw_8thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[9]")
					private static WebElement pur6throw_9thColumn;
					
					@FindBy(xpath="//*[@id='purchaseTable']/tbody/tr[6]/td[10]")
					private static WebElement pur6throw_10thColumn;
					
					
					
					// Warehouse Table
					
					@FindBy(xpath="//div[contains(text(),'Warehouse')]")
					private static WebElement BalancebyWareHouselable;
					
					@FindBy(xpath="//tr[@id='1']/td[2]")
					private static WebElement wh1strow_2ndColumn;
					
					@FindBy(xpath="//tr[@id='1']/td[3]")
					private static WebElement wh1strow_3rdColumn;
					
					@FindBy(xpath="//tr[@id='1']/td[4]")
					private static WebElement wh1strow_4thColumn;
					
					@FindBy(xpath="//tr[@id='1']/td[5]")
					private static WebElement wh1strow_5thColumn;
					
					@FindBy(xpath="//tr[@id='1']/td[6]")
					private static WebElement wh1strow_6thColumn;
					
					
					
					@FindBy(xpath="//*[@id='3']/td[2]")
					private static WebElement wh2ndrow_2ndColumn;
					
					@FindBy(xpath="//*[@id='3']/td[3]")
					private static WebElement wh2ndrow_3rdColumn;
					
					@FindBy(xpath="//*[@id='3']/td[4]")
					private static WebElement wh2ndrow_4thColumn;
					
					@FindBy(xpath="//*[@id='3']/td[5]")
					private static WebElement wh2ndrow_5thColumn;
					
					@FindBy(xpath="//*[@id='3']/td[6]")
					private static WebElement wh2ndrow_6thColumn;
					
					
					
					@FindBy(xpath="//*[@id='4']/td[2]")
					private static WebElement wh3rdrow_2ndColumn;
					
					@FindBy(xpath="//*[@id='4']/td[3]")
					private static WebElement wh3rdrow_3rdColumn;
					
					@FindBy(xpath="//*[@id='4']/td[4]")
					private static WebElement wh3rdrow_4thColumn;
					
					@FindBy(xpath="//*[@id='4']/td[5]")
					private static WebElement wh3rdrow_5thColumn;
					
					@FindBy(xpath="//*[@id='4']/td[6]")
					private static WebElement wh3rdrow_6thColumn;
					
					
					@FindBy(xpath="//*[@id='8']/td[2]")
					private static WebElement wh4throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='8']/td[3]")
					private static WebElement wh4throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='8']/td[4]")
					private static WebElement wh4throw_4thColumn;
					
					@FindBy(xpath="//*[@id='8']/td[5]")
					private static WebElement wh4throw_5thColumn;
					
					@FindBy(xpath="//*[@id='8']/td[6]")
					private static WebElement wh4throw_6thColumn;
					
					
					@FindBy(xpath="//*[@id='9']/td[2]")
					private static WebElement wh5throw_2ndColumn;
					
					@FindBy(xpath="//*[@id='9']/td[3]")
					private static WebElement wh5throw_3rdColumn;
					
					@FindBy(xpath="//*[@id='9']/td[4]")
					private static WebElement wh5throw_4thColumn;
					
					@FindBy(xpath="//*[@id='9']/td[5]")
					private static WebElement wh5throw_5thColumn;
					
					@FindBy(xpath="//*[@id='9']/td[6]")
					private static WebElement wh5throw_6thColumn;
					
					
					@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[2]")
					private static WebElement whStockTotal;
					
					@FindBy(xpath="//*[@id='tagWiseData']/tbody/tr[2]/td[4]")
					private static WebElement whValueTotal;
					
					@FindBy(xpath="//table[@id='tagWiseData']/tbody")
					private static WebElement itemQueryWHTable;
					
					
					@FindBy(xpath="//div[contains(text(),'Selling rates and Buying rates')]")
					private static WebElement sellingAndBuyingRateslable;
					
					@FindBy(xpath="//span[@id='ProdQuery_ShowSellandBuyRatesPopup']")
					private static WebElement sellingAndBuyingRatesExpandBtn;
		
					
					
					
					
					@FindBy(xpath="//tbody[@id='LandingGridBody']/tr")
					private static List<WebElement> stockLedgerHometableRowCount;
					
					
					 // Reports Table Row List  
				  	@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[1]/td")
					private static List<WebElement> reportsRow1List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[2]/td")
					private static List<WebElement> reportsRow2List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[3]/td")
					private static List<WebElement> reportsRow3List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[4]/td")
					private static List<WebElement> reportsRow4List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[5]/td")
					private static List<WebElement> reportsRow5List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[6]/td")
					private static List<WebElement> reportsRow6List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[7]/td")
					private static List<WebElement> reportsRow7List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[8]/td")
					private static List<WebElement> reportsRow8List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[9]/td")
					private static List<WebElement> reportsRow9List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[10]/td")
					private static List<WebElement> reportsRow10List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[11]/td")
					private static List<WebElement> reportsRow11List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[12]/td")
					private static List<WebElement> reportsRow12List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[13]/td")
					private static List<WebElement> reportsRow13List;
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']/tr[14]/td")
					private static List<WebElement> reportsRow14List;
					
					
					
					@FindBy(xpath="//tbody[@id='tblBodyReportRender']")
					private static WebElement reportsTable;
					
					
					@FindBy(xpath="//select[@id='RITCombobox__1']")
					private static WebElement stockMovementDropdown;
					
					@FindBy(xpath="//input[@id='RITCheckbox__3']")
					private static WebElement includeAllVoucherChkBox;
					
					
					@FindBy(xpath="//span[contains(text(),'Actual consumption report')]")
					private static WebElement  actualConsumptionReport;
					
					
					// With Customizing Warehouse
					
					@FindBy(xpath="//*[@id='CustomizeTransTree']/ul/li/span")
					private static WebElement  osr_customizeFieldsTransactionExpansion; 
					
					@FindBy(xpath="//*[@id='rd_customization_tree2']/span")
					private static WebElement  osr_customizeFieldsTransExtraFieldsExpansion; 
					
					@FindBy(xpath="//*[@id='rd_customization_tree2_30']/span/span")
					private static WebElement  osr_customizeFieldsTransExtraFieldsWarehouseExpansion; 
					
					@FindBy(xpath="//*[@id='rd_customization_tree2_30_0']")
					private static WebElement  osr_customizeFieldsTransExtraFieldsWarehouseName; 
					
					@FindBy(xpath="//li[@id='rd_customization_tree2_15']")
					private static WebElement  osr_customizeFieldsTransExtraFieldsNarration;
					
					@FindBy(xpath="//*[@id='id_rc_columnheadertable']/thead/tr/th")
					private static List<WebElement> osr_customizeHeaderList;
					
					@FindBy(xpath="//table[@id='tblRDRender']/thead/tr/th")
					private static List<WebElement> osr_reportHeaderList;
					
					
					@FindBy(xpath="//ul[@id='id_Item_main']/li/span")
					private static WebElement  osr_customizeFieldsItemExpansion; 
					
					@FindBy(xpath="//li[@id='id_Item_main_0']")
					private static WebElement  osr_customizeFieldsItemName; 
					
					
					@FindBy(xpath="//input[@id='HidethisColumn']")
					private static WebElement osr_customizeTabHideThisColumnChkBox;
					
					@FindBy(xpath="//input[@id='ScrollTexttonextLine']")
					private static WebElement osr_customizeTabScrollTextToNextLineChkBox;
					
					@FindBy(xpath="//input[@id='Printunderpreviouscolumn']")
					private static WebElement osr_customizeTabPrintUnderPreviousColumnChkBox;
					
					@FindBy(xpath="//input[@id='Mandatorycolumn']")
					private static WebElement osr_customizeTabMandatoryColumnChkBox;
					
					@FindBy(xpath="//*[@id='plnCustomizecolumn']/div/span[4]/a")
					private static WebElement osr_customizeTabRemoveColumnBtn;
					
					
					
					
					
					@FindBy(xpath="//*[@id='Save']/div[1]/span")
					private static WebElement  osr_customizeSaveBtn;
					
					@FindBy(xpath="//*[@id='Deleteayout']/div[2]")
					private static WebElement  osr_customizeDeleteLayoutBtn;
					
					@FindBy(xpath="//div[@id='btnCustomizeClose']")
					private static WebElement  osr_customizeCloseBtn;
					
//-------------------------------------------------------------***Methods Starts Here***----------------------------------------------------------		
		
		public static boolean checkRestoreOfCompany() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
		{
			LoginPage lp=new LoginPage(getDriver()); 
			
		    String unamelt="su";
		  
		    String pawslt="su";
		    
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restore));
			restore.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(folderpathExpandBtn));
			folderpathExpandBtn.click();
			
			Thread.sleep(3000);
		     
		     Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\optionsCompanyRestore.exe");
		     
		     Thread.sleep(3000);
		     
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreCompanyBtn));
		     restoreCompanyBtn.click();
		     
		     try
		     {
		    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(overRideYesBtn));
		 		 overRideYesBtn.click();
		 		 Thread.sleep(20000);
		     }
		     catch(Exception e)
		     {
		    	 System.err.println("NO OLDER COMPANY EXISTS");
		     }
		     
		     if(getIsAlertPresent())
		     {
		    	 getWaitForAlert();
		    	 
		    	 getAlert().accept();
		     }
			
		
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
		     userNameDisplay.click();
			
			
		     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		     logoutOption.click();
		     
		     

		     Thread.sleep(3000);
		     
		     lp.enterUserName(unamelt);
		     
		     lp.enterPassword(pawslt);
		     
		     Thread.sleep(2000);
		     
		     /*Select s = new Select(companyDropDownList);
		     int size=s.getOptions().size();
		     
		     System.err.println("SIZE : "+size);
		     
		     for(int i=0;i<size;i++)
		     {
		    	 String data;
		    	 
		    	 data=s.getOptions().get(i).getText();
		    	 
		    	 System.err.println("DATA : "+data);
		    	 
		    	 if(data.contains("Automation Options"))
		    	 {
		    		 
		    		 s.selectByVisibleText(data);
		    		 
		    		 break;
		    	 }
		     }
		     */
		     
		     
		     lp.clickOnSignInBtn();
		     
		     Thread.sleep(10000);
		     
		     
		     String actUserInfo1=userNameDisplay.getText();
				
			System.out.println("User Info  : "+actUserInfo1);
			
			System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
			companyLogo.click();
			
			String getCompanyTxt1=companyName.getText();
			String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
			System.out.println("company name  :  "+ getLoginCompanyName1);
			companyLogo.click();
			
			
			
			String expUserInfo1           ="SU";
			String expLoginCompanyName1   ="Automation Options ";
		     
		     
			
			System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
			System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);
			
			if(actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
			{
		
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
    	public static boolean checkLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
		{
    		Thread.sleep(3000);
    		
			LoginPage lp=new LoginPage(getDriver()); 
			
		    String unamelt="su";
		  
		    String pawslt="su";
		      
		    lp.enterUserName(unamelt);
		    
		    LoginPage.enterPassword(pawslt);
		    
		    lp.clickOnSignInBtn();
		    
		    //checkRefershPopOnlogin();
		    
		    //checkPopUpWindow();
		  
			Thread.sleep(8000);
			
			String actUserInfo=userNameDisplay.getText();
			
			System.out.println("User Info  : "+actUserInfo);
			
			System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
			companyLogo.click();
			
			String getCompanyTxt=companyName.getText();
			String getLoginCompanyName=getCompanyTxt.substring(0, 19);
			System.out.println("company name  :  "+ getLoginCompanyName);
			companyLogo.click();
			
			boolean actDashboard = labelDashboard.isDisplayed();
			
			
			String expUserInfo           ="SU";
			String expLoginCompanyName   ="Automation";
			boolean expDashboard         = true;
	
			if (actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) && actDashboard==expDashboard) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
    	
    	
    	
		
		/*public static void checkPopUpWindow() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			 Thread.sleep(5000);
		      
		      try 
		      {
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotShowCheckbox));
					doNotShowCheckbox.click();
					
					Thread.sleep(2000);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(closeBtnInDemoPopupScreen));
					closeBtnInDemoPopupScreen.click(); 
					
					System.err.println("POP UP DISPLAYED AND CLOSED SUCCESSFULLY");
					
				} 
		      catch (Exception e)
		      {
		      	System.err.println("NO POP UP DISPLAYED");
				}
		
		  	
		  	Thread.sleep(4000);
		}
		*/
		
		public static String checkValidationMessage(String ExpMessage) throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
		        try
		        {
		        		getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(errorMessage));
		                String actErrorMessage=errorMessage.getText();
		                String expErrorMessage=ExpMessage;
		                try
		                {
		                	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
			                errorMessageCloseBtn.click();
			                
			                System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
			                
			                return actErrorMessage;
		                }
		                catch(Exception ee)
		                {
		                	System.out.println("ValidationMessage  :  "+actErrorMessage +" Value Expected : "+expErrorMessage);
		                	
		                	return actErrorMessage;
		                }
		        }
		        catch(Exception e)
		        {
		                System.err.println("Error Message NOT Found or NOT Clickable");
		                System.err.println(e.getMessage());
		                
		                String Exception=e.getMessage();
		            
		                return Exception;
		                
		        }
		}
		
		
		
		
		
		public static boolean checkLoginAndRestoreOptionsCompanyAndLogin() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException 
    	{
    		LoginPage lp=new LoginPage(getDriver()); 
    		
    	    String unamelt="su";
    	  
    	    String pawslt="su";
    	      
    	    lp.enterUserName(unamelt);
    	    
    	    lp.enterPassword(pawslt);
    	    
    	    lp.clickOnSignInBtn();
    	    
    	    //checkRefershPopOnlogin();
    	    
    	    //checkPopUpWindow();
    	  
    		Thread.sleep(8000);
    		
    		String actUserInfo=userNameDisplay.getText();
    		
    		System.out.println("User Info  : "+actUserInfo);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt=companyName.getText();
    		String getLoginCompanyName=getCompanyTxt.substring(0, 19);
    		System.out.println("company name  :  "+ getLoginCompanyName);
    		companyLogo.click();
    		
    		
    		String expUserInfo           ="SU";
    		String expLoginCompanyName   ="Automation";
    		
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
    		homeMenu.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
    		dataMangementMenu.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restore));
    		restore.click();
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(folderpathExpandBtn));
    		folderpathExpandBtn.click();
    		
    		Thread.sleep(3000);
    	     
    	     Runtime.getRuntime().exec(getBaseDir()+"\\autoIt\\scripts\\optionsCompanyRestore.exe");
    	     
    	     Thread.sleep(3000);
    	     
    	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(restoreCompanyBtn));
    	     restoreCompanyBtn.click();
    	     
    	     try
    	     {
    	    	 getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(overRideYesBtn));
    	 		 overRideYesBtn.click();
    	 		 Thread.sleep(20000);
    	     }
    	     catch(Exception e)
    	     {
    	    	 System.err.println("NO OLDER COMPANY EXISTS");
    	     }
    	     
    	     Thread.sleep(3000);
    	     
    	     if(getIsAlertPresent())
    	     {
    	    	 getWaitForAlert();
    	    	 System.out.println(getAlert().getText());
    	    	 getAlert().accept();
    	     }
    	     
    	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
    	     userNameDisplay.click();
    		
    		
    	     getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
    	     logoutOption.click();

    	     Thread.sleep(3000);
    	     
    	     lp.enterUserName(unamelt);
    	     
    	     lp.enterPassword(pawslt);
    	     
    	     Thread.sleep(2000);
    	     
    	     Select s = new Select(companyDropDownList);
    	     int size=s.getOptions().size();
    	     
    	     System.err.println("SIZE : "+size);
    	     
    	     for(int i=0;i<size;i++)
    	     {
    	    	 String data;
    	    	 
    	    	 data=s.getOptions().get(i).getText();
    	    	 
    	    	 System.err.println("DATA : "+data);
    	    	 
    	    	 if(data.contains("Automation Options"))
    	    	 {
    	    		 
    	    		 s.selectByVisibleText(data);
    	    		 
    	    		 break;
    	    	 }
    	     }
    	     
    	     lp.clickOnSignInBtn();
    	     
    	     Thread.sleep(8000);
    	     
    	     String actUserInfo1=userNameDisplay.getText();
    			
    		System.out.println("User Info  : "+actUserInfo1);
    		
    		System.out.println("User Info Capture Text  :  "+userNameDisplay.getText());
    		
    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(companyLogo));
    		companyLogo.click();
    		
    		String getCompanyTxt1=companyName.getText();
    		String getLoginCompanyName1=getCompanyTxt1.substring(0, 19);
    		System.out.println("company name  :  "+ getLoginCompanyName1);
    		companyLogo.click();
    		
    		String expUserInfo1           ="SU";
    		String expLoginCompanyName1   ="Automation Options ";
    	     
    	     
    		System.out.println("UserInfo             : "+actUserInfo            +" Value Expected : "+expUserInfo);
    		System.out.println("LoginCompanyName     : "+getLoginCompanyName    +" Value Expected : "+expLoginCompanyName);
    		
    		System.out.println("UserInfo1             : "+actUserInfo1            +" Value Expected : "+expUserInfo1);
    		System.out.println("LoginCompanyName1     : "+getLoginCompanyName1    +" Value Expected : "+expLoginCompanyName1);
    		
    		if(actUserInfo.equalsIgnoreCase(expUserInfo) && getLoginCompanyName.contains(expLoginCompanyName) 
    				
    				&& actUserInfo1.equalsIgnoreCase(expUserInfo1) && getLoginCompanyName1.contains(expLoginCompanyName1))
    		{
    	
    			return true;
    		}
    		else
    		{
    			return false;
    		}
    	}
		
		
		
		
		public boolean checkSavingOpeningStockNewVoucher1WithWarehouseHyderabadAndQuantity20() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksNEWVoucher));
			openingStocksNEWVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
			warehouseTxt.click();
			warehouseTxt.sendKeys(Keys.SPACE);
            
			int warehouselist=warehouseHeaderComboList.size();
			
            for (int i = 0; i < warehouselist; i++) 
			{
				String warehouse=warehouseHeaderComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					warehouseHeaderComboList.get(i).click();
					warehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
             
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("20");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("8.5");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#OSV1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: " + presentDate);
			
			cal.add(Calendar.MONTH, 1); 
			
			String nextMonthDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: " + nextMonthDate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,nextMonthDate);
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********* Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
			
			
		
			
			
			
			
			
		public boolean checkVerifingDataOfSavedOpeningStocksNewVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
		
			String expMessage="Voucher loaded successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
			String actWarehouse=warehouseTxt.getAttribute("value");
			String expWarehouse="HYDERABAD";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actItem=select1stRow_1stColumn.getText();
			String expItem="BR COGS ITEM";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
			String actUnits=select1stRow_2ndColumn.getText();
			String expUnits="Dozs";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			String actQuantity=select1stRow_3rdColumn.getText();
			String expQuantity="20.00";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
			String actRate=select1stRow_4thColumn.getText();
			String expRate="8.50";
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_5thColumn));
			String actGross=select1stRow_5thColumn.getText();
			String expGross="170.00";
			

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			String actBatch=select1stRow_6thColumn.getText();
			String expBatch="Batch#OSV1";
			
			System.out.println("*********** Voucher No : "+actDocNo      +"  value expected  "+expDocNo);
			System.out.println("*********** Warehouse  : "+actWarehouse  +"  value expected  "+expWarehouse);
			System.out.println("*********** Item       : "+actItem       +"  value expected  "+expItem);
			System.out.println("*********** Units      : "+actUnits      +"  value expected  "+expUnits);
			System.out.println("*********** Quantity   : "+actQuantity   +"  value expected  "+expQuantity);
			System.out.println("*********** Rate       : "+actRate       +"  value expected  "+expRate);
			System.out.println("*********** Gross      : "+actGross      +"  value expected  "+expGross);
			
			if (actDocNo.equalsIgnoreCase(expDocNo) && actWarehouse.equalsIgnoreCase(expWarehouse) && actItem.equalsIgnoreCase(expItem) 
				 && actUnits.equalsIgnoreCase(expUnits) && actQuantity.equalsIgnoreCase(expQuantity) && actRate.equalsIgnoreCase(expRate)
				 && actGross.equalsIgnoreCase(expGross)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			
			
			
			
		// Sales Invoice                                                                                                                                     "						

		public boolean checkSavingSalesInvoiceVATVoucher1WithWarehouseHyderabadQuantity24() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			System.out.println("Customer Account List Size: "+customerAccountCount);
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				System.out.println(i+"  "+customerAccount);
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					
					customerAccountTxt.sendKeys(Keys.TAB);
					
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			System.out.println("Department List Size: "+departmentCount);
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				System.out.println(i+"  "+department);
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					
					departmentTxt.sendKeys(Keys.TAB);
					
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				System.out.println(i+"  "+warehouse);
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					
					pvWarehouseTxt.sendKeys(Keys.TAB);
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				System.out.println(i+"  "+item);
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					
					enter_ItemTxt.sendKeys(Keys.TAB);
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("12");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("12");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1.5");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="Batch#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("************* Batch No         : "+actBatchNo          +"  value expected  "+expBatchNo);
			System.out.println("************* Error Message    : "+actMessage          +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if (actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				return true;
				
			}
			else
			{
				return false;
			}
		}
		
			
			
			
			
			
			
		public boolean checkEditingSalesInvoiceVATVoucher1SavingWithQuantity48() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();

			String VoucherLoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("24");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("24");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="Batch#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********** Batch No       : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("********** Error Message  : "+actMessage +"  value expected  "+expMessage1+" : "+expMessage1);
			
			if (actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			

		
		
		
		
		
		public boolean checkEditingSalesInvoiceVATVoucher1SavingWithQuantity36() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();

			String VoucherLoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("18");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("18");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="Batch#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********** Batch No       : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("********** Error Message  : "+actMessage +"  value expected  "+expMessage1+" : "+expMessage1);
			
			if (actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
			
				
				
		public boolean checkDataInSavedSalesInvoiceVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();
			
			String actMessage=checkValidationMessage("Voucher loaded successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			String actDocNo=documentNumberTxt.getAttribute("value");
			String expDocNo="1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			String actCustomerAccount=customerAccountTxt.getAttribute("value");
			String expCustomerAccount="Customer A";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			String actDepartmet=departmentTxt.getAttribute("value");
			String expDepartmet="Dubai";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			String actWarehouse=select1stRow_1stColumn.getText();
			String expWarehouse="Hyderabad";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_2ndColumn));
			String actItem=select1stRow_2ndColumn.getText();
			String expItem="BR COGS ITEM";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			String actQuantity=select1stRow_11thColumn.getText();
			String expQuantity="36.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			String actRate=select1stRow_14thColumn.getText();
			String expRate="1.50";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_15thColumn));
			String actGross=select1stRow_15thColumn.getText();
			String expGross="54.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="Batch#OSV1";
			
			
			System.out.println("******** Voucher No       : "+actDocNo           +"  value expected  "+expDocNo);
			System.out.println("******** Customer Account : "+actCustomerAccount +"  value expected  "+expCustomerAccount);
			System.out.println("******** Department       : "+actDepartmet       +"  value expected  "+expDepartmet);
			System.out.println("******** Warehouse        : "+actWarehouse       +"  value expected  "+expWarehouse);
			System.out.println("******** Item             : "+actItem            +"  value expected  "+expItem);
			System.out.println("******** Quantity         : "+actQuantity        +"  value expected  "+expQuantity);
			System.out.println("******** Rate             : "+actRate            +"  value expected  "+expRate);
			System.out.println("******** Gross            : "+actGross           +"  value expected  "+expGross);
			System.out.println("******** Batch No         : "+actBatchNo         +"  value expected  "+expBatchNo);
			

			if(actDocNo.equalsIgnoreCase(expDocNo) && 
				actCustomerAccount.equalsIgnoreCase(expCustomerAccount) && actDepartmet.equalsIgnoreCase(expDepartmet) && actWarehouse.equalsIgnoreCase(expWarehouse) && 
				actItem.equalsIgnoreCase(expItem) && actQuantity.equalsIgnoreCase(expQuantity) && actRate.equalsIgnoreCase(expRate) && actGross.equalsIgnoreCase(expGross) &&
				actBatchNo.equalsIgnoreCase(expBatchNo)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
				
			
			
			
		// Deleting opening Stock Voucher from Voucher Home page and Voucher Entry page after Partial Quantity Consume in sales Invoice 						
		
		public boolean checkDeletingOpeningStockNewVoucher1InEntryPageAfterConsuming() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksNEWVoucher));
			openingStocksNEWVoucher.click();

			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();


			String VoucherLoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));		
			new_DeleteBtn.click();
			
			getWaitForAlert();
			
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Are you sure that you want to delete the Selected Voucher?";
			
			getAlert().accept();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			
			System.out.println("************ Alert Text    : "+actAlertTxt +"  value expected  "+expAlertTxt);
			System.out.println("************ Error Message : "+actMessage  +"  value expected  "+expMessage);
			
			if(actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
			
			
			
		public boolean checkOpeningStockNewDeleteVoucher1InHomePageAndCloseVoucherHomepage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			if (grid_ChkBox1.isSelected()==false) 
			{
				grid_ChkBox1.click();
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
			deleteBtn.click();
			
			getWaitForAlert();
			
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Are you sure that you want to delete the Selected Voucher?";
			
			getAlert().accept();

			String expMessage="VoucherNo - 1: Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			System.out.println("********* Error Message: "+actMessage+"  value expected  "+expMessage);
			
			if(actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
						
				return false;
			}
		}
		
			
			
			
			
				
		// Editing Opening Stock Quantity by Updating Quantity below the Consume Quantity (Sales Quantity as 3) 						

		public boolean checkEditingOpeningStockNewVoucher1SavingWithBelowConsumedQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksNEWVoucher));
			openingStocksNEWVoucher.click();

			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			select1stRow_3rdColumn.click();
			enter_Quantity.sendKeys("2");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

			
			
			
			
			
			
		// Editing Opening Stock Voucher by changing the Warehouse from HYD and SEC and then save						
		// Should Not allow to Update the Voucher From Hyderabad to Secunderabad after consuming the Items
		public boolean checkEditingOpeningStocksNewVoucher1AndChangingWarehouseFromHYDtoSEC() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();

			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
			warehouseTxt.click();
			warehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.SPACE);
			
			Thread.sleep(2000);
            
			int warehouselist=warehouseHeaderComboList.size();
			
			for (int i = 0; i < warehouselist; i++) 
			{
				String warehouse=warehouseHeaderComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD")) 
				{
					warehouseHeaderComboList.get(i).click();
					warehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
		
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********** Error Message: "+actMessage+"  value expected  "+expMessage);
			
			if(actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();

				String LoadingMessage1=checkValidationMessage("Voucher loaded successfully");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
				warehouseTxt.click();
				warehouseTxt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.SPACE);
				
				Thread.sleep(2000);
	            
				for (int i = 0; i < warehouselist; i++) 
				{
					String warehouse=warehouseHeaderComboList.get(i).getText();
					
					if (warehouse.equalsIgnoreCase("HYDERABAD")) 
					{
						warehouseHeaderComboList.get(i).click();
						warehouseTxt.sendKeys(Keys.TAB);
						break;
					}
				}
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
			
				String expMessage2="Voucher saved successfully";
				
				String actMessage2=checkValidationMessage(expMessage2);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
			
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
			
			
			
			
			
		// Editing Opening Stock Voucher by updating quantity to same as consumed quantity(Sales Invoice)						

		public boolean checkEditingOpeningStocksNewVoucher1AndSavingWithQuantitySameAsConsumedQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksNEWVoucher));
			openingStocksNEWVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();

			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			select1stRow_3rdColumn.click();
			enter_Quantity.sendKeys("3");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);

			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

			
			
			
			
			
			
			
		public boolean checkEditingOpeningStocksNewVoucher1SavingWithQuantity22() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
			previousBtn.click();

			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_3rdColumn));
			select1stRow_3rdColumn.click();
			enter_Quantity.sendKeys("22");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("****** Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
		
			
	
		// Saving Opening Stocks Voucher by selecting date as After Accounting Date						
		
		public boolean checkOpeningStocksNewVoucher2DateAsAfterAccountingDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksNEWVoucher));
			openingStocksNEWVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt_CalenderBtn));
			dateTxt_CalenderBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(calender_TodayBtn));
			calender_TodayBtn.click();
			
			String expMessage="Date cannot be more than Company's Accounting date.";
			
			String actMessage=checkValidationMessage(expMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			String actDate=dateTxt.getAttribute("value");
			String expDate="31/12/2019";
			
			System.out.println("********** Error Message           : "+actMessage +"  value expected  "+expMessage);
			System.out.println("********** Company Accounting Date : "+actDate    +"  value expected  "+expDate);
		
			if(actMessage.equalsIgnoreCase(expMessage) && actDate.equalsIgnoreCase(expDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}	
		}
				
				
			
			
			
			
			
			
		// New Inward Voucher with used Batch and verify current voucher Quantity getting added to Balance Batch Quantity 						

		public boolean checkSavingOpeningStocksNewVoucher2WithWarehouseHyderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(warehouseTxt));
			warehouseTxt.click();
			warehouseTxt.sendKeys(Keys.SPACE);
            
			int warehouselist=warehouseHeaderComboList.size();
			
			for (int i = 0; i < warehouselist; i++) 
			{
				String warehouse=warehouseHeaderComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					warehouseHeaderComboList.get(i).click();
					warehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("2");
			enter_Quantity.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("5.5");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#OSV2",Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: " + presentDate);
			
			cal.add(Calendar.MONTH, 1); 
			
			String nextMonthDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding :: " + nextMonthDate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			
			enter_Expirydate.sendKeys(Keys.HOME,nextMonthDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="2";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********** Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
			
			
			
		// Saving Sales Invoice Voucher 					

		public boolean checkSavingSalesInvoiceVATVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			System.out.println("Customer Account List Size: "+customerAccountCount);
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				System.out.println(i+"  "+customerAccount);
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					
					customerAccountTxt.sendKeys(Keys.TAB);
					
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			System.out.println("Department List Size: "+departmentCount);
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				System.out.println(i+"  "+department);
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					
					departmentTxt.sendKeys(Keys.TAB);
					
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				System.out.println(i+"  "+warehouse);
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					
					pvWarehouseTxt.sendKeys(Keys.TAB);
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				System.out.println(i+"  "+item);
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					
					enter_ItemTxt.sendKeys(Keys.TAB);
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("54");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("54");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("0.5");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);

			int count = batchPopupBatchNoList.size();
			
			for (int j = 0; j < count; j++) 
			{
				String batchNo = batchPopupBatchNoList.get(j).getText();
				
				if (batchNo.equalsIgnoreCase("BATCH#OSV1")) 
				{
					getAction().doubleClick(batchPopupRowNosList.get(j)).build().perform();
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="2";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("************* Batch No         : "+actBatchNo          +"  value expected  "+expBatchNo);
			System.out.println("************* Error Message    : "+actMessage          +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if (actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			
			
			
			
		// Purchase Voucher
			
		public boolean checkSavingPurchaseVoucherVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("Hyderabad")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("100");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: " + presentDate);
			
			cal.add(Calendar.MONTH, 1); 
			
			String nextMonthDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: " + nextMonthDate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME);
			enter_Expirydate.sendKeys(nextMonthDate,Keys.TAB);
			
			String actBatchNo=select1stRow_16thColumn.getText();
			String expBatchNo="Batch#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			

		

		
			
			
		// Saving Purchase Voucher by keeping Batch column Blank 
			
		public boolean checkSavingPurchaseVoucherVATVoucher2WithBatchColumnEmpty() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			System.out.println("Department List Size: "+departmentCount);
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				System.out.println(i+"  "+department);
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("SECUNDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("1");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			Thread.sleep(2000);
			enter_Batch.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			boolean actBatchNo=select1stRow_16thColumn.getText().isEmpty();
			boolean expBatchNo=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="Provide data for mandatory fields Batch";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Batch No isEmpty : "+actBatchNo+"  value expected  "+expBatchNo);
			System.out.println("Error Message    : "+actMessage+"  value expected  "+expMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);
			
			if(actBatchNo==expBatchNo) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				return false;
			}
		}
			
			
			
			
			
			
			
			
		// Saving Stock Excess Voucher 					

		public boolean checkSavingExcessInStocksVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransactionsMenu));
			invTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(excessesInStocksVoucher));
			excessesInStocksVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouselist=warehouseBodyComboList.size();
			
			for (int i = 0; i < warehouselist; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("3");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Excesses1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: " +presentDate);
			
			cal.add(Calendar.MONTH, 1); 
			
			String nextMonthDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: " +nextMonthDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME);
			enter_Expirydate.sendKeys(nextMonthDate,Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			String actBatchNo=select1stRow_8thColumn.getText();
			String expBatchNo="Batch#Excesses1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******* Batch No      : "+actBatchNo+"  value expected  "+expBatchNo);
			System.out.println("******* Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
			
				return false;
			}
		}
				
			

		
			
			
		// Sales Invoice 
		
		public boolean checkExcessesInStocksBatchNoInSalesInvoiceVATVoucher3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				System.out.println(i+"  "+customerAccount);
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("6");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("6");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1.5");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(batchItemName));
			
			int BatchNoCount = batchPopupBatchNoList.size();
			
			boolean actBatchNoIsDisplay = false;
			boolean expBatchNoIsDisplay = true;
			
			for (int j = 0; j < BatchNoCount; j++) 
			{
				String actBatchNo = batchPopupBatchNoList.get(j).getText();
				
				if (actBatchNo.equalsIgnoreCase("Batch#Excesses1")) 
				{
					actBatchNoIsDisplay = true;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);
			
			System.out.println("Batch No isDisplaying : "+actBatchNoIsDisplay +"  value expected  "+expBatchNoIsDisplay);
			
			if (actBatchNoIsDisplay==expBatchNoIsDisplay) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			
			
			
		// Saving the Shortages in Stocks Voucher and Check Saving with Batch Item by consuming Quantity from Batch used in Excess in Stocks Voucher						

		public boolean checkShortageInStocksVoucher1ConsumingFullQuantityInExcessesInStocks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
			shortagesInStockVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
			workFlowExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowChkBox1));
			workFlowChkBox1.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********** Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
			
				return false;
			}
		}
		
			
			
			
			
		
		// Edit in Excess Stocks Voucher by Updating Quantity below the consume Quantity (Shortages in Stocks quantity 3)						
			
		public boolean checkEditingExcessesInStocksVoucher1AndUpdatingQuantityBelowConsumedQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransactionsMenu));
			invTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(excessesInStocksVoucher));
			excessesInStocksVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();
			
			Thread.sleep(3000);

			checkValidationMessage("Voucher loaded successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
			select1stRow_4thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1");
            
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
             
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
            enter_Rate.sendKeys(Keys.TAB);
    
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
            enter_Gross.sendKeys(Keys.TAB);
             
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
            enter_Batch.sendKeys(Keys.TAB);
             
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("Error Message :"+actMessage+"  value expected  "+expMessage);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();

			getWaitForAlert();
			String actAlert=getAlert().getText();
			String expAlert1="The contents of the voucher are changed.";
			String expAlert2="Are you sure that you want to ignore the changes?";

			getAlert().accept();
			
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
			
		// Deleting  Excess in Stocks Voucher (from Voucher Home page & Voucher Entry Page) where Batch Quantity is Consumed in Shortage in Stocks Voucher						

		public boolean checkDeletingExcessesInStockVoucher1InEntryPageAfterConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransactionsMenu));
			invTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(excessesInStocksVoucher));
			excessesInStocksVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();

			String LoadingMessage = checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			String actAlert=getAlert().getText();
			String expAlert="Are you sure that you want to delete the Selected Voucher?";
			
			getAlert().accept();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("************ Alert Text    : "+actAlert   +"  value expected  "+expAlert);
			System.out.println("************ Error Message : "+actMessage +"  value expected  "+expMessage);
			
			if(actAlert.equalsIgnoreCase(expAlert) && actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
			
			
			
			
			
		public boolean checkDeletingExcessesInStockVoucher1InHomepageAfterConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));

			if (grid_ChkBox1.isSelected()==false) 
			{
				grid_ChkBox1.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
			deleteBtn.click();
			
			getWaitForAlert();
			String actAlert=getAlert().getText();
			String expAlert="Are you sure that you want to delete the Selected Voucher?";
			
			getAlert().accept();
			
			String expMessage="VoucherNo - 1: Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("************ Alert Text    : "+actAlert   +"  value expected  "+expAlert);
			System.out.println("************ Error Message : "+actMessage +"  value expected  "+expMessage);
			
			if(actAlert.equalsIgnoreCase(expAlert) && actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);

				return false;
			}
		}
			
				
			
			
			
		// Suspending Excess in Stocks Voucher (From Voucher Home  Page and Entry Page) where Batch Quantity is Consumed in Shortage in Stocks Voucher						
			
		public boolean checkSuspendingExcessInStockVoucher1InEntryPageAfterConsumingFullQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(invTransactionsMenu));
			invTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(excessesInStocksVoucher));
			excessesInStocksVoucher.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();

			String LoadingMessage = checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();

				String LoadingMessage1=checkValidationMessage("Voucher loaded successfully");
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();

				String expMessage2="Voucher saved successfully";
				
				String actMessage2=checkValidationMessage(expMessage2);
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
			
		// Should not allow to suspend the voucher in home page, allowing to suspend but status is Not changing(Issue in Error Message)
		public boolean checkExcessInStockCloseEntryPageAndSuspendInHomepage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));

			if (grid_ChkBox1.isSelected()==false) 
			{
				grid_ChkBox1.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
			suspendBtn.click();
			
			String expMessage="VoucherNo - 1: Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* Error Message: "+actMessage+"  value expected  "+expMessage);
			
			if(actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
				getAction().doubleClick(grid_ChkBox1).build().perform();

				String LoadingMessage1=checkValidationMessage("Voucher loaded successfully");
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expMessage2="Voucher saved successfully";
				
				String actMessage2=checkValidationMessage(expMessage2);
				
				Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
			
			
			
			
		// Suspend option in Shortages in Stocks Voucher and consider the Balance Batch Quantities in Inward/Outward Batch Pop-ups and in reports like Stock Ledger and Stock Balances by Products by Batch  Report Screens						
			
		public boolean checkSuspendingShortageInStocksVoucher1InEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(shortagesInStockVoucher));
			shortagesInStockVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();

			String LoadingMessage = checkValidationMessage("Voucher loaded successfully");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_1stRowSuspendStatus));
			String actSuspendStatus=grid_1stRowSuspendStatus.getText();
			String expSuspendStatus="true";
			
			System.out.println("********* Error Message  : "+actMessage        +"  value expected  "+expMessage1+" : "+expMessage2);
			System.out.println("********* Suspend Status : "+actSuspendStatus  +"  value expected  "+expSuspendStatus);
			
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			

			
			
			
			
		// Verifying Batch Items in Sales Invoice Voucher after Suspending Quantity in Shortage is Stocks
			
		public boolean checkExcessesInStocksBatchNoInSalesInvoiceVATVoucher3AfterSuspendingShortageInStocks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				System.out.println(i+"  "+customerAccount);
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("6");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("6");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1.5");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(batchItemName));
			
			int BatchNoCount = batchPopupBatchNoList.size();
			
			boolean actBatchNoIsDisplay = false;
			boolean expBatchNoIsDisplay = true;
			
			for (int j = 0; j < BatchNoCount; j++) 
			{
				String actBatchNo = batchPopupBatchNoList.get(j).getText();
				
				if (actBatchNo.equalsIgnoreCase("Batch#Excesses1")) 
				{
					actBatchNoIsDisplay = true;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);
			
			System.out.println("Batch No isDisplaying : "+actBatchNoIsDisplay +"  value expected  "+expBatchNoIsDisplay);
			
			if (actBatchNoIsDisplay==expBatchNoIsDisplay) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
				
			
			
			
			
		// Checking Stock Transfer Voucher
			
		public boolean checkSavingStockTransferVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
				
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferWarehouse1));
			stockTransferWarehouse1.click();
			stockTransferWarehouse1.sendKeys(Keys.SPACE);
            
			int warehouse1Count=st_warehouse1HeaderComboList.size();
			
            for (int i = 0; i < warehouse1Count; i++) 
			{
				String warehouse=st_warehouse1HeaderComboList.get(i).getText();

				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					st_warehouse1HeaderComboList.get(i).click();
					stockTransferWarehouse1.sendKeys(Keys.TAB);
					break;
				}
			}
				
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
            select1stRow_1stColumn.click();
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
            enter_Warehouse2Txt.sendKeys(Keys.SPACE);
            
			int warehouse2Count=st_warehouse2BodyComboList.size();
			
			for (int i = 0; i < warehouse2Count; i++) 
			{
				String warehouse=st_warehouse2BodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD")) 
				{
					st_warehouse2BodyComboList.get(i).click();
					enter_Warehouse2Txt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}	

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("24");
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("2");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			String actBatchNo=select1stRow_8thColumn.getText();
			String expBatchNo="BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
			System.out.println("****** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("****** Error Message : "+actMessage +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
			
			
			
		// Suspending Stocks Transfer Voucher  						

		public boolean checkSuspendingStockTransferVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();

			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_1stRowSuspendStatus));
			String actSuspendStatus=grid_1stRowSuspendStatus.getText();
			String expSuspendStatus="TRUE";
			
			System.out.println("********* Error Message : "+actMessage       +"  value expected  "+expMessage1+" : "+expMessage2);
			System.out.println("********* Suspend Status: "+actSuspendStatus +"  value expected  "+expSuspendStatus);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2) && actSuspendStatus.equalsIgnoreCase(expSuspendStatus)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
			
		
		
		
			
		public boolean checkSavingSalesInvoiceVATVoucher3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("18");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("18");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			int count = batchPopupBatchNoList.size();
			
			for (int j = 0; j < count; j++) 
			{
				String BatchNo = batchPopupBatchNoList.get(j).getText();
				
				if (BatchNo.equalsIgnoreCase("BATCH#EXCESSES1")) 
				{
					getAction().doubleClick(batchPopupRowNosList.get(j)).build().perform();
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="BATCH#EXCESSES1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="3";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Batch No      : "+actBatchNo+"  value expected  "+expBatchNo);
			System.out.println("******** Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
					
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
					
				
			
			
			
			
		// Stock Transfer Voucher-2 
			
		public boolean checkStockTransferVoucher2Warehouse1IsSameAsWarehouse2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			stockTransferWarehouse1.sendKeys(Keys.SPACE);
			int warehouselist=st_warehouse1HeaderComboList.size();
			
			for (int i = 0; i < warehouselist; i++) 
			{
				String warehouse=st_warehouse1HeaderComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					st_warehouse1HeaderComboList.get(i).click();
					stockTransferWarehouse1.sendKeys(Keys.TAB);
					break;
				}
			}
              
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
            enter_Warehouse2Txt.sendKeys(Keys.SPACE);
	            
            Thread.sleep(2000);
            
			for (int i = 0; i < warehouselist; i++) 
			{
				String warehouse=st_warehouse2BodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					st_warehouse2BodyComboList.get(i).click();
					enter_Warehouse2Txt.sendKeys(Keys.TAB);
					break;
				}
			}
				
				try 
				{
					if (errorMessage.isDisplayed()) 
					{
						String actErrorMsg=errorMessage.getText();
						String expErrorMsg="Issuing and receiving warehouses cannot be same";
						
						System.out.println("********* Error Message: "+actErrorMsg+"  value expected  "+expErrorMsg);
						
						if (actErrorMsg.equalsIgnoreCase(expErrorMsg)) 
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
							errorMessageCloseBtn.click();
							
							return true;
						}
						else
						{
							getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(errorMessageCloseBtn));
							errorMessageCloseBtn.click();
							
							return false;
						}
					}
					else
					{
						return false;
					}
				} 
				catch (Exception e) 
				{
					return false;
				}
		    }
				
				
				
				
				
			
			
		public boolean checkSavingStockTransferVoucher2WithWarehouse2Blank() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SHIFT,Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
			enter_Warehouse2Txt.sendKeys(Keys.SHIFT,Keys.HOME,Keys.BACK_SPACE);
			
			Thread.sleep(2000);
			
			enter_Warehouse2Txt.sendKeys(Keys.ESCAPE);
			
			enter_Warehouse2Txt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("24");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("2");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="Value missing in column - Warehouse - 2";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
			
			
			
			
			
		public boolean checkSavingStockTransferVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_newBtn));
			new_newBtn.click();
			
			getWaitForAlert();
			
			String actAlert=getAlert().getText();
			String expAlert1="The contents of the voucher are changed.";
			String expAlert2="Are you sure that you want to ignore the changes?";
			
			getAlert().accept();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			stockTransferWarehouse1.sendKeys(Keys.SPACE);
			int warehouselist=st_warehouse1HeaderComboList.size();
			
			for (int i = 0; i < warehouselist; i++) 
			{
				String warehouse=st_warehouse1HeaderComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					st_warehouse1HeaderComboList.get(i).click();
					stockTransferWarehouse1.sendKeys(Keys.TAB);
					break;
				}
			}
              
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
            enter_Warehouse2Txt.sendKeys(Keys.SPACE);
            
			int warehouse2list=st_warehouse2BodyComboList.size();
			
			for (int i = 0; i < warehouse2list; i++) 
			{
				String warehouse=st_warehouse2BodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD")) 
				{
					st_warehouse2BodyComboList.get(i).click();
					enter_Warehouse2Txt.sendKeys(Keys.TAB);
					break;
				}
			}
			
            
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("24");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("2");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			String actBatchNo=select1stRow_8thColumn.getText();
			String expBatchNo="BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="2";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
			System.out.println("********* Batch No      : "+actBatchNo+"  value expected  "+expBatchNo);
			System.out.println("********* Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
			
			
			
			
			
		// Saving Sales Invoice by consuming Batch9 Quantity after Saving Stock Transfer Voucher						
			
		public boolean checkSavingSalesInvoiceVATVoucher4WithWarehouseAsSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("12");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("12");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="4";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Batch No      : "+actBatchNo+"  value expected  "+expBatchNo);
			System.out.println("******** Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
					
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
				
			

		// Suspending Sales Invoice and verify Batch Quantity in New outward Batch pop-up 						

		public boolean checkSuspendingSalesInvoiceVATVoucher4() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("4")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="4";
			
			String actMessage=checkValidationMessage(expMessage1);
			
		    System.out.println("************* Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
		    
		    if (actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
		    {
		    	return true;
			}
		    else
		    {
		    	return false;
			}
		}
			
			
			
			
			
			
			
		public boolean checkSavingSalesInvoiceVATVoucher5WithWarehouseAsSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("12");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("12");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.visibilityOf(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actBatchNo=select1stRow_19thColumn.getText();
			String expBatchNo="BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="5";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Batch No      : "+actBatchNo+"  value expected  "+expBatchNo);
			System.out.println("******** Error Message : "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
					
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
				
			
			
			
			
			
		// Re-Saving the Suspended Sales Invoice Voucher:4
			
		public boolean checkResavingSalesInvoiceVATVoucher4() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("4")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage="Batch is not available. It may have been consumed elsewhere.";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			if (actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();

				String LoadingMessage1=checkValidationMessage("Voucher loaded successfully");
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
				new_SuspendBtn.click();
				
				String expMessage2="Voucher saved successfully";
				
				String actMessage2=checkValidationMessage(expMessage2);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
			
			
		
		
		
		
			
		// Edit in Stock Transfer Voucher by Updating Quantity below the consume Quantity (Sales Invoice Quantity)						
			
		public boolean checkEditingStockTransferVoucher2AndSavingWithBelowConsumedQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("2")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
			select1stRow_4thColumn.click();
			enter_Quantity.sendKeys("12.00");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			String actBatchNo=select1stRow_8thColumn.getText();
			String expBatchNo="BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			System.out.println("********* Batch No: "+actBatchNo+"  value expected  "+expBatchNo);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();

				String LoadingMessage0=checkValidationMessage("Voucher loaded successfully");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_4thColumn));
				select1stRow_4thColumn.click();
				enter_Quantity.sendKeys("24.00");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
				select1stRow_6thColumn.click();
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
				batchPickOnFIFOIcon.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
				batchOkIcon.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();

				String expMessage1="Voucher saved successfully";
				
				String actMessage1=checkValidationMessage(expMessage1);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
		
			
			
		// Deleting Stock Transfer Voucher (from Voucher Home page & Voucher Entry Page) where Transfered Quantity is consumed in Sales Invoice Voucher						
			
		public boolean checkDeletingStockTransferVoucher2InEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("2")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
			Thread.sleep(2000);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Are you sure that you want to delete the Selected Voucher?";
			
			getAlert().accept();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
				
			if (actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				stockTransferWarehouse1.sendKeys(Keys.SPACE);
				int warehouselist=st_warehouse1HeaderComboList.size();
				
				System.out.println("******* Warehouse List: "+warehouselist);
				
				for (int i = 0; i < warehouselist; i++) 
				{
					String warehouse=st_warehouse1HeaderComboList.get(i).getText();
					
					if (warehouse.equalsIgnoreCase("HYDERABAD")) 
					{
						st_warehouse1HeaderComboList.get(i).click();
						stockTransferWarehouse1.sendKeys(Keys.TAB);
						break;
					}
				}
	              
				
	            Thread.sleep(2000);
		            
	            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				select1stRow_1stColumn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
	            enter_Warehouse2Txt.sendKeys(Keys.SPACE);
	            
				int warehouse2list=st_warehouse2BodyComboList.size();
				
				for (int i = 0; i < warehouse2list; i++) 
				{
					String warehouse=st_warehouse2BodyComboList.get(i).getText();
					
					if (warehouse.equalsIgnoreCase("SECUNDERABAD")) 
					{
						st_warehouse2BodyComboList.get(i).click();
						enter_Warehouse2Txt.sendKeys(Keys.TAB);
						break;
					}
				}
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemsCount=itemComboList.size();
				
				for (int i = 0; i < itemsCount; i++) 
				{
					String item=itemComboList.get(i).getText();
					
					if (item.equalsIgnoreCase("BATCH BR ITEM")) 
					{
						itemComboList.get(i).click();
						enter_ItemTxt.sendKeys(Keys.TAB);
						break;
					}
				}
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("24.00");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
				select1stRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys("2");
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
			
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
				batchPickOnFIFOIcon.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
				batchOkIcon.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expMessage1="Voucher saved successfully";
				
				String actMessage1=checkValidationMessage(expMessage1);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
			
		// Should NOT allow to Delete the Voucher, as it has Already Consumed in Sales Invoice N.
		public boolean checkDeletingStockTransferVoucher2InHomepage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("2")) 
				{
					boolean selected = grid_CheckBoxList.get(i).isSelected();
					if (selected==false) 
					{
						grid_CheckBoxList.get(i).click();
					}
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
			deleteBtn.click();
			
			getWaitForAlert();
			
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Are you sure that you want to delete the Selected Voucher?";
			
			getAlert().accept();
			
			String expMessage="VoucherNo - 2: Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);

			Thread.sleep(2000);
			
			if (actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
				newBtn.click();

				String ScreenOpeningMessage1=checkValidationMessage("Screen opened");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
				stockTransferWarehouse1.sendKeys(Keys.SPACE);
				int warehouselist=st_warehouse1HeaderComboList.size();
				
				for (int i = 0; i < warehouselist; i++) 
				{
					String warehouse=st_warehouse1HeaderComboList.get(i).getText();
					
					if (warehouse.equalsIgnoreCase("HYDERABAD")) 
					{
						st_warehouse1HeaderComboList.get(i).click();
						stockTransferWarehouse1.sendKeys(Keys.TAB);
						break;
					}
				}
	              
				
	            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
				select1stRow_1stColumn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
	            enter_Warehouse2Txt.sendKeys(Keys.SPACE);
	            
				int warehouse2list=st_warehouse2BodyComboList.size();
				
				for (int i = 0; i < warehouse2list; i++) 
				{
					String warehouse=st_warehouse2BodyComboList.get(i).getText();
					
					if (warehouse.equalsIgnoreCase("SECUNDERABAD")) 
					{
						st_warehouse2BodyComboList.get(i).click();
						enter_Warehouse2Txt.sendKeys(Keys.TAB);
						break;
					}
				}
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
				enter_ItemTxt.sendKeys(Keys.SPACE);
				
				int itemsCount=itemComboList.size();
				
				for (int i = 0; i < itemsCount; i++) 
				{
					String item=itemComboList.get(i).getText();
					
					if (item.equalsIgnoreCase("BR COGS ITEM")) 
					{
						itemComboList.get(i).click();
						enter_ItemTxt.sendKeys(Keys.TAB);
						break;
					}
				}
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("24.00");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
				select1stRow_6thColumn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys("2");
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
				batchPickOnFIFOIcon.click();
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
				batchOkIcon.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expMessage2="Voucher saved successfully";
				
				String actMessage2=checkValidationMessage(expMessage2);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		

			
		
		
			
			
		// Suspend option in Stock Transfer Voucher ( From Voucher Home  Page and Entry Page ) where Transferred stocks consumed in Sales Invoice 						

		public boolean checkSuspendingStockTransferVoucher2InEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("2")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
		
			if (actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();

				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();

				String LoadingMessage1=checkValidationMessage("Voucher loaded successfully");
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();

				String expMessage2="Voucher saved successfully";
				
				String actMessage2=checkValidationMessage(expMessage2);
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				return false;
			}
		}
			
			
		
		
			
			
		//Should NOT allow to Suspend as it has already consumed in Sales Invoice N
		public boolean checkSuspendingStockTransferVoucher2InHomepage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("2")) 
				{
					boolean selected = grid_CheckBoxList.get(i).isSelected();
					if (selected==false) 
					{
						grid_CheckBoxList.get(i).click();
					}
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
			suspendBtn.click();
		
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);

			if (actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				for (int i = 0; i < count; i++) 
				{
					String VoucherNo = grid_VoucherNoList.get(i).getText();
					
					if (VoucherNo.equalsIgnoreCase("2")) 
					{
						getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
					}
				}
				
				String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
				Thread.sleep(2000);
					
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				String expMessage2="Voucher saved successfully";
				
				String actMessage2=checkValidationMessage(expMessage2);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
		
		
		
		
			
		// Verify Transferring Quantity from Multiple Batch of Batch outward to Multiple Batch of Batch Inward pop-up 						

		public boolean checkSavingStockTransferVoucher3WithMultipleBatchs() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			stockTransferWarehouse1.sendKeys(Keys.SPACE);
			int warehouselist=st_warehouse1HeaderComboList.size();
			
			for (int i = 0; i < warehouselist; i++) 
			{
				String warehouse=st_warehouse1HeaderComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					st_warehouse1HeaderComboList.get(i).click();
					stockTransferWarehouse1.sendKeys(Keys.TAB);
					break;
				}
			}
			
			Thread.sleep(2000);
				
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
            enter_Warehouse2Txt.sendKeys(Keys.SPACE);
            
			int warehouse2list=st_warehouse2BodyComboList.size();
			
			for (int i = 0; i < warehouse2list; i++) 
			{
				String warehouse=st_warehouse2BodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD")) 
				{
					st_warehouse2BodyComboList.get(i).click();
					enter_Warehouse2Txt.sendKeys(Keys.TAB);
					break;
				}
			}
				
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1320");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			String act1stRowBatchNo=select1stRow_8thColumn.getText();
			String exp1stRowBatchNo="BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
			String act2ndRowBatchNo=select2ndRow_8thColumn.getText();
			String exp2ndRowBatchNo="BATCH#OSV2";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
			String act3rdRowBatchNo=select3rdRow_8thColumn.getText();
			String exp3rdRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="3";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
			System.out.println("********* 1st Row Batch No : "+act1stRowBatchNo +"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* 2nd Row Batch No : "+act2ndRowBatchNo +"  value expected  "+exp2ndRowBatchNo);
			System.out.println("********* 3rd Row Batch No : "+act3rdRowBatchNo +"  value expected  "+exp3rdRowBatchNo);
			System.out.println("********* Error Message    : "+actMessage       +"  value expected  "+expMessage1+" : "+expMessage2);
			
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act3rdRowBatchNo.equalsIgnoreCase(exp3rdRowBatchNo)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
				
		
		
			
			
			
		// Batch inward pop up without allocating Qty in Batch outward pop-up and save the voucher by keeping Batch columns blank in Entry Page						
			
		public boolean checkBatchPopupInStockTransferVoucher4() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			stockTransferWarehouse1.sendKeys(Keys.SPACE);
			int warehouselist=st_warehouse1HeaderComboList.size();
			
			for (int i = 0; i < warehouselist; i++) 
			{
				String warehouse=st_warehouse1HeaderComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					st_warehouse1HeaderComboList.get(i).click();
					stockTransferWarehouse1.sendKeys(Keys.TAB);
					break;
				}
			}
			
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
            enter_Warehouse2Txt.sendKeys(Keys.SPACE);
            
			int warehouse2list=st_warehouse2BodyComboList.size();
			
			for (int i = 0; i < warehouse2list; i++) 
			{
				String warehouse=st_warehouse2BodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD")) 
				{
					st_warehouse2BodyComboList.get(i).click();
					enter_Warehouse2Txt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
			enter_UnitTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
			enter_Quantity.sendKeys("1.00");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
			select1stRow_6thColumn.click();
			
			String NegativeStocksMessage=checkValidationMessage("This transaction will make stock negative.");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);

			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			boolean actTableIsEmpty = batchPopupTable.getText().isEmpty();
			boolean expTableIsEmpty = true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			Thread.sleep(2000);
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			boolean actBatchNo=select1stRow_8thColumn.getText().isEmpty();
			boolean expBatchNo=true;
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="Provide data for mandatory fields Batch";
				
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********** Batch Popup isEmpty: "+actTableIsEmpty+"  value expected  "+expTableIsEmpty);
			System.out.println("********** Batch No is Blank: "+actBatchNo+"  value expected  "+expBatchNo);
			System.out.println("********** Error Message: "+actMessage+"  value expected  "+expMessage);
				
				
			if (actTableIsEmpty==expTableIsEmpty && actBatchNo==expBatchNo && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			
		
		
			
		public boolean checkSuspendingStockTransferVoucher3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("3")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			String expMessage="Voucher saved successfully";
			String expMessage1="3";
				
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********** Error Message: "+actMessage+"  value expected  "+expMessage+" : "+expMessage1);
				
				
			if (actMessage.startsWith(expMessage) && actMessage.endsWith(expMessage1)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			

		// Deleting Row option in the Inward / Outward Voucher and Search Option in the Batch Pop-up 						

		public boolean checkDeletingARowInStockTransferVoucher4() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
		    
		    stockTransferWarehouse1.sendKeys(Keys.SPACE);
			int warehouselist=st_warehouse1HeaderComboList.size();
			
			for (int i = 0; i < warehouselist; i++) 
			{
				String warehouse=st_warehouse1HeaderComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					st_warehouse1HeaderComboList.get(i).click();
					stockTransferWarehouse1.sendKeys(Keys.TAB);
					break;
				}
			}
			
            getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Warehouse2Txt));
            enter_Warehouse2Txt.sendKeys(Keys.SPACE);
            
			int warehouse2list=st_warehouse2BodyComboList.size();
			
			for (int i = 0; i < warehouse2list; i++) 
			{
				String warehouse=st_warehouse2BodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD")) 
				{
					st_warehouse2BodyComboList.get(i).click();
					enter_Warehouse2Txt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_UnitTxt));
				enter_UnitTxt.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Quantity));
				enter_Quantity.sendKeys("220");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_6thColumn));
				select1stRow_6thColumn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys("1");
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				Thread.sleep(1000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
				batchPickOnFIFOIcon.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
				batchOkIcon.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
				String act1stRowBatchNo=select1stRow_8thColumn.getText();
				String exp1stRowBatchNo="BATCH#OSV1";
				
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_8thColumn));
				String act2ndRowBatchNo=select2ndRow_8thColumn.getText();
				String exp2ndRowBatchNo="BATCH#OSV2";
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_8thColumn));
				String act3rdRowBatchNo=select3rdRow_8thColumn.getText();
				String exp3rdRowBatchNo="BATCH#PVAT1";
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();",secondRowIndex);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
				thirdRowIndex.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
				deleteRowBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_2ndColumn));
				boolean actItem=select3rdRow_2ndColumn.getText().isEmpty();
				boolean expItem=true;
				
				
				System.out.println("********* 1st Row Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
				System.out.println("********* 2nd Row Batch No: "+act2ndRowBatchNo+"  value expected  "+exp2ndRowBatchNo);
				System.out.println("********* 3rd Row Batch No: "+act3rdRowBatchNo+"  value expected  "+exp3rdRowBatchNo);
				System.out.println("********* 3rd Row Deleted : "+actItem         +"  value expected  "+expItem);
				
				if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act3rdRowBatchNo.equalsIgnoreCase(exp3rdRowBatchNo)
					&& actItem==expItem) 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
					new_CloseBtn.click();
					
					getWaitForAlert();
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
					voucherhomeCloseBtn.click();
					
					Thread.sleep(2000);
					
					return true;
				}
				else
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
					new_CloseBtn.click();
					
					getWaitForAlert();
					getAlert().accept();
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
					voucherhomeCloseBtn.click();
					
					Thread.sleep(2000);
					
					return false;
				}
			}
			
			
			
			
		
		
		
		
		public boolean checkSavingSuspendedStockTransferVoucher3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsMenu));
			inventoryTransactionsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryTransactionsStocksMenu));
			inventoryTransactionsStocksMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransfersVoucher));
			stockTransfersVoucher.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("3")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="Voucher saved successfully";
			String expMessage1="3";
				
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********** Error Message: "+actMessage+"  value expected  "+expMessage+" : "+expMessage1);
				
				
			if (actMessage.startsWith(expMessage) && actMessage.endsWith(expMessage1)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
			
			
			
				
		// Saving Purchase Voucher by verifying whether Batch accepting to allocate Quantity up-to their capacity or more than their capacity .						
				
		public boolean checkSavingPurchaseVoucherVATVoucher2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("Hyderabad")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT2");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: " + presentDate);
			
			cal.add(Calendar.MONTH, 1); 
			
			String nextMonthDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: " + nextMonthDate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME);
			enter_Expirydate.sendKeys(nextMonthDate,Keys.TAB);
			
			String actBatchNo=select1stRow_16thColumn.getText();
			String expBatchNo="Batch#PVAT2";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="2";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
			
			
			
			
		// Save Sales Invoice , consume full Sec Warehouse Quantity 						

		public boolean checkSavingSalesInvoiceVATVoucher6ConsumingFullQuantityOfWarehouseSecunderabad() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("800");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("520");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			String act2ndRowBatchNo=select2ndRow_19thColumn.getText();
			String exp2ndRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_19thColumn));
			String act3rdRowBatchNo=select3rdRow_19thColumn.getText();
			String exp3rdRowBatchNo="BATCH#OSV2";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="6";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			
			System.out.println("********* 1st Row Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* 2nd Row Batch No: "+act2ndRowBatchNo+"  value expected  "+exp2ndRowBatchNo);
			System.out.println("********* 3rd Row Batch No: "+act3rdRowBatchNo+"  value expected  "+exp3rdRowBatchNo);
			System.out.println("********* Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act3rdRowBatchNo.equalsIgnoreCase(exp3rdRowBatchNo)
					&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
				
			
					
			
			
			
			
		// Save Sales Return Voucher 						

		public boolean checkSavingSalesReturnsVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
     		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
			salesReturnsVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
			workFlowExpandBtn.click();
			
			Thread.sleep(2000);
			
			int count = workFlowVoucherNosList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = workFlowVoucherNosList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("NDT55:6")) 
				{
					workFlowChkBoxList.get(i).click();
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_10thColumn));
			String actRow1Batchno = select1stRow_10thColumn.getText();
			String expRow1Batchno = "BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_10thColumn));
			String actRow2Batchno = select2ndRow_10thColumn.getText();
			String expRow2Batchno = "BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_10thColumn));
			String actRow3Batchno = select3rdRow_10thColumn.getText();
			String expRow3Batchno = "BATCH#OSV2";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
				
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Row1 Batch No : "+actRow1Batchno +"  value expected  "+expRow1Batchno);
			System.out.println("******** Row2 Batch No : "+actRow2Batchno +"  value expected  "+expRow2Batchno);
			System.out.println("******** Error Message : "+actMessage     +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actRow2Batchno.equalsIgnoreCase(expRow2Batchno) && actMessage.startsWith(expMessage1) 
					&& actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
			
		// Sales Invoice Voucher Batch Pop-up whether Returned Quantity is Displaying or not 						
			
		public boolean checkBatchNosInSalesInvoiceVATVoucher7() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("800");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("520");
			enter_FQ.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			int count = batchPopupBatchNoList.size();
			
			ArrayList<String> actBatchNos = new ArrayList<String>();
			
			for (int j = 0; j < count; j++) 
			{
				String batchNo = batchPopupBatchNoList.get(j).getText();
				
				actBatchNos.add(batchNo);
			}
				
			ArrayList<String> expBatchNos = new ArrayList<String>();
			expBatchNos.add("BATCH#OSV1");
			expBatchNos.add("BATCH#OSV2");
			expBatchNos.add("BATCH#PVAT1");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			Thread.sleep(2000);
			
			System.out.println(actBatchNos);
			System.out.println(expBatchNos);
				
			if (actBatchNos.toString().equalsIgnoreCase(expBatchNos.toString())) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
				
		
		
			
			
		// Saving Purchase Voucher for Batch Item and for HYD Warehouse Batch Allocate full upto their capacity						
			
		public boolean checkSavingPurchaseVoucherVATVoucher3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("30");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("10");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT3");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: " + presentDate);
			
			cal.add(Calendar.MONTH, 1); 
			
			String nextMonthDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: " + nextMonthDate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME);
			enter_Expirydate.sendKeys(nextMonthDate,Keys.TAB);
			
			String actBatchNo=select1stRow_16thColumn.getText();
			String expBatchNo="Batch#PVAT3";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="3";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
			

		
			
			
			
		// Saving Purchase Return Voucher and Return Full HYD Warehouse Inward Quantities 						
			
		public boolean checkSavingPurchaseReturnsVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseReturnsVoucher));
			purchaseReturnsVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();

			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
			workFlowExpandBtn.click();
			
			Thread.sleep(2000);
			
			int count = workFlowVoucherNosList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = workFlowVoucherNosList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("NDT52:3")) 
				{
					workFlowChkBoxList.get(i).click();
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
			workFlowOkBtnCL.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_13thColumn));
			String actRow1Batchno = select1stRow_13thColumn.getText();
			String expRow1Batchno = "BATCH#PVAT3";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
				
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Row1 Batch No : "+actRow1Batchno +"  value expected  "+expRow1Batchno);
			System.out.println("******** Error Message : "+actMessage     +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actRow1Batchno.equalsIgnoreCase(expRow1Batchno) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}	

			
			
			
		
		
			
			
		// Saving Sales Invoice Voucher by verifying and consuming the Returned Quantity of sales Return Voucher and Verify Inventory Reports 						

		public boolean checkSavingSalesInvoiceVATVoucher7() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpeningMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("SECUNDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("600");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("520");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			String act2ndRowBatchNo=select2ndRow_19thColumn.getText();
			String exp2ndRowBatchNo="BATCH#OSV2";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_19thColumn));
			String act3rdRowBatchNo=select3rdRow_19thColumn.getText();
			String exp3rdRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="7";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			
			System.out.println("********* 1st Row Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* 2nd Row Batch No: "+act2ndRowBatchNo+"  value expected  "+exp2ndRowBatchNo);
			System.out.println("********* 3rd Row Batch No: "+act3rdRowBatchNo+"  value expected  "+exp3rdRowBatchNo);
			System.out.println("********* Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act3rdRowBatchNo.equalsIgnoreCase(exp3rdRowBatchNo)
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
				
				


		
		
		// Editing Sales Return Voucher and Update the Quantity to Below the Consumed Quantity in Sales Invoice						

		public boolean checkEditingSalesReturnsVoucher1AndSavingWithBelowConsumeQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
     		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
			salesReturnsVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();

			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
			JavascriptExecutor js = (JavascriptExecutor) getDriver();
			js.executeScript("arguments[0].scrollIntoView();",thirdRowIndex);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(thirdRowIndex));
			thirdRowIndex.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteRowBtn));
			deleteRowBtn.click();
				
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			Thread.sleep(2000);
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);				
			
			if (actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();

				String LoadingMessage1=checkValidationMessage("Voucher loaded successfully");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowExpandBtn));
				workFlowExpandBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowChkBox2));
				workFlowChkBox2.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(workFlowOkBtnCL));
				workFlowOkBtnCL.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
				pickBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
				Bill_OkBtn.click();
				
				String actMessage2=checkValidationMessage("Voucher saved successfully");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
		
		
		
		
		
		
		// Suspending Sales Return ( from Voucher Home page & Voucher Entry Page ) where Batch Quantity is Consumed in Sales Invoice						
			
		public boolean checkSuspendingSalesReturnsVoucher1InEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
     		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesReturnsVoucher));
			salesReturnsVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			getAction().doubleClick(grid_ChkBox1).build().perform();

			String LoadingMessage=checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			if (actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			
			
		// Should not allow to suspend the voucher in homepage, allowing to suspend but status is Not changing(Issue in Error Message)
		public boolean checkSuspendingSalesReturnsVoucher1InHomepage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("3")) 
				{
					if (grid_CheckBoxList.get(i).isSelected()==false) 
					{
						grid_CheckBoxList.get(i).click();
					}
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
			suspendBtn.click();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			if (actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				if (grid_1stRowSuspendStatus.getText().equalsIgnoreCase("True")) 
				{
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
					getAction().doubleClick(grid_ChkBox1).build().perform();

					checkValidationMessage("Voucher loaded successfully");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					saveBtn.click();
					
					String expMessage2="Voucher saved successfully";
					
					String actMessage2=checkValidationMessage(expMessage2);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
					new_CloseBtn.click();
					
					Thread.sleep(2000);
				}
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
		
		
		
			
		// Editing Purchase Voucher and Update the Quantity to Below the Consumed Quantity in Purchase Return 						

		public boolean checkEditingPurchaseVoucher3AndUpdatingQuantityBelowConsumeQuantity() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("3")) 
				{
					getAction().doubleClick(grid_VoucherNoList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("20");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			if(actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(previousBtn));
				previousBtn.click();

				checkValidationMessage("Voucher loaded successfully");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
				select1stRow_9thColumn.click();
				enter_Quantity.sendKeys("30");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
				select1stRow_11thColumn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
				enter_Rate.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
				enter_Gross.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
				enter_PVDiscount.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
				select1stRow_16thColumn.click();
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
				enter_Batch.sendKeys(Keys.TAB);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
				saveBtn.click();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
				pickBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
				Bill_OkBtn.click();
				
				String expMessage2="Voucher saved successfully";
				
				String actMessage2=checkValidationMessage(expMessage2);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
		
		
			
			
		// Deleting Purchase Voucher (from Voucher Home page & Voucher Entry Page) where Batch quantity is Consumed in Purchase Return 						

		public boolean checkDeletingPurchaseVoucherVATVoucher3InEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("3")) 
				{
					getAction().doubleClick(grid_VoucherNoList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_DeleteBtn));
			new_DeleteBtn.click();
			
			getWaitForAlert();
			
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Are you sure that you want to delete the Selected Voucher?";
			
			getAlert().accept();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("******** Alert Text    : "+actAlertTxt +"  value expected  "+expAlertTxt);
			System.out.println("******** Error Message : "+actMessage  +"  value expected  "+expMessage);
			
			if(actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
			
			
			
			
		public boolean checkDeletingPurchaseVoucherVATVoucher3InHomepage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("3")) 
				{
					if (grid_VoucherNoList.get(i).isSelected()==false) 
					{
						grid_VoucherNoList.get(i).click();
					}
				}
			}
			
			grid_ChkBox1.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(deleteBtn));
			deleteBtn.click();
			
			getWaitForAlert();
			
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Are you sure that you want to delete the Selected Voucher?";
			
			getAlert().accept();
			
			String expMessage="VoucherNo - 3: Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("******** Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
			
			
			
			
		// Suspending Purchase Voucher ( from Voucher Home page & Voucher Entry Page ) where Batch Qty is Consumed in Purchase Return and  Verify all the Inventory Reports 						
			
		public boolean checkSuspendingPurchaseVoucherVATVoucher3InEntryPage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("3")) 
				{
					getAction().doubleClick(grid_VoucherNoList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_SuspendBtn));
			new_SuspendBtn.click();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			if(actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
		
		
			
			
		public boolean checkSuspendingPurchaseVoucherVATVoucher3InHomepage() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(grid_ChkBox1));
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("3")) 
				{
					if (grid_VoucherNoList.get(i).isSelected()==false) 
					{
						grid_VoucherNoList.get(i).click();
					}
				}
			}
			
			grid_ChkBox1.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
			suspendBtn.click();
			
			String expMessage="Batch has already been used in another voucher";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				if (grid_1stRowSuspendStatus.getText().equalsIgnoreCase("True")) 
				{
					for (int i = 0; i < count; i++) 
					{
						String VoucherNo = grid_VoucherNoList.get(i).getText();
						
						if (VoucherNo.equalsIgnoreCase("3")) 
						{
							getAction().doubleClick(grid_VoucherNoList.get(i)).build().perform();
						}
					}
					
					checkValidationMessage("Voucher loaded successfully");
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
					
					saveBtn.click();
					
					String expMessage2="Voucher saved successfully";
					
					String actMessage2=checkValidationMessage(expMessage2);
					
					getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
					new_CloseBtn.click();
				}
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
				
			
			
		
		
		
		
		
		public boolean checkSavingSalesInvoiceVATVoucher8() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#OSV1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			String act2ndRowBatchNo=select2ndRow_19thColumn.getText();
			String exp2ndRowBatchNo="BATCH#PVAT2";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="8";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********* 1st Row Batch No : "+act1stRowBatchNo +"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* 2nd Row Batch No : "+act2ndRowBatchNo +"  value expected  "+exp2ndRowBatchNo);
			System.out.println("********* Error Message    : "+actMessage       +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && actMessage.startsWith(expMessage1) 
					&& actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		// Reports Starts here
		
		public boolean checkItemQueryOfBRCOGSITEM() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemQuery));
			itemQuery.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_ItemTxt));
			iq_ItemTxt.click();
			iq_ItemTxt.sendKeys("BR COGS ITEM");
			Thread.sleep(2000);
			iq_ItemTxt.sendKeys(Keys.TAB);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_getStockBtn));
			iq_getStockBtn.click();
			
			Thread.sleep(5000);
			
			String actiq_OpeningStocks				=iq_OpeningStocks.getText();
			String actiq_PendingPurchaseOrders		=iq_PendingPurchaseOrders.getText();
			String actiq_CurrentStock				=iq_CurrentStock.getText();
			String actiq_PendingSalesOrders			=iq_PendingSalesOrders.getText();
			String actiq_AvgStockRate				=iq_AvgStockRate.getText();
			String actiq_QtyToBeOrdered				=iq_QtyToBeOrdered.getText();
			String actiq_Value						=iq_Value.getText();
			String actiq_BaseUnit     				=iq_BaseUnit.getText();
			
			String expiq_OpeningStocks				="288.00";
			String expiq_PendingPurchaseOrders		="0.00";
			String expiq_CurrentStock				="200.00";
			String expiq_PendingSalesOrders			="0.00";
			String expiq_AvgStockRate				="0.91";
			String expiq_QtyToBeOrdered				="0.00";
			String expiq_Value						="181.20";
			String expiq_BaseUnit     				="Pcs";
			
			// Recent Stock Transaction -Purchases
			
			String actpurVoucherNoR1	=pur1strow_2ndColumn.getText();
			String actpurVendorR1		=pur1strow_3rdColumn.getText();
			String actpurQtyR1			=pur1strow_4thColumn.getText();
			String actpurUnitR1			=pur1strow_5thColumn.getText();
			String actpurRateR1			=pur1strow_6thColumn.getText();
			String actpurCurrencyR1		=pur1strow_7thColumn.getText();
			String actpurQtyInBaseR1	=pur1strow_8thColumn.getText();
			
			String actpurVoucherNoR2	=pur2ndrow_2ndColumn.getText();
			String actpurVendorR2		=pur2ndrow_3rdColumn.getText();
			String actpurQtyR2			=pur2ndrow_4thColumn.getText();
			String actpurUnitR2			=pur2ndrow_5thColumn.getText();
			String actpurRateR2			=pur2ndrow_6thColumn.getText();
			String actpurCurrencyR2		=pur2ndrow_7thColumn.getText();
			String actpurQtyInBaseR2	=pur2ndrow_8thColumn.getText();
			
			String actpurVoucherNoR3	=pur3rdrow_2ndColumn.getText();
			String actpurVendorR3		=pur3rdrow_3rdColumn.getText();
			String actpurQtyR3			=pur3rdrow_4thColumn.getText();
			String actpurUnitR3			=pur3rdrow_5thColumn.getText();
			String actpurRateR3			=pur3rdrow_6thColumn.getText();
			String actpurCurrencyR3		=pur3rdrow_7thColumn.getText();
			String actpurQtyInBaseR3	=pur3rdrow_8thColumn.getText();
			
			String actpurTotalWa		=pur4throw_2ndColumn.getText();
			
			
			// Expected
			
			String exppurVoucherNoR1	="NDT52:1";
			String exppurVendorR1		="Vendor A";
			String exppurQtyR1			="100.00";
			String exppurUnitR1			="Dozs";
			String exppurRateR1			="10.00";
			String exppurCurrencyR1		="Indian Rupees";
			String exppurQtyInBaseR1	="1200.0000000000";
			
			String exppurVoucherNoR2	="NDT52:2";
			String exppurVendorR2		="Vendor A";
			String exppurQtyR2			="50.00";
			String exppurUnitR2			="Dozs";
			String exppurRateR2			="1.00";
			String exppurCurrencyR2		="Indian Rupees";
			String exppurQtyInBaseR2	="600.0000000000";
			
			String exppurVoucherNoR3	="NDT52:3";
			String exppurVendorR3		="Vendor A";
			String exppurQtyR3		    ="30.00";
			String exppurUnitR3			="Dozs";
			String exppurRateR3			="10.00";
			String exppurCurrencyR3		="Indian Rupees";
			String exppurQtyInBaseR3	="360.0000000000";
			
			String exppurTotalWa		="180.00";
			
			getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
			
			
			// Recent Stock Transaction -Sales
			
			String actsalVoucherNoR1	=sal1strow_2ndColumn.getText();
			String actsalCustomerR1		=sal1strow_3rdColumn.getText();
			String actsalQtyR1			=sal1strow_4thColumn.getText();
			String actsalUnitR1			=sal1strow_5thColumn.getText();
			String actsalRateR1			=sal1strow_6thColumn.getText();
			String actsalCurrencyR1		=sal1strow_7thColumn.getText();
			String actsalQtyInBaseR1	=sal1strow_8thColumn.getText();
			
			String actsalVoucherNoR2	=sal2ndrow_2ndColumn.getText();
			String actsalCustomerR2		=sal2ndrow_3rdColumn.getText();
			String actsalQtyR2			=sal2ndrow_4thColumn.getText();
			String actsalUnitR2			=sal2ndrow_5thColumn.getText();
			String actsalRateR2			=sal2ndrow_6thColumn.getText();
			String actsalCurrencyR2		=sal2ndrow_7thColumn.getText();
			String actsalQtyInBaseR2	=sal2ndrow_8thColumn.getText();
			
			String actsalVoucherNoR3	=sal3rdrow_2ndColumn.getText();
			String actsalCustomerR3		=sal3rdrow_3rdColumn.getText();
			String actsalQtyR3			=sal3rdrow_4thColumn.getText();
			String actsalUnitR3			=sal3rdrow_5thColumn.getText();
			String actsalRateR3			=sal3rdrow_6thColumn.getText();
			String actsalCurrencyR3		=sal3rdrow_7thColumn.getText();
			String actsalQtyInBaseR3	=sal3rdrow_8thColumn.getText();
			
			String actsalVoucherNoR4	=sal4throw_2ndColumn.getText();
			String actsalCustomerR4		=sal4throw_3rdColumn.getText();
			String actsalQtyR4			=sal4throw_4thColumn.getText();
			String actsalUnitR4			=sal4throw_5thColumn.getText();
			String actsalRateR4			=sal4throw_6thColumn.getText();
			String actsalCurrencyR4		=sal4throw_7thColumn.getText();
			String actsalQtyInBaseR4	=sal4throw_8thColumn.getText();
			
			String actsalVoucherNoR5	=sal5throw_2ndColumn.getText();
			String actsalCustomerR5		=sal5throw_3rdColumn.getText();
			String actsalQtyR5			=sal5throw_4thColumn.getText();
			String actsalUnitR5			=sal5throw_5thColumn.getText();
			String actsalRateR5			=sal5throw_6thColumn.getText();
			String actsalCurrencyR5		=sal5throw_7thColumn.getText();
			String actsalQtyInBaseR5	=sal5throw_8thColumn.getText();
			
			String actsalVoucherNoR6	=sal6throw_2ndColumn.getText();
			String actsalCustomerR6		=sal6throw_3rdColumn.getText();
			String actsalQtyR6			=sal6throw_4thColumn.getText();
			String actsalUnitR6			=sal6throw_5thColumn.getText();
			String actsalRateR6			=sal6throw_6thColumn.getText();
			String actsalCurrencyR6		=sal6throw_7thColumn.getText();
			String actsalQtyInBaseR6	=sal6throw_8thColumn.getText();
			
			String actsalVoucherNoR7	=sal7throw_2ndColumn.getText();
			String actsalCustomerR7		=sal7throw_3rdColumn.getText();
			String actsalQtyR7			=sal7throw_4thColumn.getText();
			String actsalUnitR7			=sal7throw_5thColumn.getText();
			String actsalRateR7			=sal7throw_6thColumn.getText();
			String actsalCurrencyR7		=sal7throw_7thColumn.getText();
			String actsalQtyInBaseR7	=sal7throw_8thColumn.getText();
			
			String actsalVoucherNoR8	=sal8throw_2ndColumn.getText();
			String actsalCustomerR8		=sal8throw_3rdColumn.getText();
			String actsalQtyR8			=sal8throw_4thColumn.getText();
			String actsalUnitR8			=sal8throw_5thColumn.getText();
			String actsalRateR8			=sal8throw_6thColumn.getText();
			String actsalCurrencyR8		=sal8throw_7thColumn.getText();
			String actsalQtyInBaseR8	=sal8throw_8thColumn.getText();
			
			String actsalVoucherNoR9	=sal9throw_2ndColumn.getText();
			String actsalCustomerR9		=sal9throw_3rdColumn.getText();
			String actsalQtyR9			=sal9throw_4thColumn.getText();
			String actsalUnitR9			=sal9throw_5thColumn.getText();
			String actsalRateR9			=sal9throw_6thColumn.getText();
			String actsalCurrencyR9		=sal9throw_7thColumn.getText();
			String actsalQtyInBaseR9	=sal9throw_8thColumn.getText();
			
			String actsalVoucherNoR10	=sal10throw_2ndColumn.getText();
			String actsalCustomerR10	=sal10throw_3rdColumn.getText();
			String actsalQtyR10			=sal10throw_4thColumn.getText();
			String actsalUnitR10		=sal10throw_5thColumn.getText();
			String actsalRateR10		=sal10throw_6thColumn.getText();
			String actsalCurrencyR10	=sal10throw_7thColumn.getText();
			String actsalQtyInBaseR10	=sal10throw_8thColumn.getText();
			
			String actsalTotalWa		=sal11throw_2ndColumn.getText();

			// Expected
			String expsalVoucherNoR1	="NDT55:7";
			String expsalCustomerR1		="Customer A";
			String expsalQtyR1			="24.00";
			String expsalUnitR1			="Pcs";
			String expsalRateR1			="1.00";
			String expsalCurrencyR1		="Indian Rupees";
			String expsalQtyInBaseR1	="24.0000000000";
			
			String expsalVoucherNoR2	="NDT55:7";
			String expsalCustomerR2 	="Customer A";
			String expsalQtyR2			="96.00";
			String expsalUnitR2			="Pcs";
			String expsalRateR2			="1.00";
			String expsalCurrencyR2		="Indian Rupees";
			String expsalQtyInBaseR2	="96.0000000000";
			
			String expsalVoucherNoR3	="NDT55:8";
			String expsalCustomerR3		="Customer A";
			String expsalQtyR3			="600.00";
			String expsalUnitR3			="Pcs";
			String expsalRateR3			="1.00";
			String expsalCurrencyR3		="Indian Rupees";
			String expsalQtyInBaseR3	="600.0000000000";
			
			String expsalVoucherNoR4	="NDT55:1";
			String expsalCustomerR4 	="Customer A";
			String expsalQtyR4			="36.00";
			String expsalUnitR4			="Pcs";
			String expsalRateR4			="1.50";
			String expsalCurrencyR4		="Indian Rupees";
			String expsalQtyInBaseR4	="36.0000000000";
			
			String expsalVoucherNoR5	="NDT55:2";
			String expsalCustomerR5 	="Customer A";
			String expsalQtyR5			="108.00";
			String expsalUnitR5			="Pcs";
			String expsalRateR5			="0.50";
			String expsalCurrencyR5		="Indian Rupees";
			String expsalQtyInBaseR5	="108.0000000000";
			
			String expsalVoucherNoR6	="NDT55:3";
			String expsalCustomerR6 	="Customer A";
			String expsalQtyR6			="36.00";
			String expsalUnitR6			="Pcs";
			String expsalRateR6			="1.00";
			String expsalCurrencyR6		="Indian Rupees";
			String expsalQtyInBaseR6	="36.0000000000";
			
			String expsalVoucherNoR7	="NDT55:5";
			String expsalCustomerR7 	="Customer A";
			String expsalQtyR7			="24.00";
			String expsalUnitR7			="Pcs";
			String expsalRateR7			="1.00";
			String expsalCurrencyR7		="Indian Rupees";
			String expsalQtyInBaseR7	="24.0000000000";
			
			String expsalVoucherNoR8	="NDT55:6";
			String expsalCustomerR8 	="Customer A";
			String expsalQtyR8			="1,200.00";
			String expsalUnitR8			="Pcs";
			String expsalRateR8			="1.00";
			String expsalCurrencyR8		="Indian Rupees";
			String expsalQtyInBaseR8	="1200.0000000000";
			
			String expsalVoucherNoR9	="NDT55:6";
			String expsalCustomerR9 	="Customer A";
			String expsalQtyR9			="24.00";
			String expsalUnitR9			="Pcs";
			String expsalRateR9			="1.00";
			String expsalCurrencyR9		="Indian Rupees";
			String expsalQtyInBaseR9	="24.0000000000";
			
			String expsalVoucherNoR10	="NDT55:6";
			String expsalCustomerR10 	="Customer A";
			String expsalQtyR10			="96.00";
			String expsalUnitR10		="Pcs";
			String expsalRateR10		="1.00";
			String expsalCurrencyR10	="Indian Rupees";
			String expsalQtyInBaseR10	="96.0000000000";
			
			String expsalTotalWa		="3,244.00";
			

			
			// WareHouse Table
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(BalancebyWareHouseExpandBtn));
			BalancebyWareHouseExpandBtn.click();
			
			Thread.sleep(3000);
			
			getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
			
			String actwareHouseR1		=wh1strow_2ndColumn.getText();
			String actstockR1			=wh1strow_3rdColumn.getText();
			String actrateR1			=wh1strow_4thColumn.getText();
			String actvalueR1			=wh1strow_5thColumn.getText();
			
			String acttotalStock		=whStockTotal.getText();
			String acttotalValue		=whValueTotal.getText();
			
			
			String expwareHouseR1		="SECUNDERABAD";
			String expstockR1			="200.00";
			String exprateR1			="0.91";
			String expvalueR1			="181.20";
			
			String exptotalStock		="200.00";
			String exptotalValue		="181.20";
			

			// Seller And Buying rates Table
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sellingAndBuyingRatesExpandBtn));
			sellingAndBuyingRatesExpandBtn.click();
			
			Thread.sleep(2000);
			
			getAction().sendKeys(Keys.CONTROL,Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			String actsellingRateR1		=sbr1strow_2ndColumn.getText();
			String actsellingValueR1	=sbr1strow_3rdColumn.getText();
			String actbuyingRateR1		=sbr1strow_4thColumn.getText();
			String actbuyingValueR1		=sbr1strow_5thColumn.getText();
			
			String actsellingRateR2		=sbr2ndrow_2ndColumn.getText();
			String actsellingValueR2	=sbr2ndrow_3rdColumn.getText();
			String actbuyingRateR2		=sbr2ndrow_4thColumn.getText();
			String actbuyingValueR2		=sbr2ndrow_5thColumn.getText();
			
			String actsellingRateR3		=sbr3rdrow_2ndColumn.getText();
			String actsellingValueR3	=sbr3rdrow_3rdColumn.getText();
			String actbuyingRateR3		=sbr3rdrow_4thColumn.getText();
			String actbuyingValueR3		=sbr3rdrow_5thColumn.getText();
			
			String actsellingRateR4		=sbr4throw_2ndColumn.getText();
			String actsellingValueR4	=sbr4throw_3rdColumn.getText();
			String actbuyingRateR4		=sbr4throw_4thColumn.getText();
			String actbuyingValueR4		=sbr4throw_5thColumn.getText();
			
			String actsellingRateR5		=sbr5throw_2ndColumn.getText();
			String actsellingValueR5	=sbr5throw_3rdColumn.getText();
			String actbuyingRateR5		=sbr5throw_4thColumn.getText();
			String actbuyingValueR5		=sbr5throw_5thColumn.getText();
			
			String actsellingRateR6		=sbr6throw_2ndColumn.getText();
			String actsellingValueR6	=sbr6throw_3rdColumn.getText();
			String actbuyingRateR6		=sbr6throw_4thColumn.getText();
			String actbuyingValueR6		=sbr6throw_5thColumn.getText();
			
			String actsellingRateR7		=sbr7throw_2ndColumn.getText();
			String actsellingValueR7	=sbr7throw_3rdColumn.getText();
			String actbuyingRateR7		=sbr7throw_4thColumn.getText();
			String actbuyingValueR7		=sbr7throw_5thColumn.getText();
			
			String actsellingRateR8		=sbr8throw_2ndColumn.getText();
			String actsellingValueR8	=sbr8throw_3rdColumn.getText();
			String actbuyingRateR8		=sbr8throw_4thColumn.getText();
			String actbuyingValueR8		=sbr8throw_5thColumn.getText();
			
			String actsellingRateR9		=sbr9throw_2ndColumn.getText();
			String actsellingValueR9	=sbr9throw_3rdColumn.getText();
			String actbuyingRateR9		=sbr9throw_4thColumn.getText();
			String actbuyingValueR9		=sbr9throw_5thColumn.getText();
			
			String actsellingRateR10	=sbr10throw_2ndColumn.getText();
			String actsellingValueR10	=sbr10throw_3rdColumn.getText();
			String actbuyingRateR10		=sbr10throw_4thColumn.getText();
			String actbuyingValueR10	=sbr10throw_5thColumn.getText();
			
			String actsellingRateR11	=sbr11throw_2ndColumn.getText();
			String actsellingValueR11	=sbr11throw_3rdColumn.getText();
			String actbuyingRateR11		=sbr11throw_4thColumn.getText();
			String actbuyingValueR11	=sbr11throw_5thColumn.getText();
			
			String actsellingRateR12	=sbr12throw_2ndColumn.getText();
			String actsellingValueR12	=sbr12throw_3rdColumn.getText();
			String actbuyingRateR12 	=sbr12throw_4thColumn.getText();
			String actbuyingValueR12	=sbr12throw_5thColumn.getText();
			
			String actsellingRateR13	=sbr13throw_2ndColumn.getText();
			String actsellingValueR13	=sbr13throw_3rdColumn.getText();
			String actbuyingRateR13 	=sbr13throw_4thColumn.getText();
			String actbuyingValueR13    =sbr13throw_5thColumn.getText();
			
			String actsellingRateR14	=sbr14throw_2ndColumn.getText();
			String actsellingValueR14	=sbr14throw_3rdColumn.getText();
			String actbuyingRateR14 	=sbr14throw_4thColumn.getText();
			String actbuyingValueR14    =sbr14throw_5thColumn.getText();
			
			
			// Expected
			
			String expsellingRateR1		="So";
			String expsellingValueR1	="0.00";
			String expbuyingRateR1		="Po";
			String expbuyingValueR1		="0.00";

			String expsellingRateR2		="St";
			String expsellingValueR2	="0.00";
			String expbuyingRateR2		="Pt";
			String expbuyingValueR2		="0.00";
			
			String expsellingRateR3		="Val 3";
			String expsellingValueR3	="0.00";
			String expbuyingRateR3		="Val 3";
			String expbuyingValueR3		="0.00";
			
			String expsellingRateR4		="Val 4";
			String expsellingValueR4	="0.00";
			String expbuyingRateR4		="Val 4";
			String expbuyingValueR4		="0.00";
			
			String expsellingRateR5		="Val 5";
			String expsellingValueR5	="0.00";
			String expbuyingRateR5		="Val 5";
			String expbuyingValueR5		="0.00";
			
			String expsellingRateR6		="Val 6";
			String expsellingValueR6	="0.00";
			String expbuyingRateR6		="Val 6";
			String expbuyingValueR6		="0.00";
			
			String expsellingRateR7		="Val 7";
			String expsellingValueR7	="0.00";
			String expbuyingRateR7		="Val 7";
			String expbuyingValueR7		="0.00";
			
			String expsellingRateR8		="Val 8";
			String expsellingValueR8	="0.00";
			String expbuyingRateR8		="Val 8";
			String expbuyingValueR8		="0.00";
			
			String expsellingRateR9		="Val 9";
			String expsellingValueR9	="0.00";
			String expbuyingRateR9		="Val 9";
			String expbuyingValueR9		="0.00";
			
			String expsellingRateR10	="Val 10";
			String expsellingValueR10	="0.00";
			String expbuyingRateR10		="Val 10";
			String expbuyingValueR10	="0.00";
			
			String expsellingRateR11	="Val 11";
			String expsellingValueR11	="0.00";
			String expbuyingRateR11		="Val 11";
			String expbuyingValueR11	="0.00";
			
			String expsellingRateR12	="Val 12";
			String expsellingValueR12	="0.00";
			String expbuyingRateR12 	="Val 12";
			String expbuyingValueR12	="0.00";
			
			String expsellingRateR13	="Val 13";
			String expsellingValueR13	="0.00";
			String expbuyingRateR13 	="Val 13";
			String expbuyingValueR13    ="0.00";
			
			String expsellingRateR14	="Val 14";
			String expsellingValueR14	="0.00";
			String expbuyingRateR14 	="Val 14";
			String expbuyingValueR14    ="0.00";
			
			System.out.println("************************************checkItemQueryOfBatchWAItem*************************************");
			
			System.out.println("iq_OpeningStocks     		 :   "+actiq_OpeningStocks					+" Value Expected : "+expiq_OpeningStocks);
			System.out.println("iq_PendingPurchaseOrders     :   "+actiq_PendingPurchaseOrders			+" Value Expected : "+expiq_PendingPurchaseOrders);
			System.out.println("iq_CurrentStock     		 :   "+actiq_CurrentStock					+" Value Expected : "+expiq_CurrentStock);
			System.out.println("iq_PendingSalesOrders     	 :   "+actiq_PendingSalesOrders				+" Value Expected : "+expiq_PendingSalesOrders);
			System.out.println("iq_AvgStockRate     		 :   "+actiq_AvgStockRate					+" Value Expected : "+expiq_AvgStockRate);
			System.out.println("iq_QtyToBeOrdered     		 :   "+actiq_QtyToBeOrdered					+" Value Expected : "+expiq_QtyToBeOrdered);
			System.out.println("iq_Value     				 :   "+actiq_Value							+" Value Expected : "+expiq_Value);
			System.out.println("iq_BaseUnit     			 :   "+actiq_BaseUnit						+" Value Expected : "+expiq_BaseUnit);
			
			System.out.println("********************* Purchase ******************");
			
			System.out.println("purVoucherNoR1     			 :   "+actpurVoucherNoR1					+" Value Expected : "+exppurVoucherNoR1);
			System.out.println("purVendorR1     			 :   "+actpurVendorR1						+" Value Expected : "+exppurVendorR1);
			System.out.println("purQtyR1     				 :   "+actpurQtyR1							+" Value Expected : "+exppurQtyR1);
			System.out.println("purUnitR1     				 :   "+actpurUnitR1							+" Value Expected : "+exppurUnitR1);
			System.out.println("purRateR1     				 :   "+actpurRateR1							+" Value Expected : "+exppurRateR1);
			System.out.println("purCurrencyR1     			 :   "+actpurCurrencyR1						+" Value Expected : "+exppurCurrencyR1);
			System.out.println("purQtyInBaseR1     			 :   "+actpurQtyInBaseR1					+" Value Expected : "+exppurQtyInBaseR1);
			
			System.out.println("purVoucherNoR2     			 :   "+actpurVoucherNoR2					+" Value Expected : "+exppurVoucherNoR2);
			System.out.println("purVendorR2     			 :   "+actpurVendorR2						+" Value Expected : "+exppurVendorR2);
			System.out.println("purQtyR2     				 :   "+actpurQtyR2							+" Value Expected : "+exppurQtyR2);
			System.out.println("purUnitR2     				 :   "+actpurUnitR2							+" Value Expected : "+exppurUnitR2);
			System.out.println("purRateR2     				 :   "+actpurRateR2							+" Value Expected : "+exppurRateR2);
			System.out.println("purCurrencyR2     			 :   "+actpurCurrencyR2						+" Value Expected : "+exppurCurrencyR2);
			System.out.println("purQtyInBaseR2     			 :   "+actpurQtyInBaseR2					+" Value Expected : "+exppurQtyInBaseR2);
			
			System.out.println("purVoucherNoR3     			 :   "+actpurVoucherNoR3					+" Value Expected : "+exppurVoucherNoR3);
			System.out.println("purVendorR3     			 :   "+actpurVendorR3						+" Value Expected : "+exppurVendorR3);
			System.out.println("purQtyR3     				 :   "+actpurQtyR3							+" Value Expected : "+exppurQtyR3);
			System.out.println("purUnitR3     				 :   "+actpurUnitR3							+" Value Expected : "+exppurUnitR3);
			System.out.println("purRateR3     				 :   "+actpurRateR3							+" Value Expected : "+exppurRateR3);
			System.out.println("purCurrencyR3     			 :   "+actpurCurrencyR3						+" Value Expected : "+exppurCurrencyR3);
			System.out.println("purQtyInBaseR3     			 :   "+actpurQtyInBaseR3					+" Value Expected : "+exppurQtyInBaseR3);
			
			System.out.println("purTotalWa                   :   "+actpurTotalWa                        +" Value expected : "+exppurTotalWa);
			
			System.out.println("********************* Sales ******************");
			
			System.out.println("salVoucherNoR1     			 :   "+actsalVoucherNoR1					+" Value Expected : "+expsalVoucherNoR1);
			System.out.println("salCustomerR1     			 :   "+actsalCustomerR1						+" Value Expected : "+expsalCustomerR1);
			System.out.println("salQtyR1     				 :   "+actsalQtyR1							+" Value Expected : "+expsalQtyR1);
			System.out.println("salUnitR1     				 :   "+actsalUnitR1							+" Value Expected : "+expsalUnitR1);
			System.out.println("salRateR1     				 :   "+actsalRateR1							+" Value Expected : "+expsalRateR1);
			System.out.println("salCurrencyR1     			 :   "+actsalCurrencyR1						+" Value Expected : "+expsalCurrencyR1);
			System.out.println("salQtyInBaseR1     			 :   "+actsalQtyInBaseR1					+" Value Expected : "+expsalQtyInBaseR1);
			
			System.out.println("salVoucherNoR2     			 :   "+actsalVoucherNoR2					+" Value Expected : "+expsalVoucherNoR2);
			System.out.println("salCustomerR2     			 :   "+actsalCustomerR2						+" Value Expected : "+expsalCustomerR2);
			System.out.println("salQtyR2     				 :   "+actsalQtyR2							+" Value Expected : "+expsalQtyR2);
			System.out.println("salUnitR2     				 :   "+actsalUnitR2							+" Value Expected : "+expsalUnitR2);
			System.out.println("salRateR2     				 :   "+actsalRateR2							+" Value Expected : "+expsalRateR2);
			System.out.println("salCurrencyR2     			 :   "+actsalCurrencyR2						+" Value Expected : "+expsalCurrencyR2);
			System.out.println("salQtyInBaseR2     			 :   "+actsalQtyInBaseR2					+" Value Expected : "+expsalQtyInBaseR2);
			
			System.out.println("salVoucherNoR3     			 :   "+actsalVoucherNoR3					+" Value Expected : "+expsalVoucherNoR3);
			System.out.println("salCustomerR3     			 :   "+actsalCustomerR3						+" Value Expected : "+expsalCustomerR3);
			System.out.println("salQtyR3     				 :   "+actsalQtyR3							+" Value Expected : "+expsalQtyR3);
			System.out.println("salUnitR3     				 :   "+actsalUnitR3							+" Value Expected : "+expsalUnitR3);
			System.out.println("salRateR3     				 :   "+actsalRateR3							+" Value Expected : "+expsalRateR3);
			System.out.println("salCurrencyR3     			 :   "+actsalCurrencyR3						+" Value Expected : "+expsalCurrencyR3);
			System.out.println("salQtyInBaseR3     			 :   "+actsalQtyInBaseR3					+" Value Expected : "+expsalQtyInBaseR3);
			
			System.out.println("salVoucherNoR4     			 :   "+actsalVoucherNoR4					+" Value Expected : "+expsalVoucherNoR4);
			System.out.println("salCustomerR4     			 :   "+actsalCustomerR4						+" Value Expected : "+expsalCustomerR4);
			System.out.println("salQtyR4     				 :   "+actsalQtyR4							+" Value Expected : "+expsalQtyR4);
			System.out.println("salUnitR4     				 :   "+actsalUnitR4							+" Value Expected : "+expsalUnitR4);
			System.out.println("salRateR4     				 :   "+actsalRateR4							+" Value Expected : "+expsalRateR4);
			System.out.println("salCurrencyR4     			 :   "+actsalCurrencyR4						+" Value Expected : "+expsalCurrencyR4);
			System.out.println("salQtyInBaseR4     			 :   "+actsalQtyInBaseR4					+" Value Expected : "+expsalQtyInBaseR4);
			
			System.out.println("salVoucherNoR5     			 :   "+actsalVoucherNoR5					+" Value Expected : "+expsalVoucherNoR5);
			System.out.println("salCustomerR5     			 :   "+actsalCustomerR5						+" Value Expected : "+expsalCustomerR5);
			System.out.println("salQtyR5     				 :   "+actsalQtyR5							+" Value Expected : "+expsalQtyR5);
			System.out.println("salUnitR5     				 :   "+actsalUnitR5							+" Value Expected : "+expsalUnitR5);
			System.out.println("salRateR5     				 :   "+actsalRateR5							+" Value Expected : "+expsalRateR5);
			System.out.println("salCurrencyR5     			 :   "+actsalCurrencyR5						+" Value Expected : "+expsalCurrencyR5);
			System.out.println("salQtyInBaseR5     			 :   "+actsalQtyInBaseR5					+" Value Expected : "+expsalQtyInBaseR5);
			
			System.out.println("salVoucherNoR6     			 :   "+actsalVoucherNoR6					+" Value Expected : "+expsalVoucherNoR6);
			System.out.println("salCustomerR6     			 :   "+actsalCustomerR6						+" Value Expected : "+expsalCustomerR6);
			System.out.println("salQtyR6     				 :   "+actsalQtyR6							+" Value Expected : "+expsalQtyR6);
			System.out.println("salUnitR6     				 :   "+actsalUnitR6							+" Value Expected : "+expsalUnitR6);
			System.out.println("salRateR6     				 :   "+actsalRateR6							+" Value Expected : "+expsalRateR6);
			System.out.println("salCurrencyR6     			 :   "+actsalCurrencyR6						+" Value Expected : "+expsalCurrencyR6);
			System.out.println("salQtyInBaseR6     			 :   "+actsalQtyInBaseR6					+" Value Expected : "+expsalQtyInBaseR6);
			
			System.out.println("salVoucherNoR7     			 :   "+actsalVoucherNoR7					+" Value Expected : "+expsalVoucherNoR7);
			System.out.println("salCustomerR7     			 :   "+actsalCustomerR7						+" Value Expected : "+expsalCustomerR7);
			System.out.println("salQtyR7     				 :   "+actsalQtyR7							+" Value Expected : "+expsalQtyR7);
			System.out.println("salUnitR7     				 :   "+actsalUnitR7							+" Value Expected : "+expsalUnitR7);
			System.out.println("salRateR7     				 :   "+actsalRateR7							+" Value Expected : "+expsalRateR7);
			System.out.println("salCurrencyR7     			 :   "+actsalCurrencyR7						+" Value Expected : "+expsalCurrencyR7);
			System.out.println("salQtyInBaseR7     			 :   "+actsalQtyInBaseR7					+" Value Expected : "+expsalQtyInBaseR7);
			
			System.out.println("salVoucherNoR8     			 :   "+actsalVoucherNoR8					+" Value Expected : "+expsalVoucherNoR8);
			System.out.println("salCustomerR8     			 :   "+actsalCustomerR8						+" Value Expected : "+expsalCustomerR8);
			System.out.println("salQtyR8     				 :   "+actsalQtyR8							+" Value Expected : "+expsalQtyR8);
			System.out.println("salUnitR8     				 :   "+actsalUnitR8							+" Value Expected : "+expsalUnitR8);
			System.out.println("salRateR8     				 :   "+actsalRateR8							+" Value Expected : "+expsalRateR8);
			System.out.println("salCurrencyR8     			 :   "+actsalCurrencyR8						+" Value Expected : "+expsalCurrencyR8);
			System.out.println("salQtyInBaseR8     			 :   "+actsalQtyInBaseR8					+" Value Expected : "+expsalQtyInBaseR8);
			
			System.out.println("salVoucherNoR9     			 :   "+actsalVoucherNoR9					+" Value Expected : "+expsalVoucherNoR9);
			System.out.println("salCustomerR9     			 :   "+actsalCustomerR9						+" Value Expected : "+expsalCustomerR9);
			System.out.println("salQtyR9     				 :   "+actsalQtyR9							+" Value Expected : "+expsalQtyR9);
			System.out.println("salUnitR9     				 :   "+actsalUnitR9							+" Value Expected : "+expsalUnitR9);
			System.out.println("salRateR9     				 :   "+actsalRateR9							+" Value Expected : "+expsalRateR9);
			System.out.println("salCurrencyR9     			 :   "+actsalCurrencyR9						+" Value Expected : "+expsalCurrencyR9);
			System.out.println("salQtyInBaseR9     			 :   "+actsalQtyInBaseR9					+" Value Expected : "+expsalQtyInBaseR9);
			
			System.out.println("salVoucherNoR10     		 :   "+actsalVoucherNoR10					+" Value Expected : "+expsalVoucherNoR10);
			System.out.println("salCustomerR10     			 :   "+actsalCustomerR10					+" Value Expected : "+expsalCustomerR10);
			System.out.println("salQtyR10     				 :   "+actsalQtyR10							+" Value Expected : "+expsalQtyR10);
			System.out.println("salUnitR10     				 :   "+actsalUnitR10						+" Value Expected : "+expsalUnitR10);
			System.out.println("salRateR10     				 :   "+actsalRateR10						+" Value Expected : "+expsalRateR10);
			System.out.println("salCurrencyR10     			 :   "+actsalCurrencyR10					+" Value Expected : "+expsalCurrencyR10);
			System.out.println("salQtyInBaseR10     		 :   "+actsalQtyInBaseR10					+" Value Expected : "+expsalQtyInBaseR10);
			
			System.out.println("salTotalWa                   :   "+actsalTotalWa                        +" Value Expected : "+expsalTotalWa);
			
			
			System.out.println("********************* WareHouse ******************");
			
			System.out.println("wareHouseR1     	 :   "+actwareHouseR1				+" Value Expected : "+expwareHouseR1);
			System.out.println("stockR1          	 :   "+actstockR1					+" Value Expected : "+expstockR1);
			System.out.println("rateR1	          	 :   "+actrateR1					+" Value Expected : "+exprateR1);
			System.out.println("valueR1	          	 :   "+actvalueR1					+" Value Expected : "+expvalueR1);
			System.out.println("totalStock	         :   "+acttotalStock				+" Value Expected : "+exptotalStock);
			System.out.println("totalValue	         :   "+acttotalValue				+" Value Expected : "+exptotalValue);
			
			System.out.println("*************************Selling and Buying rates********************");
			
			System.out.println("sellingRateR1     			 :   "+actsellingRateR1						+" Value Expected : "+expsellingRateR1);
			System.out.println("sellingValueR1  			 :   "+actsellingValueR1					+" Value Expected : "+expsellingValueR1);
			System.out.println("buyingRateR1     			 :   "+actbuyingRateR1						+" Value Expected : "+expbuyingRateR1);
			System.out.println("buyingValueR1     			 :   "+actbuyingValueR1						+" Value Expected : "+expbuyingValueR1);
			
			System.out.println("sellingRateR2     			 :   "+actsellingRateR2						+" Value Expected : "+expsellingRateR2);
			System.out.println("sellingValueR2  			 :   "+actsellingValueR2					+" Value Expected : "+expsellingValueR2);
			System.out.println("buyingRateR2     			 :   "+actbuyingRateR2						+" Value Expected : "+expbuyingRateR2);
			System.out.println("buyingValueR2     			 :   "+actbuyingValueR2						+" Value Expected : "+expbuyingValueR2);
			
			System.out.println("sellingRateR3     			 :   "+actsellingRateR3						+" Value Expected : "+expsellingRateR3);
			System.out.println("sellingValueR3  			 :   "+actsellingValueR3					+" Value Expected : "+expsellingValueR3);
			System.out.println("buyingRateR3     			 :   "+actbuyingRateR3						+" Value Expected : "+expbuyingRateR3);
			System.out.println("buyingValueR3     			 :   "+actbuyingValueR3						+" Value Expected : "+expbuyingValueR3);
			
			System.out.println("sellingRateR4     			 :   "+actsellingRateR4						+" Value Expected : "+expsellingRateR4);
			System.out.println("sellingValueR4  			 :   "+actsellingValueR4					+" Value Expected : "+expsellingValueR4);
			System.out.println("buyingRateR4     			 :   "+actbuyingRateR4						+" Value Expected : "+expbuyingRateR4);
			System.out.println("buyingValueR4     			 :   "+actbuyingValueR4						+" Value Expected : "+expbuyingValueR4);
			
			System.out.println("sellingRateR5     			 :   "+actsellingRateR5						+" Value Expected : "+expsellingRateR5);
			System.out.println("sellingValueR5  			 :   "+actsellingValueR5					+" Value Expected : "+expsellingValueR5);
			System.out.println("buyingRateR5     			 :   "+actbuyingRateR5						+" Value Expected : "+expbuyingRateR5);
			System.out.println("buyingValueR5     			 :   "+actbuyingValueR5						+" Value Expected : "+expbuyingValueR5);
			
			System.out.println("sellingRateR6     			 :   "+actsellingRateR6						+" Value Expected : "+expsellingRateR6);
			System.out.println("sellingValueR6  			 :   "+actsellingValueR6					+" Value Expected : "+expsellingValueR6);
			System.out.println("buyingRateR6     			 :   "+actbuyingRateR6						+" Value Expected : "+expbuyingRateR6);
			System.out.println("buyingValueR6     			 :   "+actbuyingValueR6						+" Value Expected : "+expbuyingValueR6);
			
			System.out.println("sellingRateR7     			 :   "+actsellingRateR7						+" Value Expected : "+expsellingRateR7);
			System.out.println("sellingValueR7  			 :   "+actsellingValueR7					+" Value Expected : "+expsellingValueR7);
			System.out.println("buyingRateR7     			 :   "+actbuyingRateR7						+" Value Expected : "+expbuyingRateR7);
			System.out.println("buyingValueR7     			 :   "+actbuyingValueR7						+" Value Expected : "+expbuyingValueR7);
			
			System.out.println("sellingRateR8     			 :   "+actsellingRateR8						+" Value Expected : "+expsellingRateR8);
			System.out.println("sellingValueR8  			 :   "+actsellingValueR8					+" Value Expected : "+expsellingValueR8);
			System.out.println("buyingRateR8     			 :   "+actbuyingRateR8						+" Value Expected : "+expbuyingRateR8);
			System.out.println("buyingValueR8     			 :   "+actbuyingValueR8						+" Value Expected : "+expbuyingValueR8);
			
			System.out.println("sellingRateR9     			 :   "+actsellingRateR9						+" Value Expected : "+expsellingRateR9);
			System.out.println("sellingValueR9  			 :   "+actsellingValueR9					+" Value Expected : "+expsellingValueR9);
			System.out.println("buyingRateR9     			 :   "+actbuyingRateR9						+" Value Expected : "+expbuyingRateR9);
			System.out.println("buyingValueR9     			 :   "+actbuyingValueR9						+" Value Expected : "+expbuyingValueR9);
			
			System.out.println("sellingRateR10     			 :   "+actsellingRateR10					+" Value Expected : "+expsellingRateR10);
			System.out.println("sellingValueR10  			 :   "+actsellingValueR10					+" Value Expected : "+expsellingValueR10);
			System.out.println("buyingRateR10     			 :   "+actbuyingRateR10						+" Value Expected : "+expbuyingRateR10);
			System.out.println("buyingValueR10     			 :   "+actbuyingValueR10					+" Value Expected : "+expbuyingValueR10);
			
			System.out.println("sellingRateR11     			 :   "+actsellingRateR11					+" Value Expected : "+expsellingRateR11);
			System.out.println("sellingValueR11  			 :   "+actsellingValueR11					+" Value Expected : "+expsellingValueR11);
			System.out.println("buyingRateR11     			 :   "+actbuyingRateR11						+" Value Expected : "+expbuyingRateR11);
			System.out.println("buyingValueR11     			 :   "+actbuyingValueR11					+" Value Expected : "+expbuyingValueR11);
			
			System.out.println("sellingRateR12     			 :   "+actsellingRateR12					+" Value Expected : "+expsellingRateR12);
			System.out.println("sellingValueR12  			 :   "+actsellingValueR12					+" Value Expected : "+expsellingValueR12);
			System.out.println("buyingRateR12     			 :   "+actbuyingRateR12						+" Value Expected : "+expbuyingRateR12);
			System.out.println("buyingValueR12     			 :   "+actbuyingValueR12					+" Value Expected : "+expbuyingValueR12);
			
			System.out.println("sellingRateR13     			 :   "+actsellingRateR13					+" Value Expected : "+expsellingRateR13);
			System.out.println("sellingValueR13  			 :   "+actsellingValueR13					+" Value Expected : "+expsellingValueR13);
			System.out.println("buyingRateR13     			 :   "+actbuyingRateR13						+" Value Expected : "+expbuyingRateR13);
			System.out.println("buyingValueR13     			 :   "+actbuyingValueR13					+" Value Expected : "+expbuyingValueR13);

			System.out.println("sellingRateR14     			 :   "+actsellingRateR14					+" Value Expected : "+expsellingRateR14);
			System.out.println("sellingValueR14  			 :   "+actsellingValueR14					+" Value Expected : "+expsellingValueR14);
			System.out.println("buyingRateR14     			 :   "+actbuyingRateR14						+" Value Expected : "+expbuyingRateR14);
			System.out.println("buyingValueR14     			 :   "+actbuyingValueR14					+" Value Expected : "+expbuyingValueR14);
			
			if(actiq_OpeningStocks.equalsIgnoreCase(expiq_OpeningStocks) && actiq_PendingPurchaseOrders.equalsIgnoreCase(expiq_PendingPurchaseOrders)
					&& actiq_CurrentStock.equalsIgnoreCase(expiq_CurrentStock) && actiq_PendingSalesOrders.equalsIgnoreCase(expiq_PendingSalesOrders)
					&& actiq_AvgStockRate.equalsIgnoreCase(expiq_AvgStockRate) && actiq_QtyToBeOrdered.equalsIgnoreCase(expiq_QtyToBeOrdered)
					&& actiq_Value.equalsIgnoreCase(expiq_Value) && actiq_BaseUnit.equalsIgnoreCase(expiq_BaseUnit)
					
					&& actpurVoucherNoR1.equalsIgnoreCase(exppurVoucherNoR1) && actpurVendorR1.equalsIgnoreCase(exppurVendorR1) && actpurQtyR1.equalsIgnoreCase(exppurQtyR1)
					&& actpurUnitR1.equalsIgnoreCase(exppurUnitR1) && actpurRateR1.equalsIgnoreCase(exppurRateR1) && actpurCurrencyR1.equalsIgnoreCase(exppurCurrencyR1)
					&& actpurQtyInBaseR1.equalsIgnoreCase(exppurQtyInBaseR1)
					
					&& actpurVoucherNoR2.equalsIgnoreCase(exppurVoucherNoR2) && actpurVendorR2.equalsIgnoreCase(exppurVendorR2) && actpurQtyR2.equalsIgnoreCase(exppurQtyR2)
					&& actpurUnitR2.equalsIgnoreCase(exppurUnitR2) && actpurRateR2.equalsIgnoreCase(exppurRateR2) && actpurCurrencyR2.equalsIgnoreCase(exppurCurrencyR2)
					&& actpurQtyInBaseR2.equalsIgnoreCase(exppurQtyInBaseR2)
					
					&& actpurVoucherNoR3.equalsIgnoreCase(exppurVoucherNoR3) && actpurVendorR3.equalsIgnoreCase(exppurVendorR3) && actpurQtyR3.equalsIgnoreCase(exppurQtyR3)
					&& actpurUnitR3.equalsIgnoreCase(exppurUnitR3) && actpurRateR3.equalsIgnoreCase(exppurRateR3) && actpurCurrencyR3.equalsIgnoreCase(exppurCurrencyR3)
					&& actpurQtyInBaseR3.equalsIgnoreCase(exppurQtyInBaseR3)
					
					&& actpurTotalWa.equalsIgnoreCase(exppurTotalWa)
					
					
					&& actsalVoucherNoR1.equalsIgnoreCase(expsalVoucherNoR1) && actsalCustomerR1.equalsIgnoreCase(expsalCustomerR1) && actsalQtyR1.equalsIgnoreCase(expsalQtyR1)
					&& actsalUnitR1.equalsIgnoreCase(expsalUnitR1) && actsalRateR1.equalsIgnoreCase(expsalRateR1) && actsalCurrencyR1.equalsIgnoreCase(expsalCurrencyR1)
					&& actsalQtyInBaseR1.equalsIgnoreCase(expsalQtyInBaseR1)
					
					&& actsalVoucherNoR2.equalsIgnoreCase(expsalVoucherNoR2) && actsalCustomerR2.equalsIgnoreCase(expsalCustomerR2) && actsalQtyR2.equalsIgnoreCase(expsalQtyR2)
					&& actsalUnitR2.equalsIgnoreCase(expsalUnitR2) && actsalRateR2.equalsIgnoreCase(expsalRateR2) && actsalCurrencyR2.equalsIgnoreCase(expsalCurrencyR2)
					&& actsalQtyInBaseR2.equalsIgnoreCase(expsalQtyInBaseR2)
					
					&& actsalVoucherNoR3.equalsIgnoreCase(expsalVoucherNoR3) && actsalCustomerR3.equalsIgnoreCase(expsalCustomerR3) && actsalQtyR3.equalsIgnoreCase(expsalQtyR3)
					&& actsalUnitR3.equalsIgnoreCase(expsalUnitR3) && actsalRateR3.equalsIgnoreCase(expsalRateR3) && actsalCurrencyR3.equalsIgnoreCase(expsalCurrencyR3)
					&& actsalQtyInBaseR3.equalsIgnoreCase(expsalQtyInBaseR3)
					
					&& actsalVoucherNoR4.equalsIgnoreCase(expsalVoucherNoR4) && actsalCustomerR4.equalsIgnoreCase(expsalCustomerR4) && actsalQtyR4.equalsIgnoreCase(expsalQtyR4)
					&& actsalUnitR4.equalsIgnoreCase(expsalUnitR4) && actsalRateR4.equalsIgnoreCase(expsalRateR4) && actsalCurrencyR4.equalsIgnoreCase(expsalCurrencyR4)
					&& actsalQtyInBaseR4.equalsIgnoreCase(expsalQtyInBaseR4)
					
					&& actsalVoucherNoR5.equalsIgnoreCase(expsalVoucherNoR5) && actsalCustomerR5.equalsIgnoreCase(expsalCustomerR5) && actsalQtyR5.equalsIgnoreCase(expsalQtyR5)
					&& actsalUnitR5.equalsIgnoreCase(expsalUnitR5) && actsalRateR5.equalsIgnoreCase(expsalRateR5) && actsalCurrencyR5.equalsIgnoreCase(expsalCurrencyR5)
					&& actsalQtyInBaseR5.equalsIgnoreCase(expsalQtyInBaseR5)
					
					&& actsalVoucherNoR6.equalsIgnoreCase(expsalVoucherNoR6) && actsalCustomerR6.equalsIgnoreCase(expsalCustomerR6) && actsalQtyR6.equalsIgnoreCase(expsalQtyR6)
					&& actsalUnitR6.equalsIgnoreCase(expsalUnitR6) && actsalRateR6.equalsIgnoreCase(expsalRateR6) && actsalCurrencyR6.equalsIgnoreCase(expsalCurrencyR6)
					&& actsalQtyInBaseR6.equalsIgnoreCase(expsalQtyInBaseR6)
					
					&& actsalVoucherNoR7.equalsIgnoreCase(expsalVoucherNoR7) && actsalCustomerR7.equalsIgnoreCase(expsalCustomerR7) && actsalQtyR7.equalsIgnoreCase(expsalQtyR7)
					&& actsalUnitR7.equalsIgnoreCase(expsalUnitR7) && actsalRateR7.equalsIgnoreCase(expsalRateR7) && actsalCurrencyR7.equalsIgnoreCase(expsalCurrencyR7)
					&& actsalQtyInBaseR7.equalsIgnoreCase(expsalQtyInBaseR7)
					
					&& actsalVoucherNoR8.equalsIgnoreCase(expsalVoucherNoR8) && actsalCustomerR8.equalsIgnoreCase(expsalCustomerR8) && actsalQtyR8.equalsIgnoreCase(expsalQtyR8)
					&& actsalUnitR8.equalsIgnoreCase(expsalUnitR8) && actsalRateR8.equalsIgnoreCase(expsalRateR8) && actsalCurrencyR8.equalsIgnoreCase(expsalCurrencyR8)
					&& actsalQtyInBaseR8.equalsIgnoreCase(expsalQtyInBaseR8)
					
					&& actsalVoucherNoR9.equalsIgnoreCase(expsalVoucherNoR9) && actsalCustomerR9.equalsIgnoreCase(expsalCustomerR9) && actsalQtyR9.equalsIgnoreCase(expsalQtyR9)
					&& actsalUnitR9.equalsIgnoreCase(expsalUnitR9) && actsalRateR9.equalsIgnoreCase(expsalRateR9) && actsalCurrencyR9.equalsIgnoreCase(expsalCurrencyR9)
					&& actsalQtyInBaseR9.equalsIgnoreCase(expsalQtyInBaseR9)
					
					&& actsalVoucherNoR10.equalsIgnoreCase(expsalVoucherNoR10) && actsalCustomerR10.equalsIgnoreCase(expsalCustomerR10) && actsalQtyR10.equalsIgnoreCase(expsalQtyR10)
					&& actsalUnitR10.equalsIgnoreCase(expsalUnitR10) && actsalRateR10.equalsIgnoreCase(expsalRateR10) && actsalCurrencyR10.equalsIgnoreCase(expsalCurrencyR10)
					&& actsalQtyInBaseR10.equalsIgnoreCase(expsalQtyInBaseR10)
					
					&& actsalTotalWa.equalsIgnoreCase(expsalTotalWa)
					
					&& actwareHouseR1.equalsIgnoreCase(expwareHouseR1) && actstockR1.equalsIgnoreCase(expstockR1) && actrateR1.equalsIgnoreCase(exprateR1)
					&& actvalueR1.equalsIgnoreCase(expvalueR1) && acttotalStock.equalsIgnoreCase(exptotalStock) && acttotalValue.equalsIgnoreCase(exptotalValue)
					
					&& actsellingRateR1.equalsIgnoreCase(expsellingRateR1) && actsellingValueR1.equalsIgnoreCase(expsellingValueR1)
					&& actbuyingRateR1.equalsIgnoreCase(expbuyingRateR1) && actbuyingValueR1.equalsIgnoreCase(expbuyingValueR1)
					
					&& actsellingRateR2.equalsIgnoreCase(expsellingRateR2) && actsellingValueR2.equalsIgnoreCase(expsellingValueR2)
					&& actbuyingRateR2.equalsIgnoreCase(expbuyingRateR2) && actbuyingValueR2.equalsIgnoreCase(expbuyingValueR2)
					
					&& actsellingRateR3.equalsIgnoreCase(expsellingRateR3) && actsellingValueR3.equalsIgnoreCase(expsellingValueR3)
					&& actbuyingRateR3.equalsIgnoreCase(expbuyingRateR3) && actbuyingValueR3.equalsIgnoreCase(expbuyingValueR3)
					
					&& actsellingRateR4.equalsIgnoreCase(expsellingRateR4) && actsellingValueR4.equalsIgnoreCase(expsellingValueR4)
					&& actbuyingRateR4.equalsIgnoreCase(expbuyingRateR4) && actbuyingValueR4.equalsIgnoreCase(expbuyingValueR4)
					
					&& actsellingRateR5.equalsIgnoreCase(expsellingRateR5) && actsellingValueR4.equalsIgnoreCase(expsellingValueR5)
					&& actbuyingRateR5.equalsIgnoreCase(expbuyingRateR5) && actbuyingValueR5.equalsIgnoreCase(expbuyingValueR5)
					
					&& actsellingRateR6.equalsIgnoreCase(expsellingRateR6) && actsellingValueR6.equalsIgnoreCase(expsellingValueR6)
					&& actbuyingRateR6.equalsIgnoreCase(expbuyingRateR6) && actbuyingValueR6.equalsIgnoreCase(expbuyingValueR6)
					
					&& actsellingRateR7.equalsIgnoreCase(expsellingRateR7) && actsellingValueR7.equalsIgnoreCase(expsellingValueR7)
					&& actbuyingRateR7.equalsIgnoreCase(expbuyingRateR7) && actbuyingValueR7.equalsIgnoreCase(expbuyingValueR7)
					
					&& actsellingRateR8.equalsIgnoreCase(expsellingRateR8) && actsellingValueR8.equalsIgnoreCase(expsellingValueR8)
					&& actbuyingRateR8.equalsIgnoreCase(expbuyingRateR8) && actbuyingValueR8.equalsIgnoreCase(expbuyingValueR8)
					
					&& actsellingRateR9.equalsIgnoreCase(expsellingRateR9) && actsellingValueR9.equalsIgnoreCase(expsellingValueR9)
					&& actbuyingRateR9.equalsIgnoreCase(expbuyingRateR9) && actbuyingValueR9.equalsIgnoreCase(expbuyingValueR9)
					
					&& actsellingRateR10.equalsIgnoreCase(expsellingRateR10) && actsellingValueR10.equalsIgnoreCase(expsellingValueR10)
					&& actbuyingRateR10.equalsIgnoreCase(expbuyingRateR10) && actbuyingValueR10.equalsIgnoreCase(expbuyingValueR10)
					
					&& actsellingRateR11.equalsIgnoreCase(expsellingRateR11) && actsellingValueR11.equalsIgnoreCase(expsellingValueR11)
					&& actbuyingRateR11.equalsIgnoreCase(expbuyingRateR11) && actbuyingValueR11.equalsIgnoreCase(expbuyingValueR11)
					
					&& actsellingRateR12.equalsIgnoreCase(expsellingRateR12) && actsellingValueR12.equalsIgnoreCase(expsellingValueR12)
					&& actbuyingRateR12.equalsIgnoreCase(expbuyingRateR12) && actbuyingValueR12.equalsIgnoreCase(expbuyingValueR12)
					
					&& actsellingRateR13.equalsIgnoreCase(expsellingRateR13) && actsellingValueR13.equalsIgnoreCase(expsellingValueR13)
					&& actbuyingRateR13.equalsIgnoreCase(expbuyingRateR13) && actbuyingValueR13.equalsIgnoreCase(expbuyingValueR13)
					
					&& actsellingRateR14.equalsIgnoreCase(expsellingRateR14) && actsellingValueR14.equalsIgnoreCase(expsellingValueR14)
					&& actbuyingRateR14.equalsIgnoreCase(expbuyingRateR14) && actbuyingValueR14.equalsIgnoreCase(expbuyingValueR14))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_closeBtn));
				iq_closeBtn.click();
				
				Thread.sleep(2000);

				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(iq_closeBtn));
				iq_closeBtn.click();
				
				Thread.sleep(2000);

				return false;
			}
		}
		
	
		
		
		
		
		
		
		// Stock Ledger

		public boolean checkStockLedgerReportBRCOGSITEM() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockLedger));
			stockLedger.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			Thread.sleep(2000);
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("BR COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					Thread.sleep(2000);
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM, , , , , , , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Opening Balance, 288.00, , , , 288.00, , , 198.00, 0.69, , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[NDT55:1, , , 36.00, 0.71, 252.00, , 25.50, 172.50, 0.68, , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[NDT55:2, , , 108.00, 0.71, 144.00, , 76.50, 96.00, 0.67, , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[NDT52:1, 1,200.00, 0.88, , , 1,344.00, 1,050.00, , 1,146.00, 0.85, , , ]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[ExeStk:1, 36.00, 0.83, , , 1,380.00, 30.00, , 1,176.00, 0.85, , , ]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[NDT55:3, , , 36.00, 0.83, 1,344.00, , 30.00, 1,146.00, 0.85, , , ]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[StkTrf:2, , , 24.00, 0.71, 1,320.00, , 17.00, 1,129.00, 0.86, , , ]";
			
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[StkTrf:2, 24.00, 0.71, , , 1,344.00, 17.00, , 1,146.00, 0.85, , , ]";
			
			
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[NDT55:5, , , 24.00, 0.71, 1,320.00, , 17.00, 1,129.00, 0.86, , , ]";
			
			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[StkTrf:3, , , 96.00, 0.71, 1,224.00, , 68.00, 1,061.00, 0.87, , , ]";
			
			
			
			int reportsRow12ListCount = reportsRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = "[StkTrf:3, , , 24.00, 0.46, 1,200.00, , 11.00, 1,050.00, 0.88, , , ]";
			
			
			
			int reportsRow13ListCount = reportsRow13List.size();
			ArrayList<String> reportsRow13ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow13ListCount;i++)
			{
				String data = reportsRow13List.get(i).getText();
				reportsRow13ListArray.add(data);
			}
			String actRow13List = reportsRow13ListArray.toString();
			String expRow13List = "[StkTrf:3, , , 1,200.00, 0.88, , , 1,050.00, , , , , ]";
			
			
			
			int reportsRow14ListCount = reportsRow14List.size();
			ArrayList<String> reportsRow14ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow14ListCount;i++)
			{
				String data = reportsRow14List.get(i).getText();
				reportsRow14ListArray.add(data);
			}
			String actRow14List = reportsRow14ListArray.toString();
			String expRow14List = "[StkTrf:3, 96.00, 0.71, , , 96.00, 68.00, , 68.00, 0.71, , , ]";
			
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportsP2Row1ListCount = reportsRow1List.size();
			ArrayList<String> reportsP2Row1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsP2Row1ListArray.add(data);
			}
			String actP2Row1List = reportsP2Row1ListArray.toString();
			String expP2Row1List = "[StkTrf:3, 24.00, 0.46, , , 120.00, 11.00, , 79.00, 0.66, , , ]";
			
			
			
			int reportsP2Row2ListCount = reportsRow2List.size();
			ArrayList<String> reportsP2Row2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsP2Row2ListArray.add(data);
			}
			String actP2Row2List = reportsP2Row2ListArray.toString();
			String expP2Row2List = "[StkTrf:3, 1,200.00, 0.88, , , 1,320.00, 1,050.00, , 1,129.00, 0.86, , , ]";
			
			
			
			int reportsP2Row3ListCount = reportsRow3List.size();
			ArrayList<String> reportsP2Row3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsP2Row3ListArray.add(data);
			}
			String actP2Row3List = reportsP2Row3ListArray.toString();
			String expP2Row3List = "[NDT55:6, , , 96.00, 0.71, 1,224.00, , 68.00, 1,061.00, 0.87, , , ]";
			
			
			
			int reportsP2Row4ListCount = reportsRow4List.size();
			ArrayList<String> reportsP2Row4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsP2Row4ListArray.add(data);
			}
			String actP2Row4List = reportsP2Row4ListArray.toString();
			String expP2Row4List = "[NDT55:6, , , 24.00, 0.46, 1,200.00, , 11.00, 1,050.00, 0.88, , , ]";
			
			
			
			int reportsP2Row5ListCount = reportsRow5List.size();
			ArrayList<String> reportsP2Row5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsP2Row5ListArray.add(data);
			}
			String actP2Row5List = reportsP2Row5ListArray.toString();
			String expP2Row5List = "[NDT55:6, , , 1,200.00, 0.88, , , 1,050.00, , , , , ]";
			
			
			
			int reportsP2Row6ListCount = reportsRow6List.size();
			ArrayList<String> reportsP2Row6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsP2Row6ListArray.add(data);
			}
			String actP2Row6List = reportsP2Row6ListArray.toString();
			String expP2Row6List = "[SalRet:1, 96.00, 0.71, , , 96.00, 68.16, , 68.16, 0.71, , , ]";
			
			
			
			int reportsP2Row7ListCount = reportsRow7List.size();
			ArrayList<String> reportsP2Row7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsP2Row7ListArray.add(data);
			}
			String actP2Row7List = reportsP2Row7ListArray.toString();
			String expP2Row7List = "[SalRet:1, 24.00, 0.46, , , 120.00, 11.04, , 79.20, 0.66, , , ]";
			
			
			
			int reportsP2Row8ListCount = reportsRow8List.size();
			ArrayList<String> reportsP2Row8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsP2Row8ListArray.add(data);
			}
			String actP2Row8List = reportsP2Row8ListArray.toString();
			String expP2Row8List = "[SalRet:1, 1,200.00, 0.88, , , 1,320.00, 1,056.00, , 1,135.20, 0.86, , , ]";
			
			
			
			int reportsP2Row9ListCount = reportsRow9List.size();
			ArrayList<String> reportsP2Row9ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsP2Row9ListArray.add(data);
			}
			String actP2Row9List = reportsP2Row9ListArray.toString();
			String expP2Row9List = "[NDT55:7, , , 96.00, 0.71, 1,224.00, , 68.00, 1,067.20, 0.87, , , ]";
			
			
			
			int reportsP2Row10ListCount = reportsRow10List.size();
			ArrayList<String> reportsP2Row10ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsP2Row10ListArray.add(data);
			}
			String actP2Row10List = reportsP2Row10ListArray.toString();
			String expP2Row10List = "[NDT55:7, , , 24.00, 0.46, 1,200.00, , 11.00, 1,056.20, 0.88, , , ]";
			
			
			
			int reportsP2Row11ListCount = reportsRow11List.size();
			ArrayList<String> reportsP2Row11ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsP2Row11ListArray.add(data);
			}
			String actP2Row11List = reportsP2Row11ListArray.toString();
			String expP2Row11List = "[NDT55:7, , , 1,000.00, 0.88, 200.00, , 875.00, 181.20, 0.91, , , ]";
			
			
			
			int reportsP2Row12ListCount = reportsRow12List.size();
			ArrayList<String> reportsP2Row12ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsP2Row12ListArray.add(data);
			}
			String actP2Row12List = reportsP2Row12ListArray.toString();
			String expP2Row12List = "[NDT52:2, 600.00, 0.09, , , 800.00, 52.50, , 233.70, 0.29, , , ]";
			
			
			
			int reportsP2Row13ListCount = reportsRow13List.size();
			ArrayList<String> reportsP2Row13ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row13ListCount;i++)
			{
				String data = reportsRow13List.get(i).getText();
				reportsP2Row13ListArray.add(data);
			}
			String actP2Row13List = reportsP2Row13ListArray.toString();
			String expP2Row13List = "[NDT52:3, 360.00, 0.88, , , 1,160.00, 315.00, , 548.70, 0.47, , , ]";
			
			
			
			int reportsP2Row14ListCount = reportsRow14List.size();
			ArrayList<String> reportsP2Row14ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row14ListCount;i++)
			{
				String data = reportsRow14List.get(i).getText();
				reportsP2Row14ListArray.add(data);
			}
			String actP2Row14List = reportsRow14ListArray.toString();
			String expP2Row14List = "[StkTrf:3, 96.00, 0.71, , , 96.00, 68.00, , 68.00, 0.71, , , ]";
			
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportsP3Row1ListCount = reportsRow1List.size();
			ArrayList<String> reportsP3Row1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP3Row1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsP3Row1ListArray.add(data);
			}
			String actP3Row1List = reportsP3Row1ListArray.toString();
			String expP3Row1List = "[NDT55:8, , , 600.00, 0.09, 200.00, , 52.50, 181.20, 0.91, , , ]";
			
			
			
			int reportsP3Row2ListCount = reportsRow2List.size();
			ArrayList<String> reportsP3Row2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP3Row2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsP3Row2ListArray.add(data);
			}
			String actP3Row2List = reportsP3Row2ListArray.toString();
			String expP3Row2List = "[, 5,148.00, 7.47, 4,948.00, 10.75, 200.00, 3,728.70, 3,745.50, 181.20, 19.72, , , ]";
			
			
			System.out.println("************************************checkWACOGSITEMStockLedgerReport********************************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			System.out.println(actRow13List);
			System.out.println(expRow13List);
			
			System.out.println(actRow14List);
			System.out.println(expRow14List);
			
			System.out.println(actP2Row1List);
			System.out.println(expP2Row1List);
			
			System.out.println(actP2Row2List);
			System.out.println(expP2Row2List);
			
			System.out.println(actP2Row3List);
			System.out.println(expP2Row3List);
			
			System.out.println(actP2Row4List);
			System.out.println(expP2Row4List);
			
			System.out.println(actP2Row5List);
			System.out.println(expP2Row5List);
			
			System.out.println(actP2Row6List);
			System.out.println(expP2Row6List);
			
			System.out.println(actP2Row7List);
			System.out.println(expP2Row7List);
			
			System.out.println(actP2Row8List);
			System.out.println(expP2Row8List);
			
			System.out.println(actP2Row9List);
			System.out.println(expP2Row9List);
			
			System.out.println(actP2Row10List);
			System.out.println(expP2Row10List);
			
			System.out.println(actP2Row11List);
			System.out.println(expP2Row11List);
			
			System.out.println(actP2Row12List);
			System.out.println(expP2Row12List);
			
			System.out.println(actP2Row13List);
			System.out.println(expP2Row13List);
			
			System.out.println(actP2Row14List);
			System.out.println(expP2Row14List);
			
			System.out.println(actP3Row1List);
			System.out.println(expP3Row1List);
			
			System.out.println(actP3Row2List);
			System.out.println(expP3Row2List);
			
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
				&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List) 
				&& actRow13List.equalsIgnoreCase(expRow13List) && actRow14List.equalsIgnoreCase(expRow14List) 
				
				&& actP2Row1List.equalsIgnoreCase(expP2Row1List) && actP2Row2List.equalsIgnoreCase(expP2Row2List) && actP2Row3List.equalsIgnoreCase(expP2Row3List) 
				&& actP2Row4List.equalsIgnoreCase(expP2Row4List) && actP2Row5List.equalsIgnoreCase(expP2Row5List) && actP2Row6List.equalsIgnoreCase(expP2Row6List) 
				&& actP2Row7List.equalsIgnoreCase(expP2Row7List) && actP2Row8List.equalsIgnoreCase(expP2Row8List) && actP2Row9List.equalsIgnoreCase(expP2Row9List) 
				&& actP2Row10List.equalsIgnoreCase(expP2Row10List) && actP2Row11List.equalsIgnoreCase(expP2Row11List) && actP2Row12List.equalsIgnoreCase(expP2Row12List) 
				&& actP2Row13List.equalsIgnoreCase(expP2Row13List) && actP2Row14List.equalsIgnoreCase(expP2Row14List)
				
				&& actP3Row1List.equalsIgnoreCase(expP3Row1List) && actP3Row2List.equalsIgnoreCase(expP3Row2List))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
			
		
		
		
		
		
		
		
		public boolean checkOpeningStockRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksRegister));
			openingStocksRegister.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 264.00, 8.50, 187.00]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[BR COGS ITEM, 24.00, 5.50, 11.00]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 288.00, 14.00, 198.00]";
			
			
			System.out.println("***************************checkOpenigStockRegisterReport*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}

		
		
		
		
		
		public boolean checkStockStatementReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockStatement));
			stockStatement.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}

			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM, , , , , ]";
			

			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[288.00, 4,860.00, 4,948.00, 200.00, 181.20]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[288.00, 4,860.00, 4,948.00, 200.00, 181.20]";
			
			
			System.out.println("***************************checkStockStatementReport*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}

		
		
		
		
		
		
		public boolean checkStockMovementReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockMovement));
			stockMovement.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			   
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actDefaultRow1List = reportsRow1ListArray.toString();
			String expDefaultRow1List = "[BR COGS ITEM, 288.00, 198.00, 4,860.00, 3,728.70, 4,948.00, 3,745.50, 200.00, 181.20, 0.91]";
							

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actDefaultRow2List = reportsRow2ListArray.toString();
			String expDefaultRow2List = "[288.00, 198.00, 4,860.00, 3,728.70, 4,948.00, 3,745.50, 200.00, 181.20, 0.91]";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
			report_CloseBtn.click();
			
	        Thread.sleep(2000);
	        
	        getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockMovementDropdown));
			
			Select sm=new Select(stockMovementDropdown);
			sm.selectByVisibleText("by Warehouse");	
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[HYDERABAD, , , , , , , , , ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[BR COGS ITEM, 288.00, 198.00, 2,196.00, 1,447.50, 2,484.00, 1,645.50, , , ]";
			
								
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Sub Total, 288.00, 198.00, 2,196.00, 1,447.50, 2,484.00, 1,645.50, , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[SECUNDERABAD, , , , , , , , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[BR COGS ITEM, , , 2,664.00, 2,281.20, 2,464.00, 2,100.00, 200.00, 181.20, 0.91]";
			
								
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Sub Total, , , 2,664.00, 2,281.20, 2,464.00, 2,100.00, 200.00, 181.20, 0.91]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[Grand Total, 288.00, 198.00, 4,860.00, 3,728.70, 4,948.00, 454.50, 200.00, 181.20, 0.91]";

			
			System.out.println("*********************************checkStockMovementReport*****************************************");
			System.out.println(actDefaultRow1List);
			System.out.println(expDefaultRow1List);
			System.out.println(actDefaultRow2List);
			System.out.println(expDefaultRow2List);
			
			System.out.println("********************************checkStockMovementReportOnSelectingStockMoventAsByWareHouse***********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			Thread.sleep(2000);	
			
			if(actDefaultRow1List.equalsIgnoreCase(expDefaultRow1List) && actDefaultRow2List.equalsIgnoreCase(expDefaultRow2List)
				&& actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		// Multi Level Stock Movement
		
		public boolean checkMultiLevelStockMovementReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(multiLevelStockMovement));
			multiLevelStockMovement.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			   
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));

				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					break;
				}
			}
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 288.00, 198.00, 4,860.00, 3,728.70, 4,948.00, 3,745.50, 200.00, 181.20, 0.91]";
								    									

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, 288.00, 198.00, 4,860.00, 3,728.70, 4,948.00, 3,745.50, 200.00, 181.20, 0.91]";
			
			System.out.println("*********************************checkMultiLevelStockMovementReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Virtual Stock Analysis
		
		public boolean checkVirtualStockAnalysisReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualStockAnalysis));
			virtualStockAnalysis.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			   
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));

				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 200.00, , , , 200.00]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, 200.00, , , , 200.00]";
			
			System.out.println("*********************************checkVirtualStockAnalysisReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		// Stock Valuation 
		
		public boolean checkStockValuationReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockValuation));
			stockValuation.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				String actname=name.getText();

				if(actname.equalsIgnoreCase("BR COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, BR COGS ITEM, BR COGS ITEM, 200.00, 181.20, 0.91, ]";
						

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Total, , , 200.00, 181.20, 0.91, ]";
			
			System.out.println("*********************************checkStockValuationReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);				
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);		
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Stock report By Tag
		
		public boolean checkStockReportbyTagReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReportByTag));
			stockReportByTag.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, BR COGS ITEM, 200.00, 0.91, 181.20, 200.00, 0.91, 181.20, , , , , , , , , , , , , , , ]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, , 200.00, 0.91, 181.20, 200.00, 0.91, 181.20, , , , , , , , , , , , , , , ]";
			
			System.out.println("*********************************checkStockReportByTagReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// ABC Analysis
		
		public boolean checkABCAnalysisReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(abcAnalysis));
			abcAnalysis.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";

			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[A Product, , ]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[BR COGS ITEM, 200.00, 181.20]";
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Total, 200.00, 181.20]";
			
			System.out.println("*********************************checkAbcAnalysisReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		// Stock Analysis By Batch 

		public boolean checkStockAnalysisByBatchReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByBatch));
			stockAnalysisByBatch.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";

			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}

			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BATCH#PVAT1, 200.00, 0.91, 181.00]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, 200.00, 0.91, 181.00]";
			
			
			System.out.println("*********************************checkStockAnalysisByBatchReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		// Stock Analysis By RMA
		
		public boolean checkStockAnalysisByRmaReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByRMA));
			stockAnalysisByRMA.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("BR COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					Thread.sleep(2000);
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*********************************checkStockAnalysisByRmaReport*****************************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+" Value Expected "+expReportsTable);
			
			Thread.sleep(2000);
			
			if(actReportsTable==expReportsTable)
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		// Stock Details By Bins
		
		public boolean checkStockDetailsByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsReportMenu));
			binsReportMenu.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockDetailsByBins));
			stockDetailsByBins.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*********************************checkStockDetailsByBinsReport*****************************************");
			
			System.out.println("Reports Table isEmpty   : "+actReportsTable   +" Value Expected : "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Stock Balance By Bins

		public boolean checkStockBalanaceByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsReportMenu));
			binsReportMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalancesByBins));
			stockBalancesByBins.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			

			System.out.println("*********************************checkStockBalanceByBinsReport*****************************************");
			
			System.out.println("Reports Table isEmpty    : "+actReportsTable   +" Value Expected : "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		//Stock Balance By Item By Bins
		
		public boolean checkStockBalancesByItemByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsReportMenu));
			binsReportMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalancesByItemByBins));
			stockBalancesByItemByBins.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*********************************checkStockBalancesByItemByBinsReport*****************************************");
			
			System.out.println("Reports Table isEmpty  : "+actReportsTable+" Value Expected: "+expReportsTable);
			
			
			if(actReportsTable==expReportsTable)
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Expired Stock By Bins

		public boolean checkExpiredStockByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(binsReportMenu));
			binsReportMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(expiredStockByBins));
			expiredStockByBins.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;

			System.out.println("report_Body : "+actReportsTable+" Value Expected : "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Stock Balance By WareHouse

		public boolean checkStockBalanceByWarehouseReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalanceByWarehouse));
			stockBalanceByWarehouse.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//*[@id='LandingGridBody']/tr["+i+"]/td[10]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("SECUNDERABAD"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			
			// Actual
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			String actWarehouse = sl_1stRow1stCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_2ndRow1stCol));
			String actItem = sl_2ndRow1stCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_2ndRow4thCol));
			String actQuantity = sl_2ndRow4thCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_2ndRow6thCol));
			String actNetQuantity = sl_2ndRow6thCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_3rdRow4thCol));
			String actTotalQuantity = sl_3rdRow4thCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_2ndRow6thCol));
			String actTotalNetQuantity = sl_2ndRow6thCol.getText();
			
			
			// Expected
			
			String expWarehouse = "SECUNDERABAD SECUNDERABAD";
			String expItem = "BR COGS ITEM";
			String expQuantity = "200.00";
			String expNetQuantity = "200.00";
			String expTotalQuantity = "200.00";
			String expTotalNetQuantity = "200.00";
			
			System.out.println("*********************************checkStockBalanceByWarehouseReport*****************************************");
			
			System.out.println("Warehouse          : "+actWarehouse         +"  Value Expected  "+expWarehouse);
			System.out.println("Item               : "+actItem              +"  Value Expected  "+expItem);
			System.out.println("Quantity           : "+actQuantity          +"  Value Expected  "+expQuantity);
			System.out.println("Net Quantity       : "+actNetQuantity       +"  Value Expected  "+expNetQuantity);
			System.out.println("Total Quantity     : "+actTotalQuantity     +"  Value Expected  "+expTotalQuantity);
			System.out.println("Total Net Quantity : "+actTotalNetQuantity  +"  Value Expected  "+expTotalNetQuantity);
			
			/*int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[SECUNDERABAD SECUNDERABAD, , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[WA COGS ITEM, , , 27.00, , 27.00]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , , 27.00, , 27.00]";*/
			
			if(actWarehouse.equalsIgnoreCase(expWarehouse) && actItem.equalsIgnoreCase(expItem) && actQuantity.equalsIgnoreCase(expQuantity)
				 && actNetQuantity.equalsIgnoreCase(expNetQuantity) && actTotalQuantity.equalsIgnoreCase(expTotalQuantity)
				 && actTotalNetQuantity.equalsIgnoreCase(expTotalNetQuantity))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
	
		
		
		
		
		
		
		
		public boolean checkStockAgeingAnalysisReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysis));
			ageingAnalysis.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 200.00, 181.20, 200.00, 181.20, , , , , , , , , , , , , , , ]";
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Total, 200.00, 181.20, 200.00, 181.20, , , , , , , , , , , , , , , ]";
			
			
			System.out.println("*****************************************checkStockAgeingAnalysisReports***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Ageing Analysis By Batch
		
		public boolean checkAgeingAnalysisByBatchReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysisByBatch));
			ageingAnalysisByBatch.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount-2;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM, , , , , , , , , , , , , , , , , , ]";
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount-2;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[BATCH#PVAT1, 200.00, 175.50, 200.00, 175.50, , , , , , , , , , , , , , ]";
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount-2;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, 200.00, 175.50, 200.00, 175.50, , , , , , , , , , , , , , ]";
			
			System.out.println("*****************************************checkAgeingAnalysisByBatchReports***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Ageing Analysis By Rma
		
		public boolean checkAgeingAnalysisByRmaReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysisByRMA));
			ageingAnalysisByRMA.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);

			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*****************************************checkAgeingAnalysisByRMAReports***************************************");

			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}

		
		
		
		
		
		
		// Ageing By Item By Bins

		public boolean checkAgeingByItemByBinsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingByItemByBins));
			ageingByItemByBins.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*****************************************checkAgeingByItemByBinsReports***************************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Reorder Report

		public boolean checkReorderReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reorderReport));
			reorderReport.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*********************************checkReorderReportReport*****************************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Fast Moving Item (XYZ Analysis)

		public boolean checkFastMovingItemsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fastMovingItem));
			fastMovingItem.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, BR COGS ITEM, BR COGS ITEM, 200.00, 181.20, 0.91, SECUNDERABAD]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , 200.00, 181.20, 0.91, ]";
			
			System.out.println("*********************************checkFastMovingItemsReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Slow Moving Item

		public boolean checkSlowMovingItemsReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(slowMovingItem));
			slowMovingItem.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, BR COGS ITEM, BR COGS ITEM, 200.00, 181.20, 0.91, SECUNDERABAD]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , 200.00, 181.20, 0.91, ]";
			
			
			System.out.println("*********************************checkSlowMovingItemsReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		// PeakAndLowBalances
		
		public boolean checkPeakAndLowBalancesReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakORLowBalances));
			peakORLowBalances.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
			String actItem = sl_1stRow1stCol.getText();
			String expItem = "BR COGS ITEM"; 
			
			boolean actNegativeBalanceDate = sl_1stRow2ndCol.getText().isEmpty();
			boolean expNegativeBalanceDate = true;
			
			boolean actNegativeBalance = sl_1stRow3rdCol.getText().isEmpty();
			boolean expNegativeBalance = true;

			String actLowestPositiveBalance = sl_1stRow5thCol.getText();
			String expLowestPositiveBalance = "200.00";
			
			String actHighestBalance = sl_1stRow7thCol.getText();
			String expHighestBalance = "288.00";
			
			boolean actTotalNegativeBalanceDate = sl_2ndRow2ndCol.getText().isEmpty();
			boolean expTotalNegativeBalanceDate = true;
			
			boolean actTotalNegativeBalance = sl_2ndRow3rdCol.getText().isEmpty();
			boolean expTotalNegativeBalance = true;
			
			boolean actTotalLowestPositiveBalanceDate = sl_2ndRow4thCol.getText().isEmpty();
			boolean expTotalLowestPositiveBalanceDate = true;
			
			String actTotalLowestPositiveBalance = sl_2ndRow5thCol.getText();
			String expTotalLowestPositiveBalance = "200.00";
			
			boolean actTotalHighestBalanceDate = sl_2ndRow6thCol.getText().isEmpty();
			boolean expTotalHighestBalanceDate = true;
			
			String actTotalHighestBalance = sl_2ndRow7thCol.getText();
			String expTotalHighestBalance = "288.00";
			
			
			boolean actResult = actNegativeBalanceDate==expNegativeBalanceDate && actNegativeBalance==expNegativeBalance 
								&& actTotalNegativeBalanceDate==expTotalNegativeBalanceDate && actTotalNegativeBalance==expTotalNegativeBalance
								&& actTotalLowestPositiveBalanceDate==expTotalLowestPositiveBalanceDate && actTotalHighestBalanceDate==expTotalHighestBalanceDate;
			
			boolean expResult = true;
			
			System.out.println("*********************************checkPeakAndLowBalancesReport*****************************************");
			
			System.out.println("Item : "+actItem+"  Value Expected  "+expItem);
			System.out.println("LowestPositiveBalance : "+actLowestPositiveBalance+"  Value Expected  "+expLowestPositiveBalance);
			System.out.println("HighestBalance : "+actHighestBalance+"  Value Expected  "+expHighestBalance);
			System.out.println("TotalLowestPositiveBalance : "+actTotalLowestPositiveBalance+"  Value Expected  "+expTotalLowestPositiveBalance);
			System.out.println("TotalHighestBalance : "+actTotalHighestBalance+"  Value Expected  "+expTotalHighestBalance);
			System.out.println("Empty cells : "+actResult+"  Value Expected  "+expResult);
			if(actItem.equalsIgnoreCase(expItem) && actLowestPositiveBalance.equalsIgnoreCase(expLowestPositiveBalance)
				&& actHighestBalance.equalsIgnoreCase(expHighestBalance) && actTotalLowestPositiveBalance.equalsIgnoreCase(expTotalLowestPositiveBalance)
				&& actTotalHighestBalance.equalsIgnoreCase(expTotalHighestBalance) && actResult==expResult)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkBestSellingItemReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bestSellingItem));
			bestSellingItem.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includeAllVoucherChkBox));
			includeAllVoucherChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 3,628.00, 702.90]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 3,628.00, 702.90]";
			
			System.out.println("*********************************checkBestSellingItemReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Stock Transfer Report

		public boolean checkStockTransferRegisterReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferReport));
			stockTransferReport.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM, , , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[, HYDERABAD, 1,344.00, , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[, , 1,344.00, , , , , , ]";
			
			
			System.out.println("*********************************checkStockTransferRegisterReport*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Stock reservation register

		public boolean checkStockReservationReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationReport));
			stockReservationReport.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*********************************checkStockReservationReportReport*****************************************");

			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		
		// Transaction Type wise Stock report
		
		public boolean checkTransTypeWiseStockReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionTypeWiseStockReport));
			transactionTypeWiseStockReport.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 200.00, 181.20, 0.91, , , 288.00, 198.00, , , 2,160.00, 1,417.50, , , , , , , , , , , , , , , "
								 + "1,320.00, 1,135.20, , , 36.00, 30.00, , , , , , , , , , , , , , , 3,244.00, 2,284.50, , , , , 360.00, 315.00]";
			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 200.00, 181.20, 0.91, , , 288.00, 198.00, , , 2,160.00, 1,417.50, , , , , , , , , , , , , , , "
								 + "1,320.00, 1,135.20, , , 36.00, 30.00, , , , , , , , , , , , , , , 3,244.00, 2,284.50, , , , , 360.00, 315.00]";
			
			
			System.out.println("*********************************checkTransTypeWiseStockReports*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		
		
		
		
		
		
		// Actual Consumption Report

		public boolean checkActualConsumptionReports() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(actualConsumptionReport));
			actualConsumptionReport.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 288.00, 198.00, , , 2,160.00, 1,417.50, 36.00, 30.00, 1,320.00, 1,135.20, , , 3,244.00, "
								  + "74,10,918.00, , , 360.00, 1,13,400.00, , , 200.00, 37,607.69, 75,21,537.30]";
			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 288.00, 198.00, , , 2,160.00, 1,417.50, 36.00, 30.00, 1,320.00, 1,135.20, , , 3,244.00, "
								  + "74,10,918.00, , , 360.00, 1,13,400.00, , , 200.00, 37,607.69, 75,21,537.30]";
			
			System.out.println("*********************************checkActualConsumptionReports*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				Thread.sleep(2000);
				return false;
			}
		}
		

		
		
		
		
		
		
		
		
		// Customization Reports
		
		public boolean checkStockLedgerReportWithCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockLedger));
			stockLedger.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("BR COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();

					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(movedAccountOnlyChkBox));
			movedAccountOnlyChkBox.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(printAccountIndexChkBox));
			printAccountIndexChkBox.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransactionExpansion));
			osr_customizeFieldsTransactionExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsExpansion));
			osr_customizeFieldsTransExtraFieldsExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsWarehouseExpansion));
			osr_customizeFieldsTransExtraFieldsWarehouseExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsWarehouseName));
			getAction().doubleClick(osr_customizeFieldsTransExtraFieldsWarehouseName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM, , , , , , , , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Opening Balance, 288.00, , , , 288.00, , , 198.00, 0.69, , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[NDT55:1, , , 36.00, 0.71, 252.00, , 25.50, 172.50, 0.68, , , , HYDERABAD]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[NDT55:2, , , 108.00, 0.71, 144.00, , 76.50, 96.00, 0.67, , , , HYDERABAD]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[NDT52:1, 1,200.00, 0.88, , , 1,344.00, 1,050.00, , 1,146.00, 0.85, , , , HYDERABAD]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[ExeStk:1, 36.00, 0.83, , , 1,380.00, 30.00, , 1,176.00, 0.85, , , , HYDERABAD]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[NDT55:3, , , 36.00, 0.83, 1,344.00, , 30.00, 1,146.00, 0.85, , , , HYDERABAD]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[StkTrf:2, , , 24.00, 0.71, 1,320.00, , 17.00, 1,129.00, 0.86, , , , HYDERABAD]";
			
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[StkTrf:2, 24.00, 0.71, , , 1,344.00, 17.00, , 1,146.00, 0.85, , , , SECUNDERABAD]";
			
			
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[NDT55:5, , , 24.00, 0.71, 1,320.00, , 17.00, 1,129.00, 0.86, , , , SECUNDERABAD]";
			
			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[StkTrf:3, , , 96.00, 0.71, 1,224.00, , 68.00, 1,061.00, 0.87, , , , HYDERABAD]";
			
			
			
			int reportsRow12ListCount = reportsRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = "[StkTrf:3, , , 24.00, 0.46, 1,200.00, , 11.00, 1,050.00, 0.88, , , , HYDERABAD]";
			
			
			
			int reportsRow13ListCount = reportsRow13List.size();
			ArrayList<String> reportsRow13ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow13ListCount;i++)
			{
				String data = reportsRow13List.get(i).getText();
				reportsRow13ListArray.add(data);
			}
			String actRow13List = reportsRow13ListArray.toString();
			String expRow13List = "[StkTrf:3, , , 1,200.00, 0.88, , , 1,050.00, , , , , , HYDERABAD]";
			
			
			
			int reportsRow14ListCount = reportsRow14List.size();
			ArrayList<String> reportsRow14ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow14ListCount;i++)
			{
				String data = reportsRow14List.get(i).getText();
				reportsRow14ListArray.add(data);
			}
			String actRow14List = reportsRow14ListArray.toString();
			String expRow14List = "[StkTrf:3, 96.00, 0.71, , , 96.00, 68.00, , 68.00, 0.71, , , , SECUNDERABAD]";
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportsP2Row1ListCount = reportsRow1List.size();
			ArrayList<String> reportsP2Row1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsP2Row1ListArray.add(data);
			}
			String actP2Row1List = reportsP2Row1ListArray.toString();
			String expP2Row1List = "[StkTrf:3, 24.00, 0.46, , , 120.00, 11.00, , 79.00, 0.66, , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row2ListCount = reportsRow2List.size();
			ArrayList<String> reportsP2Row2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsP2Row2ListArray.add(data);
			}
			String actP2Row2List = reportsP2Row2ListArray.toString();
			String expP2Row2List = "[StkTrf:3, 1,200.00, 0.88, , , 1,320.00, 1,050.00, , 1,129.00, 0.86, , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row3ListCount = reportsRow3List.size();
			ArrayList<String> reportsP2Row3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsP2Row3ListArray.add(data);
			}
			String actP2Row3List = reportsP2Row3ListArray.toString();
			String expP2Row3List = "[NDT55:6, , , 96.00, 0.71, 1,224.00, , 68.00, 1,061.00, 0.87, , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row4ListCount = reportsRow4List.size();
			ArrayList<String> reportsP2Row4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsP2Row4ListArray.add(data);
			}
			String actP2Row4List = reportsP2Row4ListArray.toString();
			String expP2Row4List = "[NDT55:6, , , 24.00, 0.46, 1,200.00, , 11.00, 1,050.00, 0.88, , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row5ListCount = reportsRow5List.size();
			ArrayList<String> reportsP2Row5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsP2Row5ListArray.add(data);
			}
			String actP2Row5List = reportsP2Row5ListArray.toString();
			String expP2Row5List = "[NDT55:6, , , 1,200.00, 0.88, , , 1,050.00, , , , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row6ListCount = reportsRow6List.size();
			ArrayList<String> reportsP2Row6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsP2Row6ListArray.add(data);
			}
			String actP2Row6List = reportsP2Row6ListArray.toString();
			String expP2Row6List = "[SalRet:1, 96.00, 0.71, , , 96.00, 68.16, , 68.16, 0.71, , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row7ListCount = reportsRow7List.size();
			ArrayList<String> reportsP2Row7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsP2Row7ListArray.add(data);
			}
			String actP2Row7List = reportsP2Row7ListArray.toString();
			String expP2Row7List = "[SalRet:1, 24.00, 0.46, , , 120.00, 11.04, , 79.20, 0.66, , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row8ListCount = reportsRow8List.size();
			ArrayList<String> reportsP2Row8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsP2Row8ListArray.add(data);
			}
			String actP2Row8List = reportsP2Row8ListArray.toString();
			String expP2Row8List = "[SalRet:1, 1,200.00, 0.88, , , 1,320.00, 1,056.00, , 1,135.20, 0.86, , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row9ListCount = reportsRow9List.size();
			ArrayList<String> reportsP2Row9ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsP2Row9ListArray.add(data);
			}
			String actP2Row9List = reportsP2Row9ListArray.toString();
			String expP2Row9List = "[NDT55:7, , , 96.00, 0.71, 1,224.00, , 68.00, 1,067.20, 0.87, , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row10ListCount = reportsRow10List.size();
			ArrayList<String> reportsP2Row10ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsP2Row10ListArray.add(data);
			}
			String actP2Row10List = reportsP2Row10ListArray.toString();
			String expP2Row10List = "[NDT55:7, , , 24.00, 0.46, 1,200.00, , 11.00, 1,056.20, 0.88, , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row11ListCount = reportsRow11List.size();
			ArrayList<String> reportsP2Row11ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsP2Row11ListArray.add(data);
			}
			String actP2Row11List = reportsP2Row11ListArray.toString();
			String expP2Row11List = "[NDT55:7, , , 1,000.00, 0.88, 200.00, , 875.00, 181.20, 0.91, , , , SECUNDERABAD]";
			
			
			
			int reportsP2Row12ListCount = reportsRow12List.size();
			ArrayList<String> reportsP2Row12ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsP2Row12ListArray.add(data);
			}
			String actP2Row12List = reportsP2Row12ListArray.toString();
			String expP2Row12List = "[NDT52:2, 600.00, 0.09, , , 800.00, 52.50, , 233.70, 0.29, , , , HYDERABAD]";
			
			
			
			int reportsP2Row13ListCount = reportsRow13List.size();
			ArrayList<String> reportsP2Row13ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row13ListCount;i++)
			{
				String data = reportsRow13List.get(i).getText();
				reportsP2Row13ListArray.add(data);
			}
			String actP2Row13List = reportsP2Row13ListArray.toString();
			String expP2Row13List = "[NDT52:3, 360.00, 0.88, , , 1,160.00, 315.00, , 548.70, 0.47, , , , HYDERABAD]";
			
			
			
			int reportsP2Row14ListCount = reportsRow14List.size();
			ArrayList<String> reportsP2Row14ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row14ListCount;i++)
			{
				String data = reportsRow14List.get(i).getText();
				reportsP2Row14ListArray.add(data);
			}
			String actP2Row14List = reportsRow14ListArray.toString();
			String expP2Row14List = "[StkTrf:3, 96.00, 0.71, , , 96.00, 68.00, , 68.00, 0.71, , , , SECUNDERABAD]";
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportsP3Row1ListCount = reportsRow1List.size();
			ArrayList<String> reportsP3Row1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP3Row1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsP3Row1ListArray.add(data);
			}
			String actP3Row1List = reportsP3Row1ListArray.toString();
			String expP3Row1List = "[NDT55:8, , , 600.00, 0.09, 200.00, , 52.50, 181.20, 0.91, , , , HYDERABAD]";
			
			
			
			int reportsP3Row2ListCount = reportsRow2List.size();
			ArrayList<String> reportsP3Row2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP3Row2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsP3Row2ListArray.add(data);
			}
			String actP3Row2List = reportsP3Row2ListArray.toString();
			String expP3Row2List = "[, 5,148.00, 7.47, 4,948.00, 10.75, 200.00, 3,728.70, 3,745.50, 181.20, 19.72, , , , ]";
			
			
			System.out.println("************************************checkStockLedgerReportWithCustomization********************************************");
		
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			System.out.println(actRow13List);
			System.out.println(expRow13List);
			
			System.out.println(actRow14List);
			System.out.println(expRow14List);
			
			System.out.println(actP2Row1List);
			System.out.println(expP2Row1List);
			
			System.out.println(actP2Row2List);
			System.out.println(expP2Row2List);
			
			System.out.println(actP2Row3List);
			System.out.println(expP2Row3List);
			
			System.out.println(actP2Row4List);
			System.out.println(expP2Row4List);
			
			System.out.println(actP2Row5List);
			System.out.println(expP2Row5List);
			
			System.out.println(actP2Row6List);
			System.out.println(expP2Row6List);
			
			System.out.println(actP2Row7List);
			System.out.println(expP2Row7List);
			
			System.out.println(actP2Row8List);
			System.out.println(expP2Row8List);
			
			System.out.println(actP2Row9List);
			System.out.println(expP2Row9List);
			
			System.out.println(actP2Row10List);
			System.out.println(expP2Row10List);
			
			System.out.println(actP2Row11List);
			System.out.println(expP2Row11List);
			
			System.out.println(actP2Row12List);
			System.out.println(expP2Row12List);
			
			System.out.println(actP2Row13List);
			System.out.println(expP2Row13List);
			
			System.out.println(actP2Row14List);
			System.out.println(expP2Row14List);
			
			System.out.println(actP3Row1List);
			System.out.println(expP3Row1List);
			
			System.out.println(actP3Row2List);
			System.out.println(expP3Row2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
				&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List) 
				&& actRow13List.equalsIgnoreCase(expRow13List) && actRow14List.equalsIgnoreCase(expRow14List) 
				
				&& actP2Row1List.equalsIgnoreCase(expP2Row1List) && actP2Row2List.equalsIgnoreCase(expP2Row2List) && actP2Row3List.equalsIgnoreCase(expP2Row3List) 
				&& actP2Row4List.equalsIgnoreCase(expP2Row4List) && actP2Row5List.equalsIgnoreCase(expP2Row5List) && actP2Row6List.equalsIgnoreCase(expP2Row6List) 
				&& actP2Row7List.equalsIgnoreCase(expP2Row7List) && actP2Row8List.equalsIgnoreCase(expP2Row8List) && actP2Row9List.equalsIgnoreCase(expP2Row9List) 
				&& actP2Row10List.equalsIgnoreCase(expP2Row10List) && actP2Row11List.equalsIgnoreCase(expP2Row11List) && actP2Row12List.equalsIgnoreCase(expP2Row12List) 
				&& actP2Row13List.equalsIgnoreCase(expP2Row13List) && actP2Row14List.equalsIgnoreCase(expP2Row14List)
				
				&& actP3Row1List.equalsIgnoreCase(expP3Row1List) && actP3Row2List.equalsIgnoreCase(expP3Row2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		
			
			
			
			
		
		
		public boolean checkStockLedgerReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_WarehouseExpandBtn));
			reports_Filter_Customize_WarehouseExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_WarehouseNameChkBox));
			
			if (reports_Filter_Customize_WarehouseNameChkBox.isSelected()==false) 
			{
				reports_Filter_Customize_WarehouseNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_DefaultFilterTxt));
			reports_DefaultFilterTxt.click();
			reports_DefaultFilterTxt.sendKeys("Hyderabad");
			
			Thread.sleep(3000);
			
			reports_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM, , , , , , , , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Opening Balance, 288.00, , , , 288.00, , , 198.00, 0.69, , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[NDT55:1, , , 36.00, 0.71, 252.00, , 25.50, 172.50, 0.68, , , , HYDERABAD]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[NDT55:2, , , 108.00, 0.71, 144.00, , 76.50, 96.00, 0.67, , , , HYDERABAD]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[NDT52:1, 1,200.00, 0.88, , , 1,344.00, 1,050.00, , 1,146.00, 0.85, , , , HYDERABAD]";
			
			
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[ExeStk:1, 36.00, 0.83, , , 1,380.00, 30.00, , 1,176.00, 0.85, , , , HYDERABAD]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[NDT55:3, , , 36.00, 0.83, 1,344.00, , 30.00, 1,146.00, 0.85, , , , HYDERABAD]";
			
			
			
			int reportsRow8ListCount = reportsRow8List.size();
			ArrayList<String> reportsRow8ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow8ListCount;i++)
			{
				String data = reportsRow8List.get(i).getText();
				reportsRow8ListArray.add(data);
			}
			String actRow8List = reportsRow8ListArray.toString();
			String expRow8List = "[StkTrf:2, , , 24.00, 0.71, 1,320.00, , 17.00, 1,129.00, 0.86, , , , HYDERABAD]";
			
			
			
			int reportsRow9ListCount = reportsRow9List.size();
			ArrayList<String> reportsRow9ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow9ListCount;i++)
			{
				String data = reportsRow9List.get(i).getText();
				reportsRow9ListArray.add(data);
			}
			String actRow9List = reportsRow9ListArray.toString();
			String expRow9List = "[StkTrf:3, , , 96.00, 0.71, 1,224.00, , 68.00, 1,061.00, 0.87, , , , HYDERABAD]";
			
			
			
			int reportsRow10ListCount = reportsRow10List.size();
			ArrayList<String> reportsRow10ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow10ListCount;i++)
			{
				String data = reportsRow10List.get(i).getText();
				reportsRow10ListArray.add(data);
			}
			String actRow10List = reportsRow10ListArray.toString();
			String expRow10List = "[StkTrf:3, , , 24.00, 0.46, 1,200.00, , 11.00, 1,050.00, 0.88, , , , HYDERABAD]";
			
			
			
			int reportsRow11ListCount = reportsRow11List.size();
			ArrayList<String> reportsRow11ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow11ListCount;i++)
			{
				String data = reportsRow11List.get(i).getText();
				reportsRow11ListArray.add(data);
			}
			String actRow11List = reportsRow11ListArray.toString();
			String expRow11List = "[StkTrf:3, , , 1,200.00, 0.88, , , 1,050.00, , , , , , HYDERABAD]";
			
			
			
			int reportsRow12ListCount = reportsRow12List.size();
			ArrayList<String> reportsRow12ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow12ListCount;i++)
			{
				String data = reportsRow12List.get(i).getText();
				reportsRow12ListArray.add(data);
			}
			String actRow12List = reportsRow12ListArray.toString();
			String expRow12List = "[NDT52:2, 600.00, 0.09, , , 600.00, 52.50, , 52.50, 0.09, , , , HYDERABAD]";
			
			
			
			int reportsRow13ListCount = reportsRow13List.size();
			ArrayList<String> reportsRow13ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow13ListCount;i++)
			{
				String data = reportsRow13List.get(i).getText();
				reportsRow13ListArray.add(data);
			}
			String actRow13List = reportsRow13ListArray.toString();
			String expRow13List = "[NDT52:3, 360.00, 0.88, , , 960.00, 315.00, , 367.50, 0.38, , , , HYDERABAD]";
			
			
			
			int reportsRow14ListCount = reportsRow14List.size();
			ArrayList<String> reportsRow14ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow14ListCount;i++)
			{
				String data = reportsRow14List.get(i).getText();
				reportsRow14ListArray.add(data);
			}
			String actRow14List = reportsRow14ListArray.toString();
			String expRow14List = "[PurRet:1, , , 360.00, 0.88, 600.00, , 315.00, 52.50, 0.09, , , , HYDERABAD]";
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_NextBtn));
			report_NextBtn.click();
			
			Thread.sleep(2000);
			
			int reportsP2Row1ListCount = reportsRow1List.size();
			ArrayList<String> reportsP2Row1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsP2Row1ListArray.add(data);
			}
			String actP2Row1List = reportsP2Row1ListArray.toString();
			String expP2Row1List = "[NDT55:8, , , 600.00, 0.09, , , 52.50, , , , , , HYDERABAD]";
			
			
			
			int reportsP2Row2ListCount = reportsRow2List.size();
			ArrayList<String> reportsP2Row2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsP2Row2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsP2Row2ListArray.add(data);
			}
			String actP2Row2List = reportsP2Row2ListArray.toString();
			String expP2Row2List = "[, 2,484.00, 2.67, 2,484.00, 5.96, , 1,447.50, 1,645.50, , 7.75, , , , ]";
			
			
			System.out.println("***************************checkStockLedgerReportWithFilterOption*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			System.out.println(actRow8List);
			System.out.println(expRow8List);
			
			System.out.println(actRow9List);
			System.out.println(expRow9List);
			
			System.out.println(actRow10List);
			System.out.println(expRow10List);
			
			System.out.println(actRow11List);
			System.out.println(expRow11List);
			
			System.out.println(actRow12List);
			System.out.println(expRow12List);
			
			System.out.println(actRow13List);
			System.out.println(expRow13List);
			
			System.out.println(actRow14List);
			System.out.println(expRow14List);
			
			System.out.println(actP2Row1List);
			System.out.println(expP2Row1List);
			
			System.out.println(actP2Row2List);
			System.out.println(expP2Row2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List) && actRow8List.equalsIgnoreCase(expRow8List) && actRow9List.equalsIgnoreCase(expRow9List) 
				&& actRow10List.equalsIgnoreCase(expRow10List) && actRow11List.equalsIgnoreCase(expRow11List) && actRow12List.equalsIgnoreCase(expRow12List) 
				&& actRow13List.equalsIgnoreCase(expRow13List) && actRow14List.equalsIgnoreCase(expRow14List) 
				
				&& actP2Row1List.equalsIgnoreCase(expP2Row1List) && actP2Row2List.equalsIgnoreCase(expP2Row2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInStockLedgerReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_WarehouseExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_WarehouseNameChkBox));
			reports_Filter_Customize_WarehouseNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkOpeningStockRegisterReportWithCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(openingStocksRegister));
			openingStocksRegister.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransactionExpansion));
			osr_customizeFieldsTransactionExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsExpansion));
			osr_customizeFieldsTransExtraFieldsExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsWarehouseExpansion));
			osr_customizeFieldsTransExtraFieldsWarehouseExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsWarehouseName));
			getAction().doubleClick(osr_customizeFieldsTransExtraFieldsWarehouseName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 264.00, 8.50, 187.00, HYDERABAD]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[BR COGS ITEM, 24.00, 5.50, 11.00, HYDERABAD]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, , 288.00, 14.00, 198.00, ]";
			
			
			System.out.println("***************************checkOpeningStockRegisterReportWithCustomization*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkOpeningStockRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_Filter_Customize_WarehouseExpandBtn));
			osr_Filter_Customize_WarehouseExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_Filter_Customize_WarehouseNameChkBox));
			
			if (osr_Filter_Customize_WarehouseNameChkBox.isSelected()==false) 
			{
				osr_Filter_Customize_WarehouseNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_DefaultFilterTxt));
			osr_DefaultFilterTxt.click();
			osr_DefaultFilterTxt.sendKeys("Secunderabad");
			
			Thread.sleep(3000);
			
			osr_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
		
			System.out.println("****************************checkOpeningStockRegisterReportWithFilterOption******************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if (actReportsTable==expReportsTable) 
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
			
			
			
			
			
			
		
		public boolean checkDeletingCustomizationLayoutAndFilterInOpeningStockRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_Filter_Customize_WarehouseExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_Filter_Customize_WarehouseNameChkBox));
			osr_Filter_Customize_WarehouseNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
			
			
			
			
			
			
			
		
		public boolean checkStockStatementReportWithCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockStatement));
			stockStatement.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}

			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransactionExpansion));
			osr_customizeFieldsTransactionExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsExpansion));
			osr_customizeFieldsTransExtraFieldsExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsWarehouseExpansion));
			osr_customizeFieldsTransExtraFieldsWarehouseExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsWarehouseName));
			getAction().doubleClick(osr_customizeFieldsTransExtraFieldsWarehouseName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM, , , , , , ]";
			

			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[288.00, 2,196.00, 2,484.00, , , HYDERABAD]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[, 2,664.00, 2,464.00, 200.00, 181.20, SECUNDERABAD]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[288.00, 4,860.00, 4,948.00, 200.00, 181.20, ]";
			
			
			System.out.println("***************************checkStockStatementReportWithCustomization*********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List)
				   && actRow4List.equalsIgnoreCase(expRow4List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}

			
			
			
			
		
		
		
		public boolean checkStockStatementReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sStatment_Filter_Customize_WarehouseExpandBtn));
			sStatment_Filter_Customize_WarehouseExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sStatment_Filter_Customize_WarehouseNameChkBox));
			
			if (sStatment_Filter_Customize_WarehouseNameChkBox.isSelected()==false) 
			{
				sStatment_Filter_Customize_WarehouseNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sStatment_DefaultFilterTxt));
			sStatment_DefaultFilterTxt.click();
			sStatment_DefaultFilterTxt.sendKeys("Secunderabad");
			
			Thread.sleep(3000);
			
			sStatment_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM, , , , , , ]";
			

			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[, 2,664.00, 2,464.00, 200.00, 181.20, SECUNDERABAD]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[, 2,664.00, 2,464.00, 200.00, 181.20, ]";
			
		
			System.out.println("****************************checkStockStatementReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
			
			
			
			
			
			
			
		
		public boolean checkDeletingCustomizationLayoutAndFilterInStockStatementReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sStatment_Filter_Customize_WarehouseExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sStatment_Filter_Customize_WarehouseNameChkBox));
			sStatment_Filter_Customize_WarehouseNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
			
			
			
		
		
		
		
		
		
		public boolean checkStockMovementReportWithCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockMovement));
			stockMovement.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			   
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			Thread.sleep(2000);
			
	        getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockMovementDropdown));
			
			Select sm=new Select(stockMovementDropdown);
			sm.selectByVisibleText("by Warehouse");	
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[HYDERABAD, , , , , , , , , , , , , ]";
			
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[BR COGS ITEM, 288.00, 198.00, 2,196.00, 1,447.50, 2,484.00, 1,645.50, , , , , , , BR COGS ITEM]";
			
								
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Sub Total, 288.00, 198.00, 2,196.00, 1,447.50, 2,484.00, 1,645.50, , , , , , , ]";
			
			
			
			int reportsRow4ListCount = reportsRow4List.size();
			ArrayList<String> reportsRow4ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow4ListCount;i++)
			{
				String data = reportsRow4List.get(i).getText();
				reportsRow4ListArray.add(data);
			}
			String actRow4List = reportsRow4ListArray.toString();
			String expRow4List = "[SECUNDERABAD, , , , , , , , , , , , , ]";
			
			
			
			int reportsRow5ListCount = reportsRow5List.size();
			ArrayList<String> reportsRow5ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow5ListCount;i++)
			{
				String data = reportsRow5List.get(i).getText();
				reportsRow5ListArray.add(data);
			}
			String actRow5List = reportsRow5ListArray.toString();
			String expRow5List = "[BR COGS ITEM, , , 2,664.00, 2,281.20, 2,464.00, 2,100.00, 200.00, 181.20, 0.91, , , , BR COGS ITEM]";
			
								
			
			int reportsRow6ListCount = reportsRow6List.size();
			ArrayList<String> reportsRow6ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow6ListCount;i++)
			{
				String data = reportsRow6List.get(i).getText();
				reportsRow6ListArray.add(data);
			}
			String actRow6List = reportsRow6ListArray.toString();
			String expRow6List = "[Sub Total, , , 2,664.00, 2,281.20, 2,464.00, 2,100.00, 200.00, 181.20, 0.91, , , , ]";
			
			
			
			int reportsRow7ListCount = reportsRow7List.size();
			ArrayList<String> reportsRow7ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow7ListCount;i++)
			{
				String data = reportsRow7List.get(i).getText();
				reportsRow7ListArray.add(data);
			}
			String actRow7List = reportsRow7ListArray.toString();
			String expRow7List = "[Grand Total, 288.00, 198.00, 4,860.00, 3,728.70, 4,948.00, 454.50, 200.00, 181.20, 0.91, , , , ]";

			
			System.out.println("********************************checkStockMovementReportWithCustomization***********************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actRow4List);
			System.out.println(expRow4List);
			
			System.out.println(actRow5List);
			System.out.println(expRow5List);
			
			System.out.println(actRow6List);
			System.out.println(expRow6List);
			
			System.out.println(actRow7List);
			System.out.println(expRow7List);
			
			Thread.sleep(2000);	
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) 
				&& actRow4List.equalsIgnoreCase(expRow4List) && actRow5List.equalsIgnoreCase(expRow5List) && actRow6List.equalsIgnoreCase(expRow6List) 
				&& actRow7List.equalsIgnoreCase(expRow7List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkStockMovementReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sMovement_Filter_Customize_WarehouseExpandBtn));
			sMovement_Filter_Customize_WarehouseExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sMovement_Filter_Customize_WarehouseNameChkBox));
			
			if (sMovement_Filter_Customize_WarehouseNameChkBox.isSelected()==false) 
			{
				sMovement_Filter_Customize_WarehouseNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sMovement_DefaultFilterTxt));
			sMovement_DefaultFilterTxt.click();
			sMovement_DefaultFilterTxt.sendKeys("Hyderabad");
			
			Thread.sleep(3000);
			
			sMovement_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));

			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[HYDERABAD, , , , , , , , , , , , , ]";
			

			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[288.00, 198.00, 2,196.00, 1,447.50, 2,484.00, 1,645.50, , , , , , , BR COGS ITEM]";
		

			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[288.00, 198.00, 2,196.00, 1,447.50, 2,484.00, 1,645.50, , , , , , , ]";
			
		
			System.out.println("****************************checkStockMovementReportWithFilterOption******************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInStockMovementReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sMovement_Filter_Customize_WarehouseExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sMovement_Filter_Customize_WarehouseNameChkBox));
			sMovement_Filter_Customize_WarehouseNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		public boolean checkMultiLevelStockMovementReportsWithCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(multiLevelStockMovement));
			multiLevelStockMovement.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			   
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));

				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 288.00, 198.00, 4,860.00, 3,728.70, 4,948.00, 3,745.50, 200.00, 181.20, 0.91, BR COGS ITEM]";
								    									

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, 288.00, 198.00, 4,860.00, 3,728.70, 4,948.00, 3,745.50, 200.00, 181.20, 0.91, ]";
			
			System.out.println("*********************************checkMultiLevelStockMovementReportsWithCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkMultiLevelStockMovementReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(multiLevel_Filter_Customize_ItemExpandBtn));
			multiLevel_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(multiLevel_Filter_Customize_ItemNameChkBox));
			
			if (multiLevel_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				multiLevel_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(multiLevel_DefaultFilterTxt));
			multiLevel_DefaultFilterTxt.click();
			multiLevel_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			multiLevel_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("****************************checkMultiLevelStockMovementReportWithFilterOption******************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
						
			if(actReportsTable==expReportsTable)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInMultiLevelStockMovementReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(multiLevel_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(multiLevel_Filter_Customize_ItemNameChkBox));
			multiLevel_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkVirtualStockAnalysisReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualStockAnalysis));
			virtualStockAnalysis.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			   
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));

				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 200.00, , , , 200.00, BR COGS ITEM]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, 200.00, , , , 200.00, ]";
			
			System.out.println("*********************************checkVirtualStockAnalysisReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkVirtualStockAnalysisReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualStock_Filter_Customize_ItemExpandBtn));
			virtualStock_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualStock_Filter_Customize_ItemNameChkBox));
			
			if (virtualStock_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				virtualStock_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualStock_DefaultFilterTxt));
			virtualStock_DefaultFilterTxt.click();
			virtualStock_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			virtualStock_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("****************************checkVirtualStockAnalysisReportWithFilterOption******************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
						
			if(actReportsTable==expReportsTable)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInVirtualStockAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualStock_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(virtualStock_Filter_Customize_ItemNameChkBox));
			virtualStock_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkStockValuationReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockValuation));
			stockValuation.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				String actname=name.getText();

				if(actname.equalsIgnoreCase("BR COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DisplayLinearReportChkbox));
			sl_DisplayLinearReportChkbox.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, BR COGS ITEM, BR COGS ITEM, 200.00, 181.20, 0.91, , BR COGS ITEM]";
						

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Total, , , 200.00, 181.20, 0.91, , ]";
			
			System.out.println("*********************************checkStockValuationReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkStockValuationReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockValuation_Filter_Customize_ItemExpandBtn));
			stockValuation_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockValuation_Filter_Customize_ItemNameChkBox));
			
			if (stockValuation_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				stockValuation_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockValuation_DefaultFilterTxt));
			stockValuation_DefaultFilterTxt.click();
			stockValuation_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			stockValuation_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("****************************checkStockReportByTagWithFilterOption******************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
						
			if(actReportsTable==expReportsTable)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInStockValuationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockValuation_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockValuation_Filter_Customize_ItemNameChkBox));
			stockValuation_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkStockReportbyTagReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReportByTag));
			stockReportByTag.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, BR COGS ITEM, 200.00, 0.91, 181.20, 200.00, 0.91, 181.20, , , , , , , , , , , , , , , , BR COGS ITEM]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, , 200.00, 0.91, 181.20, 200.00, 0.91, 181.20, , , , , , , , , , , , , , , , ]";
			
			System.out.println("*********************************checkStockReportbyTagReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkStockReportByTagReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReportByTag_Filter_Customize_ItemExpandBtn));
			stockReportByTag_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReportByTag_Filter_Customize_ItemNameChkBox));
			
			if (stockReportByTag_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				stockReportByTag_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReportByTag_DefaultFilterTxt));
			stockReportByTag_DefaultFilterTxt.click();
			stockReportByTag_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			stockReportByTag_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("****************************checkStockReportbyTagReportWithFilterOption******************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
						
			if(actReportsTable==expReportsTable)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInStockReportByTag() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReportByTag_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReportByTag_Filter_Customize_ItemNameChkBox));
			stockReportByTag_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		public boolean checkABCAnalysisReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(abcAnalysis));
			abcAnalysis.click();
			
			Thread.sleep(3000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";

			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[A Product, , , ]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[BR COGS ITEM, 200.00, 181.20, BR COGS ITEM]";
			
			
			int reportsByWarehouseRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsByWarehouseRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsByWarehouseRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsByWarehouseRow3ListArray.add(data);
			}
			String actRow3List = reportsByWarehouseRow3ListArray.toString();
			String expRow3List = "[Total, 200.00, 181.20, ]";
			
			System.out.println("*********************************checkABCAnalysisReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkABCAnalysisReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abcAnalysis_Filter_Customize_ItemExpandBtn));
			abcAnalysis_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abcAnalysis_Filter_Customize_ItemNameChkBox));
			
			if (abcAnalysis_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				abcAnalysis_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abcAnalysis_DefaultFilterTxt));
			abcAnalysis_DefaultFilterTxt.click();
			abcAnalysis_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			abcAnalysis_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("****************************checkABCAnalysisReportWithFilterOption******************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
						
			if(actReportsTable==expReportsTable)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInABCAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abcAnalysis_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(abcAnalysis_Filter_Customize_ItemNameChkBox));
			abcAnalysis_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkStockAnalysisByBatchReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByBatch));
			stockAnalysisByBatch.click();
			
			Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";

			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM") )
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsByWarehouseRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsByWarehouseRow1ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsByWarehouseRow1ListArray.add(data);
			}
			String actRow1List = reportsByWarehouseRow1ListArray.toString();
			String expRow1List = "[BATCH#PVAT1, 200.00, 0.91, 181.00]";
			

			int reportsByWarehouseRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsByWarehouseRow2ListArray = new ArrayList<String>();
			for(int i=1;i<5;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsByWarehouseRow2ListArray.add(data);
			}
			String actRow2List = reportsByWarehouseRow2ListArray.toString();
			String expRow2List = "[Grand Total, 200.00, 0.91, 181.00]";
			
			
			String actItem = sl_1stRow8thCol.getText();
			String expItem = "BR COGS ITEM";
			
			
			System.out.println("*********************************checkStockAnalysisByBatchReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actItem+"  Value Expected  "+expItem);
			
			Thread.sleep(2000);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actItem.equalsIgnoreCase(expItem))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkStockAnalysisByBatchReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByBatch_Filter_Customize_ItemExpandBtn));
			stockAnalysisByBatch_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByBatch_Filter_Customize_ItemNameChkBox));
			
			if (stockAnalysisByBatch_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				stockAnalysisByBatch_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByBatch_DefaultFilterTxt));
			stockAnalysisByBatch_DefaultFilterTxt.click();
			stockAnalysisByBatch_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			stockAnalysisByBatch_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("****************************checkStockAnalysisByBatchReportWithFilterOption******************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
						
			if(actReportsTable==expReportsTable)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInStockAnalysisByBatchReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByBatch_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAnalysisByBatch_Filter_Customize_ItemNameChkBox));
			stockAnalysisByBatch_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		public boolean checkStockBalanceByWarehouseReportCustomize() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalanceByWarehouse));
			stockBalanceByWarehouse.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//*[@id='LandingGridBody']/tr["+i+"]/td[10]"));
				
				String actname=name.getText();
				
				System.out.println(actname);
				
				if(actname.equalsIgnoreCase("SECUNDERABAD"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_IncludeServiceTypeItemChkBox));
			sl_IncludeServiceTypeItemChkBox.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			// Actual
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			String actWarehouse = sl_1stRow1stCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_2ndRow1stCol));
			String actItem = sl_2ndRow1stCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_2ndRow4thCol));
			String actQuantity = sl_2ndRow4thCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_2ndRow6thCol));
			String actNetQuantity = sl_2ndRow6thCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_2ndRow7thCol));
			String actCustomized = sl_2ndRow7thCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_3rdRow4thCol));
			String actTotalQuantity = sl_3rdRow4thCol.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_3rdRow6thCol));
			String actTotalNetQuantity = sl_3rdRow6thCol.getText();
			
			
			
			
			// Expected
			
			String expWarehouse = "SECUNDERABAD SECUNDERABAD";
			String expItem = "BR COGS ITEM";
			String expQuantity = "200.00";
			String expNetQuantity = "200.00";
			String expCustomized = "BR COGS ITEM";
			String expTotalQuantity = "200.00";
			String expTotalNetQuantity = "200.00";
			
			System.out.println("*********************************checkStockBalanceByWarehouseReportCustomize*****************************************");
			
			System.out.println("Warehouse          : "+actWarehouse         +"  Value Expected  "+expWarehouse);
			System.out.println("Item               : "+actItem              +"  Value Expected  "+expItem);
			System.out.println("Quantity           : "+actQuantity          +"  Value Expected  "+expQuantity);
			System.out.println("Net Quantity       : "+actNetQuantity       +"  Value Expected  "+expNetQuantity);
			System.out.println("Customized         : "+actCustomized        +"  Value Expected  "+expCustomized);
			System.out.println("Total Quantity     : "+actTotalQuantity     +"  Value Expected  "+expTotalQuantity);
			System.out.println("Total Net Quantity : "+actTotalNetQuantity  +"  Value Expected  "+expTotalNetQuantity);
			
			if(actWarehouse.equalsIgnoreCase(expWarehouse) && actItem.equalsIgnoreCase(expItem) && actQuantity.equalsIgnoreCase(expQuantity)
				 && actNetQuantity.equalsIgnoreCase(expNetQuantity) && actTotalQuantity.equalsIgnoreCase(expTotalQuantity) && actCustomized.equalsIgnoreCase(expCustomized)
				 && actTotalNetQuantity.equalsIgnoreCase(expTotalNetQuantity))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
	
		
		
		
		
		
		
		
		
		public boolean checkStockBalanceByWarehouseReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalanceByWarehouse_Filter_Customize_WarehouseExpandBtn));
			stockBalanceByWarehouse_Filter_Customize_WarehouseExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalanceByWarehouse_Filter_Customize_WarehouseNameChkBox));
			
			if (stockBalanceByWarehouse_Filter_Customize_WarehouseNameChkBox.isSelected()==false) 
			{
				stockBalanceByWarehouse_Filter_Customize_WarehouseNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalanceByWarehouse_DefaultFilterTxt));
			stockBalanceByWarehouse_DefaultFilterTxt.click();
			stockBalanceByWarehouse_DefaultFilterTxt.sendKeys("Hyderabad");
			
			Thread.sleep(3000);
			
			stockBalanceByWarehouse_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("****************************checkStockBalanceByWarehouseReportWithFilterOption******************************");
			
			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
						
			if(actReportsTable==expReportsTable)
			{
				return true;
			} 
			else 
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInStockBalanceByWarehouseReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalanceByWarehouse_Filter_Customize_WarehouseExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockBalanceByWarehouse_Filter_Customize_WarehouseNameChkBox));
			stockBalanceByWarehouse_Filter_Customize_WarehouseNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		public boolean checkStockAgeingAnalysisReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysis));
			ageingAnalysis.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 200.00, 181.20, 200.00, 181.20, , , , , , , , , , , , , , , , BR COGS ITEM]";
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 200.00, 181.20, 200.00, 181.20, , , , , , , , , , , , , , , , ]";
			
			
			System.out.println("*****************************************checkStockAgeingAnalysisReportCustomization***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkStockAgeingAnalysisReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysis_Filter_Customize_ItemExpandBtn));
			stockAgeingAnalysis_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysis_Filter_Customize_ItemNameChkBox));
			
			if (stockAgeingAnalysis_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				stockAgeingAnalysis_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysis_DefaultFilterTxt));
			stockAgeingAnalysis_DefaultFilterTxt.click();
			stockAgeingAnalysis_DefaultFilterTxt.sendKeys("STD COGS ITEM");
			
			Thread.sleep(3000);
			
			stockAgeingAnalysis_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 200.00, 181.20, 200.00, 181.20, , , , , , , , , , , , , , , , BR COGS ITEM]";
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 200.00, 181.20, 200.00, 181.20, , , , , , , , , , , , , , , , ]";
			
			
			System.out.println("*****************************************checkStockAgeingAnalysisReportWithFilterOption***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInStockAgeingAnalysisReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysis_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysis_Filter_Customize_ItemNameChkBox));
			stockAgeingAnalysis_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkAgeingAnalysisByBatchReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockAgeingAnalysisMenu));
			stockAgeingAnalysisMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysisByBatch));
			ageingAnalysisByBatch.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount-2;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM, , , , , , , , , , , , , , , , , , , ]";
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount-2;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[BATCH#PVAT1, 200.00, 175.50, 200.00, 175.50, , , , , , , , , , , , , , , ]";
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow3ListCount-2;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[Grand Total, 200.00, 175.50, 200.00, 175.50, , , , , , , , , , , , , , , ]";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_2ndRow22thCol));
			String actCustomised = sl_2ndRow22thCol.getText();
			String expCustomised = "BR COGS ITEM";
			
			System.out.println("*****************************************checkAgeingAnalysisByBatchReportCustomization***************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			System.out.println(actCustomised+"  Value Expected  "+expCustomised);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List) && actCustomised.equalsIgnoreCase(expCustomised))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkAgeingAnalysisByBatchReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysisByBatch_Filter_Customize_ItemExpandBtn));
			ageingAnalysisByBatch_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysisByBatch_Filter_Customize_ItemNameChkBox));
			
			if (ageingAnalysisByBatch_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				ageingAnalysisByBatch_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysisByBatch_DefaultFilterTxt));
			ageingAnalysisByBatch_DefaultFilterTxt.click();
			ageingAnalysisByBatch_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			ageingAnalysisByBatch_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*****************************************checkAgeingAnalysisByBatchReportWithFilterOption***************************************");

			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInAgeingAnalysisByBatchReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysisByBatch_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ageingAnalysisByBatch_Filter_Customize_ItemNameChkBox));
			ageingAnalysisByBatch_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkReorderReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();
			
			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reorderReport));
			reorderReport.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			int reportsHeaderListCount = osr_reportHeaderList.size();
			ArrayList<String> reportsHeaderListArray = new ArrayList<String>();
			for(int i=1;i<reportsHeaderListCount;i++)
			{
				String data = osr_reportHeaderList.get(i).getText();
				reportsHeaderListArray.add(data);
			}
			String actHeaderList = reportsHeaderListArray.toString();
			String expHeaderList = "[Item, Quantity, Reorder, Deficit, Value, Deficit Value, Reorder Quantity1, Reorder Quantity2, Item Name]";
									

			System.out.println("*********************************checkReorderReportCustomization*****************************************");
			
			System.out.println(actHeaderList);
			System.out.println(expHeaderList);
			
			if(actHeaderList.equalsIgnoreCase(expHeaderList))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInReorderReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		

		public boolean checkFastMovingItemsReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fastMovingItem));
			fastMovingItem.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, BR COGS ITEM, BR COGS ITEM, 200.00, 181.20, 0.91, SECUNDERABAD, BR COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , 200.00, 181.20, 0.91, , ]";
			
			System.out.println("*********************************checkFastMovingItemsReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkFastMovingItemsReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fastMovingItems_Filter_Customize_ItemExpandBtn));
			fastMovingItems_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fastMovingItems_Filter_Customize_ItemNameChkBox));
			
			if (fastMovingItems_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				fastMovingItems_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fastMovingItems_DefaultFilterTxt));
			fastMovingItems_DefaultFilterTxt.click();
			fastMovingItems_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			fastMovingItems_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*****************************************checkFastMovingItemsReportWithFilterOption***************************************");

			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInFastMovingItemsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fastMovingItems_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(fastMovingItems_Filter_Customize_ItemNameChkBox));
			fastMovingItems_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkSlowMovingItemsReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(slowMovingItem));
			slowMovingItem.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, BR COGS ITEM, BR COGS ITEM, 200.00, 181.20, 0.91, SECUNDERABAD, BR COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, , , 200.00, 181.20, 0.91, , ]";
			
			
			System.out.println("*********************************checkSlowMovingItemsReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkSlowMovingItemsReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(slowMovingItems_Filter_Customize_ItemExpandBtn));
			slowMovingItems_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(slowMovingItems_Filter_Customize_ItemNameChkBox));
			
			if (slowMovingItems_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				slowMovingItems_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(slowMovingItems_DefaultFilterTxt));
			slowMovingItems_DefaultFilterTxt.click();
			slowMovingItems_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			slowMovingItems_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*****************************************checkSlowMovingItemsReportWithFilterOption***************************************");

			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInSlowMovingItemsReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(slowMovingItems_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(slowMovingItems_Filter_Customize_ItemNameChkBox));
			slowMovingItems_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
	
		
		
		public boolean checkPeakAndLowBalancesReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakORLowBalances));
			peakORLowBalances.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
		
			String actItem = sl_1stRow1stCol.getText();
			String expItem = "BR COGS ITEM"; 
			
			boolean actNegativeBalanceDate = sl_1stRow2ndCol.getText().isEmpty();
			boolean expNegativeBalanceDate = true;
			
			boolean actNegativeBalance = sl_1stRow3rdCol.getText().isEmpty();
			boolean expNegativeBalance = true;

			String actLowestPositiveBalance = sl_1stRow5thCol.getText();
			String expLowestPositiveBalance = "96.00";
			
			String actHighestBalance = sl_1stRow7thCol.getText();
			String expHighestBalance = "1,380.00";
			
			boolean actTotalNegativeBalanceDate = sl_2ndRow2ndCol.getText().isEmpty();
			boolean expTotalNegativeBalanceDate = true;
			
			boolean actTotalNegativeBalance = sl_2ndRow3rdCol.getText().isEmpty();
			boolean expTotalNegativeBalance = true;
			
			boolean actTotalLowestPositiveBalanceDate = sl_2ndRow4thCol.getText().isEmpty();
			boolean expTotalLowestPositiveBalanceDate = true;
			
			String actTotalLowestPositiveBalance = sl_2ndRow5thCol.getText();
			String expTotalLowestPositiveBalance = "96.00";
			
			boolean actTotalHighestBalanceDate = sl_2ndRow6thCol.getText().isEmpty();
			boolean expTotalHighestBalanceDate = true;
			
			String actTotalHighestBalance = sl_2ndRow7thCol.getText();
			String expTotalHighestBalance = "1,380.00";
			
			String actItemName = sl_1stRow8thCol.getText();
			String expItemName = "BR COGS ITEM";
			
			boolean actTotalItemName = sl_2ndRow8thCol.getText().isEmpty();
			boolean expTotalItemName = true;
			
			boolean actResult = actNegativeBalanceDate==expNegativeBalanceDate && actNegativeBalance==expNegativeBalance 
								&& actTotalNegativeBalanceDate==expTotalNegativeBalanceDate && actTotalNegativeBalance==expTotalNegativeBalance
								&& actTotalLowestPositiveBalanceDate==expTotalLowestPositiveBalanceDate && actTotalHighestBalanceDate==expTotalHighestBalanceDate
								&& actTotalItemName==expTotalItemName;
			
			boolean expResult = true;
			
			System.out.println("*********************************checkPeakAndLowBalancesReportCustomization*****************************************");
			
			System.out.println("Item : "+actItem+"  Value Expected  "+expItem);
			System.out.println("LowestPositiveBalance : "+actLowestPositiveBalance+"  Value Expected  "+expLowestPositiveBalance);
			System.out.println("HighestBalance : "+actHighestBalance+"  Value Expected  "+expHighestBalance);
			System.out.println("TotalLowestPositiveBalance : "+actTotalLowestPositiveBalance+"  Value Expected  "+expTotalLowestPositiveBalance);
			System.out.println("TotalHighestBalance : "+actTotalHighestBalance+"  Value Expected  "+expTotalHighestBalance);
			System.out.println("Empty cells : "+actResult+"  Value Expected  "+expResult);
			if(actItem.equalsIgnoreCase(expItem) && actLowestPositiveBalance.equalsIgnoreCase(expLowestPositiveBalance)
				&& actHighestBalance.equalsIgnoreCase(expHighestBalance) && actTotalLowestPositiveBalance.equalsIgnoreCase(expTotalLowestPositiveBalance)
				&& actTotalHighestBalance.equalsIgnoreCase(expTotalHighestBalance) && actItemName.equalsIgnoreCase(expItemName) && actResult==expResult)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkPeakAndLowBalancesReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalancesItems_Filter_Customize_ItemExpandBtn));
			peakAndLowBalancesItems_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalancesItems_Filter_Customize_ItemNameChkBox));
			
			if (peakAndLowBalancesItems_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				peakAndLowBalancesItems_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalancesItems_DefaultFilterTxt));
			peakAndLowBalancesItems_DefaultFilterTxt.click();
			peakAndLowBalancesItems_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			peakAndLowBalancesItems_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*****************************************checkPeakAndLowBalancesReportWithFilterOption***************************************");

			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInPeakAndLowBalancesReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalancesItems_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(peakAndLowBalancesItems_Filter_Customize_ItemNameChkBox));
			peakAndLowBalancesItems_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkBestSellingItemReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bestSellingItem));
			bestSellingItem.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(includeAllVoucherChkBox));
			includeAllVoucherChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 3,628.00, 702.90, BR COGS ITEM]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 3,628.00, 702.90, ]";
			
			System.out.println("*********************************checkBestSellingItemReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkBestSellingItemReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bestSellingItems_Filter_Customize_ItemExpandBtn));
			bestSellingItems_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bestSellingItems_Filter_Customize_ItemNameChkBox));
			
			if (bestSellingItems_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				bestSellingItems_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bestSellingItems_DefaultFilterTxt));
			bestSellingItems_DefaultFilterTxt.click();
			bestSellingItems_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			bestSellingItems_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(2000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*****************************************checkBestSellingItemReportWithFilterOption***************************************");

			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInBestSellingItemReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bestSellingItems_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(bestSellingItems_Filter_Customize_ItemNameChkBox));
			bestSellingItems_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkStockTransferRegisterReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferReport));
			stockTransferReport.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_FromWarehouseTxt));
			sl_FromWarehouseTxt.sendKeys("Hyderabad");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_ToWarehouseTxt));
			sl_ToWarehouseTxt.sendKeys("Secunderabad");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM BR COGS ITEM, , , , , , , , , , ]";
			
			

			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[, HYDERABAD, 1,344.00, , , , , , , ]";
			
			
			
			int reportsRow3ListCount = reportsRow3List.size();
			ArrayList<String> reportsRow3ListArray = new ArrayList<String>();
			for(int i=2;i<reportsRow3ListCount;i++)
			{
				String data = reportsRow3List.get(i).getText();
				reportsRow3ListArray.add(data);
			}
			String actRow3List = reportsRow3ListArray.toString();
			String expRow3List = "[, , 1,344.00, , , , , , , ]";
			
			
			System.out.println("*********************************checkStockTransferRegisterReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			System.out.println(actRow3List);
			System.out.println(expRow3List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List) && actRow3List.equalsIgnoreCase(expRow3List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkStockTransferRegisterReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferRegister_Filter_Customize_ItemExpandBtn));
			stockTransferRegister_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferRegister_Filter_Customize_ItemNameChkBox));
			
			if (stockTransferRegister_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				stockTransferRegister_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferRegister_DefaultFilterTxt));
			stockTransferRegister_DefaultFilterTxt.click();
			stockTransferRegister_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			stockTransferRegister_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*****************************************checkStockTransferRegisterReportWithFilterOption***************************************");

			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInStockTransferRegisterReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferRegister_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockTransferRegister_Filter_Customize_ItemNameChkBox));
			stockTransferRegister_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkStockReservationReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(stockReservationReport));
			stockReservationReport.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			int rowcount=stockLedgerHometableRowCount.size();
			
			System.out.println(rowcount);
			
			for (int i = 1; i <= rowcount; i++) 
			{
				WebElement name=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[12]"));
				
				String actname=name.getText();
				
				if(actname.equalsIgnoreCase("BR COGS ITEM"))
				{
					WebElement index=getDriver().findElement(By.xpath("//tbody[@id='LandingGridBody']/tr["+i+"]/td[8]/div/label/input"));
					index.click();
					
					break;
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransactionExpansion));
			osr_customizeFieldsTransactionExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsExpansion));
			osr_customizeFieldsTransExtraFieldsExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsWarehouseExpansion));
			osr_customizeFieldsTransExtraFieldsWarehouseExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsTransExtraFieldsWarehouseName));
			getAction().doubleClick(osr_customizeFieldsTransExtraFieldsWarehouseName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			int reportsHeaderListCount = osr_reportHeaderList.size();
			ArrayList<String> reportsHeaderListArray = new ArrayList<String>();
			for(int i=1;i<reportsHeaderListCount;i++)
			{
				String data = osr_reportHeaderList.get(i).getText();
				reportsHeaderListArray.add(data);
			}
			String actHeaderList = reportsHeaderListArray.toString();
			String expHeaderList = "[Date, Voucher name, Voucher no, Item name, Quantity reserved, Rate, Customer name, Warehouse Name]";
			
			System.out.println("*********************************checkStockReservationReportCustomization*****************************************");

			System.out.println(actHeaderList);
			System.out.println(expHeaderList);
			
			if(actHeaderList.equalsIgnoreCase(expHeaderList))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInStockReservationReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkTransTypeWiseStockReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transactionTypeWiseStockReport));
			transactionTypeWiseStockReport.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemExpansion));
			osr_customizeFieldsItemExpansion.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeFieldsItemName));
			getAction().doubleClick(osr_customizeFieldsItemName).build().perform();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(osr_customizeSaveBtn));
			osr_customizeSaveBtn.click();
			
			String expMessage = "Data saved successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
		    
		    Thread.sleep(2000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 200.00, 181.20, 0.91, , , 288.00, 198.00, , , 2,160.00, 1,417.50, , , , , , , , , , , , , , , "
					               + "1,320.00, 1,135.20, , , 36.00, 30.00, , , , , , , , , , , , , , , 3,244.00, 2,284.50, , , , , 360.00, "
					               + "315.00, , , , , BR COGS ITEM]";
			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 200.00, 181.20, 0.91, , , 288.00, 198.00, , , 2,160.00, 1,417.50, , , , , , , , , , , , , , , "
								  + "1,320.00, 1,135.20, , , 36.00, 30.00, , , , , , , , , , , , , , , 3,244.00, 2,284.50, , , , , 360.00, 315.00, , , , , ]";
			
			System.out.println("*********************************checkTransTypeWiseStockReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkTransTypeWiseStockReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transTypeWiseStock_Filter_Customize_ItemExpandBtn));
			transTypeWiseStock_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transTypeWiseStock_Filter_Customize_ItemNameChkBox));
			
			if (transTypeWiseStock_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				transTypeWiseStock_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transTypeWiseStock_DefaultFilterTxt));
			transTypeWiseStock_DefaultFilterTxt.click();
			transTypeWiseStock_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			transTypeWiseStock_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*****************************************checkTransTypeWiseStockReportWithFilterOption***************************************");

			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInTransTypeWiseStockReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transTypeWiseStock_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(transTypeWiseStock_Filter_Customize_ItemNameChkBox));
			transTypeWiseStock_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkActualConsumptionReportCustomization() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryMenu));
			inventoryMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(inventoryReportsMenu));
			inventoryReportsMenu.click();

			getAction().sendKeys(Keys.END).build().perform();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(actualConsumptionReport));
			actualConsumptionReport.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_DateOptionDropdown));
			Select s=new Select(sl_DateOptionDropdown);
			s.selectByVisibleText(" As on date ");
			
			String actsl_DateOptionDropdown    =s.getFirstSelectedOption().getText();
			String expsl_DateOptionDropdown    =" As on date ";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SelectAllItemsChkBox));
			sl_SelectAllItemsChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_OkBtn));
			sl_OkBtn.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().equals(ExpectedConditions.elementToBeClickable(sl_1stRow1stCol));
			
			int reportsRow1ListCount = reportsRow1List.size();
			ArrayList<String> reportsRow1ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow1ListCount;i++)
			{
				String data = reportsRow1List.get(i).getText();
				reportsRow1ListArray.add(data);
			}
			String actRow1List = reportsRow1ListArray.toString();
			String expRow1List = "[BR COGS ITEM, 288.00, 198.00, , , 2,160.00, 1,417.50, 36.00, 30.00, 1,320.00, 1,135.20, , , 3,244.00, "
								  + "74,10,918.00, , , 360.00, 1,13,400.00, , , 200.00, 37,607.69, 75,21,537.30]";
			
			int reportsRow2ListCount = reportsRow2List.size();
			ArrayList<String> reportsRow2ListArray = new ArrayList<String>();
			for(int i=1;i<reportsRow2ListCount;i++)
			{
				String data = reportsRow2List.get(i).getText();
				reportsRow2ListArray.add(data);
			}
			String actRow2List = reportsRow2ListArray.toString();
			String expRow2List = "[Grand Total, 288.00, 198.00, , , 2,160.00, 1,417.50, 36.00, 30.00, 1,320.00, 1,135.20, , , 3,244.00, "
								  + "74,10,918.00, , , 360.00, 1,13,400.00, , , 200.00, 37,607.69, 75,21,537.30]";
			
			System.out.println("*********************************checkActualConsumptionReportCustomization*****************************************");
			
			System.out.println(actRow1List);
			System.out.println(expRow1List);
			
			System.out.println(actRow2List);
			System.out.println(expRow2List);
			
			if(actRow1List.equalsIgnoreCase(expRow1List) && actRow2List.equalsIgnoreCase(expRow2List))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkActualConsumptionReportWithFilterOption() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(actualConsumptionReport_Filter_Customize_ItemExpandBtn));
			actualConsumptionReport_Filter_Customize_ItemExpandBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(actualConsumptionReport_Filter_Customize_ItemNameChkBox));
			
			if (actualConsumptionReport_Filter_Customize_ItemNameChkBox.isSelected()==false) 
			{
				actualConsumptionReport_Filter_Customize_ItemNameChkBox.click();
			}

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(actualConsumptionReport_DefaultFilterTxt));
			actualConsumptionReport_DefaultFilterTxt.click();
			actualConsumptionReport_DefaultFilterTxt.sendKeys("WA COGS ITEM");
			
			Thread.sleep(3000);
			
			actualConsumptionReport_DefaultFilterTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
			
			Thread.sleep(3000);
		
			boolean actReportsTable = reportsTable.getText().isEmpty();
			boolean expReportsTable = true;
			
			System.out.println("*****************************************checkActualConsumptionReportWithFilterOption***************************************");

			System.out.println("Reports Table isEmpty : "+actReportsTable+"  Value Expected  "+expReportsTable);
			
			if(actReportsTable==expReportsTable)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkDeletingCustomizationLayoutAndFilterInActualConsumptionReport() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_ReportCustomizeBtn));
			report_ReportCustomizeBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CustomizationDeleteLayoutBtn));
			report_CustomizationDeleteLayoutBtn.click();
		
			getWaitForAlert();
			getAlert().accept();
			
			String expMessage = "Layout Deleted Successfully";
		    
		    String actMessage = checkValidationMessage(expMessage);
			
		    getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterBtn));
			report_FilterBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterCustomizeBtn));
			report_FilterCustomizeBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(actualConsumptionReport_Filter_Customize_ItemExpandBtn));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(actualConsumptionReport_Filter_Customize_ItemNameChkBox));
			actualConsumptionReport_Filter_Customize_ItemNameChkBox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(reports_Filter_Customize_OkBtn));
			reports_Filter_Customize_OkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_Filter_RefreshBtn));
			report_Filter_RefreshBtn.click();

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_FilterOkBtn));
			report_FilterOkBtn.click();
		
			Thread.sleep(2000);
			
			if(actMessage.equalsIgnoreCase(expMessage))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(report_CloseBtn));
				report_CloseBtn.click();
				Thread.sleep(2000);
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_CloseBtn));
				sl_CloseBtn.click();
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
	    
		
		
		
		
		
		
		
        
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		// Erase all Transactions after Transactions flow
		
		public boolean checkEraseAllTransactionsAfterCompletingTransactionFlow() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		
		
			
			
	
			
		// Updating Allow Negative Batch Quantities option

		public boolean checkSettingsConfigureTransactionsPreferencesBatchUpdatingAllowNegativeBatchQuantitieOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			//checkRestoreOfCompany();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AllowNegativeBatchesQtyChkBox));
			if (AllowNegativeBatchesQtyChkBox.isSelected()==false) 
			{
				AllowNegativeBatchesQtyChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actAllowNegBatchQty=AllowNegativeBatchesQtyChkBox.isSelected();
			boolean expAllowNegBatchQty=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			System.out.println("********* AllowNegativeBatchQuantity isSelected: "+actAllowNegBatchQty+"  value expected  "+expAllowNegBatchQty);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			System.out.println("********* Error Message: "+actMessage+"  value expected  "+expMessage);
			
			if(actAllowNegBatchQty==expAllowNegBatchQty && actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
				
				
			
			
			
			
		// Login and Logout After Updating Allow Negative Batch Quantities.
			
		public boolean checkLogoutAndLoginAfterUpdatingAllowNegativeBatchQuantitieOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			  userNameDisplay.click();
			 
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			  logoutOption.click();
			  Thread.sleep(2000);
			  
			  System.out.println("Logout Successfully");
	
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			  username.sendKeys("su");
			  getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
	
		      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		      password.sendKeys("su");
		       
		      getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
		     
		      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	
		      signIn.click();
		      
	          Thread.sleep(6000);
		      
		      //getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DontShowChkBox));
		      
		      //getDriver().navigate().refresh();
		      
		      System.out.println("Login Successfully");
		      
		      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			  boolean actDashboard=labelDashboard.isDisplayed();
			  boolean expDashboard=true;
			
			  System.out.println("********* Dashboard : "+actDashboard+"  value expected  "+expDashboard);
			
			  if(actDashboard==expDashboard)
		      {
				System.out.println("***Test Pass: Login Successfull***");
				
				return true;
			  }
		      else
		      {
		    	 
				System.out.println("***Test Fail: Login Not Successfull***");
				
				return false;
			  }
		   }
			
			
		


		
		
		// Purchase Voucher-1 After Allowing Negative Batch Quantities
			
		public boolean checkSavingPurchaseVoucherVATVoucher1AfterUpdatingAllowingNegativeBatchQuantityOption() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("100");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: " + presentDate);
			
			cal.add(Calendar.MONTH, 1); 
			
			String nextMonthDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: " + nextMonthDate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME);
			enter_Expirydate.sendKeys(nextMonthDate,Keys.TAB);
			
			String actBatchNo=select1stRow_16thColumn.getText();
			String expBatchNo="Batch#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			
			
			
			
			
		// Saving Sales Invoice Voucher After Allowing Negative Batch Quantities
			
		public boolean checkSavingSalesInvoiceVATVoucher1WithAboveAvailableQuantityAfterAllowNegativeBatchQuantities() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("800");
			enter_AQ.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("420");
			enter_FQ.sendKeys(Keys.TAB);
			
			/*String expMessage="This transaction will make stock negative.";
			
			String actMessage=checkValidationMessage(expMessage);*/
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
			batchTable1stRow5thCol.click();
			
			Thread.sleep(2000);
			
			enter_BatchTableQtyAdjusted.sendKeys("1220");
			
			enter_BatchTableQtyAdjusted.sendKeys(Keys.TAB);
			
			
			if (errorMessage.isDisplayed()) 
			{
				checkValidationMessage("Quantity entered is Less than total quantity");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow5thCol));
				batchTable1stRow5thCol.click();
				
				Thread.sleep(2000);
				
				enter_BatchTableQtyAdjusted.sendKeys("1220");
				
				enter_BatchTableQtyAdjusted.sendKeys(Keys.TAB);
			}
			
			Thread.sleep(2000);
			
			String actTotalQuantityAdjusted = batchTotalAdjustedQty.getText();
			String expTotalQuantityAdjusted = "1220.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage="This Transaction will make the Stock Negative";
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage1=checkValidationMessage(expMessage1);
			
			System.out.println("TotalQuantityAdjusted"+actTotalQuantityAdjusted+"  value expected  "+expTotalQuantityAdjusted);
			System.out.println("1st Row Batch No : "+act1stRowBatchNo +"  value expected  "+exp1stRowBatchNo);
			System.out.println("Error Message    : "+actMessage        +"  value expected  "+expMessage);
			System.out.println("Error Message    : "+actMessage1       +"  value expected  "+expMessage1+" : "+expMessage2);
				
				
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actTotalQuantityAdjusted.equalsIgnoreCase(expTotalQuantityAdjusted) && actMessage.equalsIgnoreCase(expMessage)
				&& actMessage1.startsWith(expMessage1) && actMessage1.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
		
			
			
			

			
		
		
		// Erase all Transactions after Allowing Negative Batch Quantities
		
		public boolean checkEraseAllTransactionsAfterCompletingAllowingNegativeBatchQuantities() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
			
			
		// Update Do not accept Duplicate Batches in inwards document
			
		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectDoNotAcceptDuplicateBatchesInInwardsDoc() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(AllowNegativeBatchesQtyChkBox));
			if (AllowNegativeBatchesQtyChkBox.isSelected()) 
			{
				AllowNegativeBatchesQtyChkBox.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(DontAcceptDuplicateBatchesChkBox));
			if (DontAcceptDuplicateBatchesChkBox.isSelected()==false) 
			{
				DontAcceptDuplicateBatchesChkBox.click();
			}
			
			boolean actDoNotAcceptDuplicateBatches=DontAcceptDuplicateBatchesChkBox.isSelected();
			boolean expDoNotAcceptDuplicateBatches=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* DoNotAcceptDuplicateBatchs isSelected: "+actDoNotAcceptDuplicateBatches+"  value expected  "+expDoNotAcceptDuplicateBatches);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			System.out.println("********* Error Message: "+actMessage+"  value expected  "+expMessage);
			
			if(actDoNotAcceptDuplicateBatches==expDoNotAcceptDuplicateBatches && actAlertTxt.equalsIgnoreCase(expAlertTxt) && 
				actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
				
			
		
		
		
			
		// Login and Logout After Updating Do not accept Duplicate Batches in inwards document.
			
		public boolean checkLogoutAndLoginAfterUpdatingDoNotAcceptDuplicateBatchesInInwardDoc() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	      
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	
			signIn.click();
	      
			Thread.sleep(5000);
	      
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			boolean actDashboard=labelDashboard.isDisplayed();
			boolean expDashboard=true;
		 
			Thread.sleep(2000);
	      
			System.out.println("Login Successfully");
		
			System.out.println("********* Dashboard : "+actDashboard+"  value expected  "+expDashboard);
		
			if(actDashboard==expDashboard)
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
			
			
			
		
		
		
		// Purchase Voucher-1 After Updating Do not accept Duplicate Batches in inwards document.			
			
		public boolean checkSavingPurchaseVoucherVATVoucher1WithDoNotAcceptDuplicateBatcesInInwardDocument() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Duplicate");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: " + presentDate);
			
			cal.add(Calendar.MONTH, 1); 
			
			String nextMonthDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: " + nextMonthDate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME);
			enter_Expirydate.sendKeys(nextMonthDate,Keys.TAB);
			
			String actBatchNo=select1stRow_16thColumn.getText();
			String expBatchNo="Batch#Duplicate";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			Thread.sleep(2000);
			
			System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}

			
			
			
			
			
			
		public boolean checkPurchaseVoucher2TryingToSaveVoucherWithDuplicateBatchNo() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Duplicate");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: " + presentDate);
			
			cal.add(Calendar.MONTH, 1); 
			
			String nextMonthDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: " + nextMonthDate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME);
			enter_Expirydate.sendKeys(nextMonthDate,Keys.TAB);
			
			String actBatchNo=select1stRow_16thColumn.getText();
			String expBatchNo="Batch#Duplicate";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage="Same batch cannot be repeated";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("******** Batch No: "+actBatchNo+"  value expected  "+expBatchNo);
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage);
			
			if (actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}	
		}
			
			
			
		
		
		
		
		
		// Erase all Transactions after Do not accept Duplicate Batches in inwards document
		
		public boolean checkEraseAllTransactionsAfterCompletingDoNotAcceptDuplicateBatchesInInwardsDocument() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
				
				

		// Update Manufacturing dates by Batches

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectManufacturingDatesByBatch() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			if (DontAcceptDuplicateBatchesChkBox.isSelected()) 
			{
				DontAcceptDuplicateBatchesChkBox.click();
			}
			
			Thread.sleep(2000);
			
			if (ManufacturingDateByBatchesChkBox.isSelected()==false) 
			{
				ManufacturingDateByBatchesChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actManufacturingDateByBatch=ManufacturingDateByBatchesChkBox.isSelected();
			boolean expManufacturingDateByBatch=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* ManufacturingDateByBatch isSelected: "+actManufacturingDateByBatch+"  value expected  "+expManufacturingDateByBatch);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			System.out.println("********* Error Message: "+actMessage+"  value expected  "+expMessage);
			
			if(actManufacturingDateByBatch==expManufacturingDateByBatch && actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				System.out.println("***Test Pass: Manufacturing Date By Batch is Updated***");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				System.out.println("***Test Fail: Manufacturing Date By Batch is NOT Updated***");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
				
				
			
		
		
			
		// Login and Logout After Updating Manufacturing Date By Batch.
			
		public boolean checkLogoutAndLoginAfterUpdatingManufacturingDateByBatch() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			  userNameDisplay.click();
			 
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			  logoutOption.click();
			  
			  Thread.sleep(2000);
			  
			  System.out.println("Logout  Successfully");
	
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			  username.sendKeys("su");
			  getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
	
		      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		      password.sendKeys("su");
		       
		      getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
		     
		      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	
		      signIn.click();
	
		      Thread.sleep(6000);
		      
		      System.out.println("Login Successfully");
		      
		      Thread.sleep(2000);
		      
		      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			
		      if(labelDashboard.isDisplayed()) 
		      {
				System.out.println("***Test Pass: Login Successfull***");
				
				return true;
			  }
		      else
		      {
		    	 
				System.out.println("***Test Fail: Login Not Successfull***");
				
				return false;
			  }
		   }
		
			
		
		
				
			

		// Purchase Voucher After Updating Manufacturing Date By Batch

		public boolean checkSavingPurchaseVoucherVATVoucher1WithManufactureDateAsMoreThanCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: " + presentDate);
			
			cal.add(Calendar.DAY_OF_MONTH, 3);  
			
			String mftDate = df.format(cal.getTime());  
		
			System.out.println("Date after Addition: "+mftDate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_MfgDate));
			enter_MfgDate.sendKeys(Keys.HOME,mftDate);
			enter_MfgDate.sendKeys(Keys.TAB);
			
			cal.add(Calendar.MONTH, 1); 
			
			String nextMonthDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: " + nextMonthDate);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME);
			enter_Expirydate.sendKeys(nextMonthDate,Keys.TAB);
			
			String actBatchNo=select1stRow_16thColumn.getText();
			String expBatchNo="Batch#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			String expMessage="MFGDate cannot be more than document date.";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			System.out.println("******** Batch No      : "+actBatchNo +"  value expected  "+expBatchNo);
			System.out.println("******** Error Message : "+actMessage +"  value expected  "+expMessage);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}

			
			
			
			
			
			
		public boolean checkSavingPurchaseVoucherVATVoucher1WithManufacturingDateAsCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_17thColumn));
			select1stRow_17thColumn.click();
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
		    String currentDate = df.format(date); 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_MfgDate));
			enter_MfgDate.sendKeys(Keys.HOME,currentDate);
			enter_MfgDate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
					
				return false;
			}
		}
			
			
			
		
		
		
			
		
		// Sales Invoice after Updating Manufacturing dates for batches			

		public boolean checkSavingSalesInvoiceVATVoucher1AfterUpdatingManufacturingDatesForBatches() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********* 1st Row Batch No : "+act1stRowBatchNo +"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* Error Message    : "+actMessage       +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
			
		// Erase all Transactions after Manufacturing dates by Batches
		
		public boolean checkEraseAllTransactionsAfterCompletingManufacturingDatesByBatches() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
				
				
				
				
		
		
		
			
			
		// Updating Expiry dates Optional
			
		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectExpiryDatesOptional() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ManufacturingDateByBatchesChkBox));
			
			if (ManufacturingDateByBatchesChkBox.isSelected()) 
			{
				ManufacturingDateByBatchesChkBox.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ExpiryDateOptionalChkBox));
			
			if (ExpiryDateOptionalChkBox.isSelected()==false) 
			{
				ExpiryDateOptionalChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actExpiryDatesOptional=ExpiryDateOptionalChkBox.isSelected();
			boolean expExpiryDatesOptional=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* ManufacturingDateByBatch isSelected: "+actExpiryDatesOptional+"  value expected  "+expExpiryDatesOptional);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actExpiryDatesOptional==expExpiryDatesOptional && actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
				
				
			
			
		// Login and Logout After Updating Expiry Dates Optional.
			
		public boolean checkLogoutAndLoginAfterUpdatingExpiryDatesOptional() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			  userNameDisplay.click();
			 
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			  logoutOption.click();
			  
			  Thread.sleep(2000);
			  
			  System.out.println("Logout  Successfully");
	
			  getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			  username.sendKeys("su");
			  getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
	
		      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		      password.sendKeys("su");
		       
		      getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
		     
		      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	
		      signIn.click();
		      
		      Thread.sleep(5000);
		      
		      System.out.println("Login Successfully");
		      
		      Thread.sleep(2000);
		      
		      getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
			
		      if(labelDashboard.isDisplayed()) 
		      {
				return true;
			  }
		      else
		      {
				return false;
			  }
		   }
		

				
		
		
		
		
		
		// Purchase Voucher After Updating Expiry Dates Optional.			
			
		public boolean checkSavingPurchaseVoucherVATVoucher1WithoutExpiryDateAfterUpdatingExpiryDatesOptional() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			String actBatchNo=select1stRow_16thColumn.getText();
			String expBatchNo="Batch#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("Batch No     : "+actBatchNo+"  value expected  "+expBatchNo);
			System.out.println("Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchNo.equalsIgnoreCase(expBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
					
				return false;
			}
		}
			
			
			
			
			
		
			
			
		// Sales Invoice Voucher After Updating Expiry Dates Optional.				
			
		public boolean checkSavingSalesInvoiceVATVoucher1WithExpiryDatesOptional() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********* 1st Row Batch No : "+act1stRowBatchNo +"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* Error Message    : "+actMessage       +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
			
			
		
			
		
		
		// Erase all Transactions after Expiry dates Optional
		
		public boolean checkEraseAllTransactionsAfterCompletingExpiryDatesOptional() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
			
		
		
		
		
		
		
			
			
			
		// Updating Ignore Date in Expiry

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectIgnoreDateInExpiry() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ExpiryDateOptionalChkBox));
			
			if (ExpiryDateOptionalChkBox.isSelected()) 
			{
				ExpiryDateOptionalChkBox.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(IgnoringDayInExpiryChkBox));
			
			if (IgnoringDayInExpiryChkBox.isSelected()==false) 
			{
				IgnoringDayInExpiryChkBox.click();
			}
			
			boolean actIgnoreDaysInExpiry=IgnoringDayInExpiryChkBox.isSelected();
			boolean expIgnoreDaysInExpiry=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* isSelected: "+actIgnoreDaysInExpiry+"  value expected  "+expIgnoreDaysInExpiry);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actIgnoreDaysInExpiry==expIgnoreDaysInExpiry && actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
				
				
			
			
		// Login and Logout After Updating Ignore Days In Expiry
			
			
		public boolean checkLogoutAndLoginAfterUpdatingIgnoreDaysInExpiry() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));

			signIn.click();

	        Thread.sleep(5000);
	      
	        System.out.println("Login Successfully");
	      
	        Thread.sleep(2000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
		


			
		// Purchase Voucher After Updating Ignore Days In Expiry			

		public boolean checkSavingPurchaseVoucherVATVoucher1WithIgnoreDaysInExpiry() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryMonthAndYear=select1stRow_18thColumn.getText();
			
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat month_year = new SimpleDateFormat("MM/yyyy");
			String expExpiryMonthAndYear = month_year.format(cal.getTime());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Date in Month_Year Format: "+actExpiryMonthAndYear+"  value expected  "+expExpiryMonthAndYear);
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
				
			if(actExpiryMonthAndYear.equalsIgnoreCase(expExpiryMonthAndYear) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			/*public boolean checkMonthAndYearTest() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{
				
				Calendar cal=Calendar.getInstance();
				SimpleDateFormat month_year = new SimpleDateFormat("MM/yyyy");
				String month_name = month_year.format(cal.getTime());
				System.out.println("Month :: " + month_name);
				
				String exp="11/2019"; 
				
				System.out.println("Month and Year: "+month_name+"------------"+exp);
				if (month_name.equalsIgnoreCase(exp)) {
					System.out.println("_________________________________");
					return true;
				}
				else{
					
					return false;
				}
			}*/
			
			
			
			
						
						
			
			
			
		// Sales Invoice Voucher After Updating Ignore Day in Expiry				

		public boolean checkSavingSalesInvoiceVATVoucher1WithIgnoreDayInExpiry() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	    
			Calendar c = Calendar.getInstance();

			c.add(Calendar.MONTH, 1);  
		
			String nextMonthDate=df.format(c.getTime());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.click();
			dateTxt.sendKeys(Keys.HOME,nextMonthDate);
			dateTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			boolean actTable=batchPopupTable.getText().isEmpty();
			boolean expTable=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			documentNumberTxt.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt_CalenderBtn));
			dateTxt_CalenderBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(calender_TodayBtn));
			calender_TodayBtn.click();
			dateTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********* Table isEmpty    : "+actTable         +"  value expected  "+expTable);
			System.out.println("********* Batch No         : "+act1stRowBatchNo +"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* Error Message    : "+actMessage       +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actTable==expTable && act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}

				
				
				
	
				
			
			
	/*		public boolean checkAddingMonthInDateTest() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
			{
				
				DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			    Date date=new Date();
			    System.out.println(df.format(date));
		  	   
				Calendar cal=Calendar.getInstance();
				SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
				String presentDate = currentDate.format(cal.getTime());
				System.out.println("--------------Date Before Adding:: " + presentDate);
				
				cal.add(Calendar.MONTH, 1); 
				
				String nextMonthDate=df.format(cal.getTime());
				
				System.out.println("--------------Date After Adding:: " + nextMonthDate);
				
				
				if (presentDate.equalsIgnoreCase(nextMonthDate)) {
					System.out.println("_________________________________");
					return true;
				}
				else{
					return false;
				}
			}
			
			
			
			*/
			
			
			
		
		
		
		// Erase all Transactions after Ignore Date in Expiry
		
		public boolean checkEraseAllTransactionsAfterCompletingIgnoreDateInExpiry() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
					
				
		
		
			
			

			
			
		
		// Updating Calculate Expiry Date From Item

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectCalculateExpiryDateFromItem() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(IgnoringDayInExpiryChkBox));

			if (IgnoringDayInExpiryChkBox.isSelected()) 
			{
				IgnoringDayInExpiryChkBox.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CalculateExpiryDateFromItemChkBox));
			
			if (CalculateExpiryDateFromItemChkBox.isSelected()==false) 
			{
				CalculateExpiryDateFromItemChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actIgnoreDaysInExpiry=CalculateExpiryDateFromItemChkBox.isSelected();
			boolean expIgnoreDaysInExpiry=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* isSelected: "+actIgnoreDaysInExpiry+"  value expected  "+expIgnoreDaysInExpiry);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actIgnoreDaysInExpiry==expIgnoreDaysInExpiry && actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
				
				
		
		
			
			
		
		// Login and Logout After Updating Calculate Expiry Date From Item
			
		public boolean checkLogoutAndLoginAfterUpdatingCalculateExpiryDateFromItem() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();

	        Thread.sleep(5000);
	      
	        System.out.println("Login Successfully");
	      
	        Thread.sleep(2000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
			

			

		
		
		
		
		
		public boolean checkUpdatingItemExpiryDateBy5Days() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	      	homeMenu.click();
	      	
	      	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterMenu));
	      	homeMasterMenu.click();
	      	
	      	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItemMenu));
	      	homeMasterItemMenu.click();
	      	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItem_ItemMenu));
	    	homeMasterItem_ItemMenu.click();
			
	    	Thread.sleep(2000);
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SearchItemTxt));
	    	sl_SearchItemTxt.sendKeys("BR COGS ITEM",Keys.ENTER);
	    	
	    	Thread.sleep(2000);
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectGridFirstRow));
	    	selectGridFirstRow.click();
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemEditBtn));
	    	itemEditBtn.click();
	    	
	    	Thread.sleep(2000);
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewSettingsBtn));
	    	itemNewSettingsBtn.click();
	    	
	    	Thread.sleep(2000);
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCreationSettingsTabExpiryDaysTxt));
	    	itemCreationSettingsTabExpiryDaysTxt.sendKeys(Keys.END);
	    	itemCreationSettingsTabExpiryDaysTxt.sendKeys(Keys.SHIFT,Keys.HOME);
	    	itemCreationSettingsTabExpiryDaysTxt.sendKeys("5");
	    	
	    	String actExpiryDays = itemCreationSettingsTabExpiryDaysTxt.getAttribute("value");
	    	String expExpiryDays = "5";
	    	
	    	itemEditSaveBtn.click();
	    	
	    	String expMessage="Updated Successfully";
			
	    	String actMessage=checkValidationMessage(expMessage);
	    	
	    	System.out.println("Expiry Days : "+actExpiryDays+"  value expected  "+expExpiryDays);
	    	
	    	if (actExpiryDays.equalsIgnoreCase(expExpiryDays) && actMessage.equalsIgnoreCase(expMessage)) 
	    	{
	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCloseBtn));
	    		itemCloseBtn.click();
	    		
	    		Thread.sleep(2000);
	    		
	    		return true;
			}
	    	else
	    	{
	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCloseBtn));
	    		itemCloseBtn.click();
	    		
	    		Thread.sleep(2000);
	    		
	    		return false;
			}
		}
		
			
		
		
		
		
		
		

		// Purchase Voucher After Updating 		

		public boolean checkPurchaseVoucherVATVoucher1ShowingExpiryDate5DaysAboveFromCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat expiryDateFormate = new SimpleDateFormat("dd/MM/yyyy");
			cal.add(Calendar.DAY_OF_MONTH, 5);
			String expExpiryDate=expiryDateFormate.format(cal.getTime());
			
			System.out.println("************ Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				
				return true;	
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
			
			
		public boolean checkChangingBackItemExpiryDateTo0Days() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
	      	homeMenu.click();
	      	
	      	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterMenu));
	      	homeMasterMenu.click();
	      	
	      	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItemMenu));
	      	homeMasterItemMenu.click();
	      	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMasterItem_ItemMenu));
	    	homeMasterItem_ItemMenu.click();
			
	    	Thread.sleep(2000);
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(sl_SearchItemTxt));
	    	sl_SearchItemTxt.sendKeys("BATCH BR ITEM",Keys.ENTER);
	    	
	    	Thread.sleep(2000);
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(selectGridFirstRow));
	    	selectGridFirstRow.click();
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemEditBtn));
	    	itemEditBtn.click();
	    	
	    	Thread.sleep(2000);
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemNewSettingsBtn));
	    	itemNewSettingsBtn.click();
	    	
	    	Thread.sleep(2000);
	    	
	    	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCreationSettingsTabExpiryDaysTxt));
	    	itemCreationSettingsTabExpiryDaysTxt.sendKeys(Keys.END);
	    	itemCreationSettingsTabExpiryDaysTxt.sendKeys(Keys.LEFT_SHIFT,Keys.HOME);
	    	itemCreationSettingsTabExpiryDaysTxt.sendKeys("0");
	    	
	    	Thread.sleep(2000);
	    	
	    	String actExpiryDays = itemCreationSettingsTabExpiryDaysTxt.getAttribute("value");
	    	String expExpiryDays = "0";
	    	
	    	itemEditSaveBtn.click();
	    	
	    	String expMessage="Updated Successfully";
			
	    	String actMessage=checkValidationMessage(expMessage);		
	    	
	    	System.out.println("Expiry Days : "+actExpiryDays+"  value expected  "+expExpiryDays);

	    	if (actMessage.equalsIgnoreCase(expMessage)) 
	    	{
	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCloseBtn));
	    		itemCloseBtn.click();
	    		
	    		Thread.sleep(2000);
	    		
	    		return true;
			}
	    	else
	    	{
	    		getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(itemCloseBtn));
	    		itemCloseBtn.click();
	    		
	    		Thread.sleep(2000);
	    		
	    		return false;
			}
		}
			
			
			
			
		
		
		
		
		
		
		
		
		// Updating Cannot Sell Batches that would expire in next 2days

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectCannotSellBatchesThatWouldExpireInNext2days() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CalculateExpiryDateFromItemChkBox));
			
			if (CalculateExpiryDateFromItemChkBox.isSelected()) 
			{
				CalculateExpiryDateFromItemChkBox.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CantSellBatchesNxtChkBox));
			
			if (CantSellBatchesNxtChkBox.isSelected()==false) 
			{
				CantSellBatchesNxtChkBox.click();
			}
			
			boolean actCantSellBatchNextDays=CantSellBatchesNxtChkBox.isSelected();
			boolean expCantSellBatchNextDays=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CantSellBatches_Txt));
			CantSellBatches_Txt.click();
			CantSellBatches_Txt.sendKeys(Keys.END,Keys.SHIFT,Keys.HOME);
			CantSellBatches_Txt.sendKeys("2",Keys.TAB);
			
			String actExpireInNextDays=CantSellBatches_Txt.getAttribute("value");
			String expExpireInNextDays="2";
					
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* Cannot Sell Batch Expires in Next isSelected: "+actCantSellBatchNextDays+"  value expected  "+expCantSellBatchNextDays);
			System.out.println("********* Expiry In Next Days: "+actExpireInNextDays+"  value expected  "+expExpireInNextDays);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actCantSellBatchNextDays==expCantSellBatchNextDays && actExpireInNextDays.equalsIgnoreCase(expExpireInNextDays) && actAlertTxt.equalsIgnoreCase(expAlertTxt) && 
				actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
				
				
			
			
		// Login and Logout After Updating Cannot Sell Batches That Would Expire In Next 2days
			
		public boolean checkLogoutAndLoginAfterUpdatingCannotSellBatchesThatWouldExpireInNext2days() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));

			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        System.out.println("Login Successfully");
	      
	        Thread.sleep(2000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
			

			
		
		
		
		
		// Purchase Voucher After Updating Cannot sell batches that would expiry 2 - DAYS			
			
		public boolean checkSavingPurchaseVoucherVATVoucher1WithCannotSellBatchesThatWouldExpity2Days() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 1); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			
			
			
		// Sales Invoice Voucher After Updating Cannot sell batches that would expiry 2 - DAYS		

		public boolean checkSalesInvoiceVATVoucher1BatchPopupWithCannotSellBatchesThatWouldExpiryIn2Days() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			boolean actTable=batchPopupTable.getText().isEmpty();
			boolean expTable=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			Thread.sleep(2000);

			System.out.println("*********** Table isEmpty : "+actTable +"  value expected  "+expTable);
				
				
			if(actTable==expTable)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();

				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			
			
		// Changing Expire Date of Purchase Voucher-1 to 3Days after Current Date
			
		public boolean checkEditingPurchaseVoucherVATVoucher1AndSavingWithExpireDate3DaysAfterCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("1")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			Thread.sleep(2000);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Current Date:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 3); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			select1stRow_18thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
		
			
			
			
			
		// Verifying in Sales Invoice N Voucher-1 after Changing the Expire Date to 3Days after Current Date in Purchase Voucher-9			
			
		public boolean checkSavingSalesInvoiceVATVoucher1AfterUpdatingExpireDateTo3Days() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********* Batch No         : "+act1stRowBatchNo +"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* Error Message    : "+actMessage       +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
		
		
		
		// Erase all Transactions after Cannot Sell Batches that would expire in next 2Days
		
		public boolean checkEraseAllTransactionsAfterCompletingCannotSellBatchesThatWouldExpireInNext2Days() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
					
		
		
		
		
		
			
		// Updating Cannot Sell Batches that would expire in next 2Weeks

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectCannotSellBatchesThatWouldExpireInNext2Weeks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			boolean actCantSellBatchNextDays=CantSellBatchesNxtChkBox.isSelected();
			boolean expCantSellBatchNextDays=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CantSellBatches_Txt));
			CantSellBatches_Txt.click();
			CantSellBatches_Txt.sendKeys(Keys.END,Keys.LEFT_SHIFT,Keys.HOME);
			CantSellBatches_Txt.sendKeys("2",Keys.TAB);
			
			String actExpireInNextTxt=CantSellBatches_Txt.getAttribute("value");
			String expExpireInNextTxt="2";
					
			Select cantSellBatchDropdwn=new Select(CantSellBatches_Dropdown);
			cantSellBatchDropdwn.selectByIndex(1);
			
			String actDropDwnSelected=cantSellBatchDropdwn.getFirstSelectedOption().getText();
			String expDropDwnSelected="Week";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* Cannot Sell Batch Expires in Next isSelected: "+actCantSellBatchNextDays+"  value expected  "+expCantSellBatchNextDays);
			System.out.println("********* Expiry In Next Txt: "+actExpireInNextTxt+"  value expected  "+expExpireInNextTxt);
			System.out.println("********* Expiry In Next DropDwn: "+actDropDwnSelected+"  value expected  "+expDropDwnSelected);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actCantSellBatchNextDays==expCantSellBatchNextDays && actExpireInNextTxt.equalsIgnoreCase(expExpireInNextTxt) && actDropDwnSelected.equalsIgnoreCase(expDropDwnSelected) &&  
				actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
				
				
			
			

		
		
		// Login and Logout After Updating Cannot Sell Batches That Would Expire In Next 2Weeks
			
		public boolean checkLogoutAndLoginAfterUpdatingCannotSellBatchesThatWouldExpireInNext2Weeks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));

			signIn.click();
			
			Thread.sleep(6000);
	      
			System.out.println("Login Successfully");
	      
			Thread.sleep(2000);
	      
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		
			if(labelDashboard.isDisplayed()) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		

		
		
		
		
		
		
		// Purchase Voucher After Updating Cannot sell batches that would expiry 2 - Weeks
			
		public boolean checkSavingPurchaseVoucherVATVoucher1WithCannotSellBatchesThatWouldExpiry2Weeks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 10); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			
			
			
		
		// Sales Invoice Voucher After Updating Cannot sell batches that would expiry 2 - Weeks		

		public boolean checkSalesInvoiceVATVoucher1WithCannotSellBatchesThatWouldExpireIn2Weeks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			boolean actTable=batchPopupTable.getText().isEmpty();
			boolean expTable=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			Thread.sleep(2000);

			System.out.println("*********** Table isEmpty : "+actTable +"  value expected  "+expTable);
				
				
			if(actTable==expTable)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();

				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
			
			
			
		// Changing Expire Date of Purchase Voucher-1 to 15Days after Current Date
			
		public boolean checkEditingPurchaseVoucher1SavingWithExpiryDateAs15DaysAfterCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("1")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			Thread.sleep(2000);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Current Date:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 15);  
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			select1stRow_18thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
				
				
				
			

		
		
		// Verifying in Sales Invoice N Voucher-1 after Changing the Expire Date to 15Days after Current Date in Purchase Voucher-10 			
			
		public boolean checkSavingSalesInvoiceVATVoucher1WithCannotSellBatchesThatWouldExpireIn2Weeks() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********* Batch No         : "+act1stRowBatchNo +"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* Error Message    : "+actMessage       +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
		
		
		
		
		// Erase all Transactions after Cannot Sell Batches that would expire in next 2Weeks
		
		public boolean checkEraseAllTransactionsAfterCompletingCannotSellBatchesThatWouldExpireInNext2Weeks() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
			


			
			
			
		// Updating Cannot Sell Batches that would expire in next 2Months

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectCannotSellBatchesThatWouldExpireInNext2Months() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			boolean actCantSellBatchNextDays=CantSellBatchesNxtChkBox.isSelected();
			boolean expCantSellBatchNextDays=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CantSellBatches_Txt));
			CantSellBatches_Txt.click();
			CantSellBatches_Txt.sendKeys(Keys.END,Keys.LEFT_SHIFT,Keys.HOME);
			CantSellBatches_Txt.sendKeys("2",Keys.TAB);
			
			String actExpireInNextTxt=CantSellBatches_Txt.getAttribute("value");
			String expExpireInNextTxt="2";
					
			Select cantSellBatchDropdwn=new Select(CantSellBatches_Dropdown);
			cantSellBatchDropdwn.selectByIndex(2);
			
			String actDropDwnSelected=cantSellBatchDropdwn.getFirstSelectedOption().getText();
			String expDropDwnSelected="Month";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* Cannot Sell Batch Expires in Next isSelected: "+actCantSellBatchNextDays+"  value expected  "+expCantSellBatchNextDays);
			System.out.println("********* Expiry In Next Txt: "+actExpireInNextTxt+"  value expected  "+expExpireInNextTxt);
			System.out.println("********* Expiry In Next DropDwn: "+actDropDwnSelected+"  value expected  "+expDropDwnSelected);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			
			if(actCantSellBatchNextDays==expCantSellBatchNextDays && actExpireInNextTxt.equalsIgnoreCase(expExpireInNextTxt) && actDropDwnSelected.equalsIgnoreCase(expDropDwnSelected) &&  
				actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				System.out.println("***Test Pass: Cannot Sell Batches Expire In Next is Updated***");

				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				System.out.println("***Test Fail: Cannot Sell Batches Expire In Next is NOT Updated***");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
				
				
			
			

		
		
		// Login and Logout After Updating Cannot Sell Batches That Would Expire In Next 2Months
			
		public boolean checkLogoutAndLoginAfterUpdatingCannotSellBatchesThatWouldExpireInNext2Months() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));

			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        System.out.println("Login Successfully");
	      
	        Thread.sleep(2000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
		

		
		
		
		
		
			
		// Purchase Voucher After Updating Cannot sell batches that would expiry 2 - Months
			
		public boolean checkSavingPurchaseVoucherVATVoucher1WithCannotSellBatchesThatWouldExpiryIn2Months() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.MONTH, 1); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
		
		
			
			
		
		// Sales Invoice Voucher After Updating Cannot sell batches that would expiry 2 - Months

		public boolean checkSalesInvoiceVATVoucher1WithCannotSellBatchesThatWouldExpire2Months() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			boolean actTable=batchPopupTable.getText().isEmpty();
			boolean expTable=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			Thread.sleep(2000);

			System.out.println("*********** Table isEmpty : "+actTable +"  value expected  "+expTable);
				
				
			if(actTable==expTable)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();

				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
		
			
			
			
		// Changing Expire Date of Purchase Voucher-1 to 3Months after Current Date
			
		public boolean checkEditingPurchaseVoucherVATVoucher1AndSavingWithExpireDateMonthsAfterCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("1")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			Thread.sleep(2000);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Current Date:: "+presentDate);
			
			cal.add(Calendar.MONTH, 3);  
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			select1stRow_18thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
				}
			}
			
			
			
			
			

			
		// Verifying in Sales Invoice N Voucher-1 after Changing the Expire Date to 3Months after Current Date in Purchase Voucher-11 			
				
		public boolean checkSavingSalesInvoiceVATVoucher16AfterUpdatingExpireDate3MonthsAfterCurrentDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********* Batch No         : "+act1stRowBatchNo +"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* Error Message    : "+actMessage       +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
		
		
		
		
		// Erase all Transactions after Cannot Sell Batches that would expire in next 2Months
		
		public boolean checkEraseAllTransactionsAfterCompletingCannotSellBatchesThatWouldExpireInNext2Months() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		
		
			
			

			
		// Updating Sort batches by Expiry date

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectSortBatchesByExpiryDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CantSellBatchesNxtChkBox));
			
			if (CantSellBatchesNxtChkBox.isSelected()) 
			{
				CantSellBatchesNxtChkBox.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SortBatchesExpDateChkBox));
			
			if (SortBatchesExpDateChkBox.isSelected()==false) 
			{
				SortBatchesExpDateChkBox.click();
			}
			
			boolean actSortBatchByExpireDate=SortBatchesExpDateChkBox.isSelected();
			boolean expSortBatchByExpireDate=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* Sort Batch By Expire Date isSelected: "+actSortBatchByExpireDate+"  value expected  "+expSortBatchByExpireDate);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actSortBatchByExpireDate==expSortBatchByExpireDate &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				System.out.println("***Test Pass: Sort Batch By Expire Date is Updated***");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				System.out.println("***Test Fail: Sort Batch By Expire Date is NOT Updated***");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
				
		
		
		
			
			

		// Login and Logout After Updating Sort Batch By Expire Date
			
		public boolean checkLogoutAndLoginAfterUpdatingSortBatchByExpireDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));

			signIn.click();
	      
			Thread.sleep(6000);
			
			System.out.println("Login Successfully");
	      
			Thread.sleep(2000);
	      
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
		
			if(labelDashboard.isDisplayed()) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		

			
			
		
		


		// Purchase Voucher After Updating Sort Batches by Expire Date

		public boolean checkPurchaseVoucherVATVoucher1EnteringDataIntoRow1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("10");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Sort1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			String actRow1BatchNo = select1stRow_16thColumn.getText();
			String expRow1BatchNo = "Batch#Sort1"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate = select1stRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow1BatchNo +"  value expected  "+expRow1BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
			
			
			
			
			
		public boolean checkPurchaseVoucherVATVoucher1EnteringDataInRow2() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
			enter_Quantity.sendKeys("5");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
			select2ndRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
			select2ndRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Sort2");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 1); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
			String actRow2BatchNo = select2ndRow_16thColumn.getText();
			String expRow2BatchNo = "Batch#Sort2"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_18thColumn));
			String actExpiryDate = select2ndRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow2BatchNo +"  value expected  "+expRow2BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
			
			
			
			
			
			
		public boolean checkPurchaseVoucherVATVoucher1EnteringDataInRow3() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			enter_Quantity.sendKeys("7");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
			select3rdRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_16thColumn));
			select3rdRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Sort3");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 6);  
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_16thColumn));
			String actRow3BatchNo = select3rdRow_16thColumn.getText();
			String expRow3BatchNo = "Batch#Sort3"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_18thColumn));
			String actExpiryDate = select3rdRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow3BatchNo +"  value expected  "+expRow3BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
				
				
				
			
		
		

		public boolean checkPurchaseVoucherVATVoucher1EnteringDataInRow4() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			select4thRow_9thColumn.click();
			enter_Quantity.sendKeys("3");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
			select4thRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_16thColumn));
			select4thRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Sort4");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 3);  
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_16thColumn));
			String actRow4BatchNo = select4thRow_16thColumn.getText();
			String expRow4BatchNo = "Batch#Sort4"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_18thColumn));
			String actExpiryDate = select4thRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow4BatchNo +"  value expected  "+expRow4BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
	
		
		
			
		
		
			
		public boolean checkSavingPurchaseVoucherVATVoucher1With4Rows() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
		
			

		
		// Sales Invoice Voucher After Updating Sort Batches By Expire Dates

		public boolean checkSalesInvoiceVATVoucher1BatchPopupData() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("150");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("150");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
			String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
			String expTotalQuantityInHeader="300.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
			String actAdjustQuantity=batchAdjustQtyAmt.getText();
			String expAdjustQuantity="0.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
			String actBalance=batchBalanceAmt.getText();
			String expBalance="300.00";
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
			String act1stRowBatchNo=batchTable1stRow1stCol.getText();
			String exp1stRowBatchNo="BATCH#SORT2";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
			String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
			String exp1stRowBaseQuantity="60.00";
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			Calendar calR1=Calendar.getInstance();
			String presentDate = currentDate.format(calR1.getTime());
			
			System.out.println("--------------Date Before Adding:: "+presentDate);
							
			calR1.add(Calendar.DAY_OF_WEEK, 1); 
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
			String act1stRowExpiryDate=batchTable1stRow4thCol.getText();
			String exp1stRowExpiryDate=df.format(calR1.getTime());
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow1stCol));
			String act2ndRowBatchNo=batchTable2ndRow1stCol.getText();
			String exp2ndRowBatchNo="BATCH#SORT4";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow2ndCol));
			String act2ndRowBaseQuantity=batchTable2ndRow2ndCol.getText();
			String exp2ndRowBaseQuantity="36.00";
			
			Calendar calR2=Calendar.getInstance();
			
			calR2.add(Calendar.DAY_OF_WEEK, 3); 
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable2ndRow4thCol));
			String act2ndRowExpiryDate=batchTable2ndRow4thCol.getText();
			String exp2ndRowExpiryDate=df.format(calR2.getTime());
			
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable3rdRow1stCol));
			String act3rdRowBatchNo=batchTable3rdRow1stCol.getText();
			String exp3rdRowBatchNo="BATCH#SORT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable3rdRow2ndCol));
			String act3rdRowBaseQuantity=batchTable3rdRow2ndCol.getText();
			String exp3rdRowBaseQuantity="120.00";
			
			Calendar calR3=Calendar.getInstance();
			
			calR3.add(Calendar.DAY_OF_WEEK, 5); 
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable3rdRow4thCol));
			String act3rdRowExpiryDate=batchTable3rdRow4thCol.getText();
			String exp3rdRowExpiryDate=df.format(calR3.getTime());
			

			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable4thRow1stCol));
			String act4thRowBatchNo=batchTable4thRow1stCol.getText();
			String exp4thRowBatchNo="BATCH#SORT3";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable4thRow2ndCol));
			String act4thRowBaseQuantity=batchTable4thRow2ndCol.getText();
			String exp4thRowBaseQuantity="84.00";
			
			Calendar calR4=Calendar.getInstance();
			
			calR4.add(Calendar.DAY_OF_WEEK, 6); 
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable4thRow4thCol));
			String act4thRowExpiryDate=batchTable4thRow4thCol.getText();
			String exp4thRowExpiryDate=df.format(calR4.getTime());
			
			
			System.out.println("********* Total Quantity: "+actTotalQuantityInHeader+"  value expected  "+expTotalQuantityInHeader);
			System.out.println("********* Adjust Quantity: "+actAdjustQuantity+"  value expected  "+expAdjustQuantity);
			System.out.println("********* Balance: "+actBalance+"  value expected  "+expBalance);
			System.out.println("********* 1.Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* 1.Base Quantity: "+act1stRowBaseQuantity+"  value expected  "+exp1stRowBaseQuantity);
			System.out.println("********* 1.Expiry Date: "+act1stRowExpiryDate+"  value expected  "+exp1stRowExpiryDate);
			System.out.println("********* 2.Batch No: "+act2ndRowBatchNo+"  value expected  "+exp2ndRowBatchNo);
			System.out.println("********* 2.Base Quantity: "+act2ndRowBaseQuantity+"  value expected  "+exp2ndRowBaseQuantity);
			System.out.println("********* 2.Expiry Date: "+act2ndRowExpiryDate+"  value expected  "+exp2ndRowExpiryDate);
			System.out.println("********* 3.Batch No: "+act3rdRowBatchNo+"  value expected  "+exp3rdRowBatchNo);
			System.out.println("********* 3.Base Quantity: "+act3rdRowBaseQuantity+"  value expected  "+exp3rdRowBaseQuantity);
			System.out.println("********* 3.Expiry Date: "+act3rdRowExpiryDate+"  value expected  "+exp3rdRowExpiryDate);
			System.out.println("********* 4.Batch No: "+act4thRowBatchNo+"  value expected  "+exp4thRowBatchNo);
			System.out.println("********* 4.Base Quantity: "+act4thRowBaseQuantity+"  value expected  "+exp4thRowBaseQuantity);
			System.out.println("********* 4.Expiry Date: "+act4thRowExpiryDate+"  value expected  "+exp4thRowExpiryDate);

			Thread.sleep(2000);
				
			if(actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader) && actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) 
				  && actBalance.equalsIgnoreCase(expBalance) 
				  && act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity) 
				  && act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) 
				  && act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act2ndRowBaseQuantity.equalsIgnoreCase(exp2ndRowBaseQuantity) 
				  && act2ndRowExpiryDate.equalsIgnoreCase(exp2ndRowExpiryDate) 
				  && act3rdRowBatchNo.equalsIgnoreCase(exp3rdRowBatchNo) && act3rdRowBaseQuantity.equalsIgnoreCase(exp3rdRowBaseQuantity) 
				  && act3rdRowExpiryDate.equalsIgnoreCase(exp3rdRowExpiryDate) 
				  && act4thRowBatchNo.equalsIgnoreCase(exp4thRowBatchNo) && act4thRowBaseQuantity.equalsIgnoreCase(exp4thRowBaseQuantity) 
				  && act4thRowExpiryDate.equalsIgnoreCase(exp4thRowExpiryDate) 
				  && actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
			
			
			
			
			
		public boolean checkSavingSalesInvoiceVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#SORT2";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			String act2ndRowBatchNo=select2ndRow_19thColumn.getText();
			String exp2ndRowBatchNo="BATCH#SORT4";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_19thColumn));
			String act3rdRowBatchNo=select3rdRow_19thColumn.getText();
			String exp3rdRowBatchNo="BATCH#SORT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_19thColumn));
			String act4thRowBatchNo=select4thRow_19thColumn.getText();
			String exp4thRowBatchNo="BATCH#SORT3";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			
			System.out.println("********* 1st Row Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* 2nd Row Batch No: "+act2ndRowBatchNo+"  value expected  "+exp2ndRowBatchNo);
			System.out.println("********* 3rd Row Batch No: "+act3rdRowBatchNo+"  value expected  "+exp3rdRowBatchNo);
			System.out.println("********* 4th Row Batch No: "+act4thRowBatchNo+"  value expected  "+exp4thRowBatchNo);
			System.out.println("******** Error Message    : "+actMessage      +"  value expected  "+expMessage1+" : "+expMessage2);
			
			Thread.sleep(2000);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act3rdRowBatchNo.equalsIgnoreCase(exp3rdRowBatchNo) &&
				act4thRowBatchNo.equalsIgnoreCase(exp4thRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
				
		
		
		
		
		// Erase all Transactions after Sort Batches by Expiry Dates
		
		public boolean checkEraseAllTransactionsAfterCompletingSortBatchesByExpiryDates() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
				
				
			



		// Updating Consolidate batches by batch no

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectConsolidateBatchesByBatchNo() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SortBatchesExpDateChkBox));
			
			if (SortBatchesExpDateChkBox.isSelected()) 
			{
				SortBatchesExpDateChkBox.click();	
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConsolidateBatchesByBatchNoChkBox));
			
			if (ConsolidateBatchesByBatchNoChkBox.isSelected()==false) 
			{
				ConsolidateBatchesByBatchNoChkBox.click();
			}
			
			boolean actConsolidateBatchesByBatchNo=ConsolidateBatchesByBatchNoChkBox.isSelected();
			boolean expConsolidateBatchesByBatchNo=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* Consolidate Batches By Batch No isSelected: "+actConsolidateBatchesByBatchNo+"  value expected  "+expConsolidateBatchesByBatchNo);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actConsolidateBatchesByBatchNo==expConsolidateBatchesByBatchNo &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
				
				
			
		
		
			
		// Login and Logout After Updating Consolidate Batches By Batch No
			
		public boolean checkLogoutAndLoginAfterUpdatingConsolidateBatchesByBatchNo() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
		  	logoutOption.click();
		  
		  	Thread.sleep(2000);
		  
		  	System.out.println("Logout  Successfully");

		  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
		  	username.sendKeys("su");
		  	getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

		  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
		  	password.sendKeys("su");
	       
		  	getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
		  	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));

		  	signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	      
	        System.out.println("Login Successfully");
	        
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
		

			


		// Purchase Voucher After Updating Consolidate Batches By Batch No

		public boolean checkPurchaseVoucherVATVoucher1EnteringDataIntoRow1ConsolidateBatch() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("10");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Consolidate");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			String actRow1BatchNo = select1stRow_16thColumn.getText();
			String expRow1BatchNo = "Batch#Consolidate"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate = select1stRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow1BatchNo +"  value expected  "+expRow1BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
			
			
			
		
		
		public boolean checkPurchaseVoucherVATVoucher1EnteringDataInRow2ConsolidateBatches() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
			enter_Quantity.sendKeys("5");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
			select2ndRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
			select2ndRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Consolidate");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
			String actRow2BatchNo = select2ndRow_16thColumn.getText();
			String expRow2BatchNo = "Batch#Consolidate"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_18thColumn));
			String actExpiryDate = select2ndRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow2BatchNo +"  value expected  "+expRow2BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
			
			
			
			
			
			
		public boolean checkPurchaseVoucherVATVoucher1EnteringDataInRow3ConsolidateBatches() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			enter_Quantity.sendKeys("15");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
			select3rdRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_16thColumn));
			select3rdRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Consolidate");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5);  
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_16thColumn));
			String actRow3BatchNo = select3rdRow_16thColumn.getText();
			String expRow3BatchNo = "Batch#Consolidate"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_18thColumn));
			String actExpiryDate = select3rdRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow3BatchNo +"  value expected  "+expRow3BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
				
				
				
			
		
		

		public boolean checkPurchaseVoucherVATVoucher1EnteringDataInRow4ConsolidateBatches() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_1stColumn));
			select4thRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_9thColumn));
			select4thRow_9thColumn.click();
			enter_Quantity.sendKeys("10");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_11thColumn));
			select4thRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_16thColumn));
			select4thRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#Consolidate");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5);  
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_16thColumn));
			String actRow4BatchNo = select4thRow_16thColumn.getText();
			String expRow4BatchNo = "Batch#Consolidate"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select4thRow_18thColumn));
			String actExpiryDate = select4thRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow4BatchNo +"  value expected  "+expRow4BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow4BatchNo.equalsIgnoreCase(expRow4BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
	
		
		
			
		
		
			
		public boolean checkSavingPurchaseVoucherVATVoucher1With4RowsConsolidateBatches() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		

		// Sales Invoice Voucher After Updating Consolidate Batches By Batch No

		public boolean checkSavingSalesInvoiceVATVoucher1AfterUpdatingConsolidateBatchesByBatchNo() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("240");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("240");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			int actBatchRows = batchPopupRowNosList.size();
			int expBatchRows = 1;
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTotalQtyAmt));
			String actTotalQuantityInHeader=batchTotalQtyAmt.getText();
			String expTotalQuantityInHeader="480.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchAdjustQtyAmt));
			String actAdjustQuantity=batchAdjustQtyAmt.getText();
			String expAdjustQuantity="0.00";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchBalanceAmt));
			String actBalance=batchBalanceAmt.getText();
			String expBalance="480.00";
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow1stCol));
			String act1stRowBatchNo=batchTable1stRow1stCol.getText();
			String exp1stRowBatchNo="BATCH#CONSOLIDATE";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow2ndCol));
			String act1stRowBaseQuantity=batchTable1stRow2ndCol.getText();
			String exp1stRowBaseQuantity="480.00";
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
			Date date=new Date();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			Calendar calR1=Calendar.getInstance();
			String presentDate = currentDate.format(calR1.getTime());
			
			System.out.println("--------------Date Before Adding:: "+presentDate);
							
			calR1.add(Calendar.DAY_OF_WEEK, 5); 
							
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchTable1stRow4thCol));
			String act1stRowExpiryDate=batchTable1stRow4thCol.getText();
			String exp1stRowExpiryDate=df.format(calR1.getTime());
			
			for (int i = 0; i < actBatchRows; i++) 
			{
				if (batchPopupRowNosList.get(i).getText().equalsIgnoreCase("1")) 
				{
					getAction().doubleClick(batchPopupRowNosList.get(i)).build().perform();
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actRow1BatchNo=select1stRow_19thColumn.getText();
			String expRow1BatchNo="BATCH#CONSOLIDATE";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("********* Batch Rows Count : "+actBatchRows+"  value expected  "+expBatchRows);
			System.out.println("********* Total Quantity: "+actTotalQuantityInHeader+"  value expected  "+expTotalQuantityInHeader);
			System.out.println("********* Adjust Quantity: "+actAdjustQuantity+"  value expected  "+expAdjustQuantity);
			System.out.println("********* Balance: "+actBalance+"  value expected  "+expBalance);
			System.out.println("********* 1.Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
			System.out.println("********* 1.Base Quantity: "+act1stRowBaseQuantity+"  value expected  "+exp1stRowBaseQuantity);
			System.out.println("********* 1.Expiry Date: "+act1stRowExpiryDate+"  value expected  "+exp1stRowExpiryDate);
			System.out.println("********* 1st Row Batch No: "+actRow1BatchNo+"  value expected  "+expRow1BatchNo);
			System.out.println("********* Error Message    : "+actMessage      +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchRows==expBatchRows && actTotalQuantityInHeader.equalsIgnoreCase(expTotalQuantityInHeader) && actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity) 
				  && actBalance.equalsIgnoreCase(expBalance) && actAdjustQuantity.equalsIgnoreCase(expAdjustQuantity)
				  && act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act1stRowBaseQuantity.equalsIgnoreCase(exp1stRowBaseQuantity) 
				  && act1stRowExpiryDate.equalsIgnoreCase(exp1stRowExpiryDate) 
				  && actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo)
				  && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
			
				Thread.sleep(2000);
				
				return false;
			}
		}


			
		
		
		
		
		
		// Erase all Transactions after Consolidate Batches by Batch No
		
		public boolean checkEraseAllTransactionsAfterCompletingConsolidateBatchesByBatchNos() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
			

		// Updating Suggest the next batch no. in Inwards documents

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectSuggestNextBatchNoInInwardDoc() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConsolidateBatchesByBatchNoChkBox));
			
			if (ConsolidateBatchesByBatchNoChkBox.isSelected()) 
			{
				ConsolidateBatchesByBatchNoChkBox.click();	
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SuggestNextBatchNoDocChkBox));
			
			if (SuggestNextBatchNoDocChkBox.isSelected()==false) 
			{
				SuggestNextBatchNoDocChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actSuggestNextBatchNoInInwardDoc=SuggestNextBatchNoDocChkBox.isSelected();
			boolean expSuggestNextBatchNoInInwardDoc=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* isSelected: "+actSuggestNextBatchNoInInwardDoc+"  value expected  "+expSuggestNextBatchNoInInwardDoc);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actSuggestNextBatchNoInInwardDoc==expSuggestNextBatchNoInInwardDoc &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
				
			
		
		
		
			
			
		// Login and Logout After Updating Suggest the next batch no. in Inwards documents
			
		public boolean checkLogoutAndLoginAfterUpdatingSuggestNextBatchNoInInwardDoc() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));

			signIn.click();
	        
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	      
	        System.out.println("Login Successfully");
	      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
		

			
			
			




		// Purchase Voucher After Updating Suggest the next Batch No in inward document

		public boolean checkPurchaseVoucherVATVoucher1EnteringDataInRow1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("10");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.END);
			enter_Batch.sendKeys(Keys.SHIFT, Keys.HOME);
			enter_Batch.sendKeys("Batch#SuggestNext1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			String actRow1BatchNo = select1stRow_16thColumn.getText();
			String expRow1BatchNo = "Batch#SuggestNext1"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate = select1stRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow1BatchNo +"  value expected  "+expRow1BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
			
		
		
		public boolean checkPurchaseVoucherVATVoucher1EnteringDataInRow2SuggestNextBatch() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_1stColumn));
			select2ndRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_9thColumn));
			select2ndRow_9thColumn.click();
			enter_Quantity.sendKeys("10");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_11thColumn));
			select2ndRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
			select2ndRow_16thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 4); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_16thColumn));
			String actRow2BatchNo = select2ndRow_16thColumn.getText();
			String expRow2BatchNo = "Batch#SuggestNext2"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_18thColumn));
			String actExpiryDate = select2ndRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow2BatchNo +"  value expected  "+expRow2BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
			


		
		
		
		
		public boolean checkPurchaseVoucherVATVoucher1EnteringDataInRow3SuggestNext() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_1stColumn));
			select3rdRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_9thColumn));
			select3rdRow_9thColumn.click();
			enter_Quantity.sendKeys("10");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_11thColumn));
			select3rdRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_16thColumn));
			select3rdRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 3);  
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_16thColumn));
			String actRow3BatchNo = select3rdRow_16thColumn.getText();
			String expRow3BatchNo = "Batch#SuggestNext3"; 
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_18thColumn));
			String actExpiryDate = select3rdRow_18thColumn.getText();
		
			System.out.println("********** Batch No   : "+actRow3BatchNo +"  value expected  "+expRow3BatchNo);
			System.out.println("********** Expiry Date: "+actExpiryDate  +"  value expected  "+expExpiryDate);
			
			if(actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) && actExpiryDate.equalsIgnoreCase(expExpiryDate)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
			
			
			
		
		
		
		
		public boolean checkSavingPurchaseVoucherVATVoucher1With3RowsSuggestNext() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
			
			
			
			
			
			

		// Sales Invoice Voucher After Updating Suggest Next Batch in Inwards Document

		public boolean checkSavingSalesInvoiceVATVoucher1AfterUpdatingSuggestNextBatchInInwardsDocument() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("180");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("180");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(1000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			Set<String> actBatchNos = new HashSet<String>();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actdata1 = select1stRow_19thColumn.getText();
			String actdata2 = select2ndRow_19thColumn.getText();
			String actdata3 = select3rdRow_19thColumn.getText();
			
			actBatchNos.add(actdata1);
			actBatchNos.add(actdata2);
			actBatchNos.add(actdata3);
			
			
			Set<String> expBatchNos = new HashSet<String>();
			
			expBatchNos.add("Batch#SuggestNext1");
			expBatchNos.add("Batch#SuggestNext3");
			expBatchNos.add("Batch#SuggestNext2");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println(actBatchNos);
			System.out.println(expBatchNos);
			System.out.println("********* Error Message    : "+actMessage       +"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actBatchNos.containsAll(expBatchNos) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
			
			
		
		// Erase all Transactions after Suggest Next Batch No In Inward Documents
		
		public boolean checkEraseAllTransactionsAfterCompletingSuggestNextBatchNoInInwardDoc() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		

			


		// Updating Hide rate

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectHideRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SuggestNextBatchNoDocChkBox));
			
			if (SuggestNextBatchNoDocChkBox.isSelected()) 
			{
				SuggestNextBatchNoDocChkBox.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(HideRatesOptionChkBox));
			
			if (HideRatesOptionChkBox.isSelected()==false) 
			{
				HideRatesOptionChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actHideRate=HideRatesOptionChkBox.isSelected();
			boolean expHideRate=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* Hide Rate isSelected: "+actHideRate+"  value expected  "+expHideRate);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actHideRate==expHideRate &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
				
				
				
			
			
		// Login and Logout After Updating Hide Rate
			
		public boolean checkLogoutAndLoginAfterUpdatingHideRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));

			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	      
	        System.out.println("Login Successfully");
	      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
			

			
			

		// Purchase Voucher After Updating Hide Rate

		public boolean checkSavingPurchaseVoucherVATVoucher1AfterUpdatingHideRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			
			
		
		
		// Sales Invoice Voucher After Updating Hide Rate

		public boolean checkSavingSalesInvoiceVATVoucher1AfterUpdatingHideRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			int count = batchPopupHeaderList.size();
			System.out.println("Count : "+count);
			
			ArrayList<String> actBatchPopupHeader = new ArrayList<String>();
			
			for (int j = 0; j < count; j++) 
			{
				String data = batchPopupHeaderList.get(j).getText();
				actBatchPopupHeader.add(data);
			}
			
			
			ArrayList<String> expBatchPopupHeader = new ArrayList<String>();
			
			expBatchPopupHeader.add("Batch No, Base Quantity, , , , Expiry Date, , Qty Adjusted, , , , , , Purchase Date, , , ");
			
			System.out.println(actBatchPopupHeader);
			System.out.println(expBatchPopupHeader);
			
			String actResult = actBatchPopupHeader.toString();
			String expResult = expBatchPopupHeader.toString();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			
			System.out.println("******** 1st Row Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(actResult.equalsIgnoreCase(expResult) && act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		} 
			   
			    
				
		
		
		
		
		// Erase all Transactions after Hide Rate
		
		public boolean checkEraseAllTransactionsAfterCompletingHideRate() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		


			
		
		
		


		// Updating Input batch retail price

		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectInputBatchRetailPrice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(HideRatesOptionChkBox));
			
			if (HideRatesOptionChkBox.isSelected()) 
			{
				HideRatesOptionChkBox.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(InputBatchMrpChkBox));
			
			if (InputBatchMrpChkBox.isSelected()==false) 
			{
				InputBatchMrpChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actInputBatchRetailPrice=InputBatchMrpChkBox.isSelected();
			boolean expInputBatchRetailPrice=true;
			
			InputBatch_Value1Txt.sendKeys("Price-1");
			InputBatch_Value2Txt.sendKeys("Price-2");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* Hide Rate isSelected: "+actInputBatchRetailPrice+"  value expected  "+expInputBatchRetailPrice);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actInputBatchRetailPrice==expInputBatchRetailPrice &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				System.out.println("***Test Pass: Input Batch Retail Price is Updated***");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				System.out.println("***Test Fail: Input Batch Retail Price is NOT Updated***");
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
				
			
			
		// Login and Logout After Updating Input Batch Retail Price
			
		public boolean checkLogoutAndLoginAfterUpdatingInputBatchRetailPrice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
			
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));

			signIn.click();
	      
	        Thread.sleep(5000);
	      
	      	getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	      	
	      	System.out.println("Login Successfully");
		      
		    Thread.sleep(2000);
		
		    if(labelDashboard.isDisplayed()) 
		    {
		    	return true;
		    }
		    else
		    {
		    	return false;
		    }
		}
		
			


		
		
		
		

		// Purchase Voucher After Updating Input Batch retail Price

		public boolean checkSavingPurchaseVoucherVATVoucher1AfterUpdatingInputBatchRetailPrice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			
			int count = voucherEntryHeaderList.size();
			System.out.println("Count : "+count);
			
			ArrayList<String> actVoucherHeader = new ArrayList<String>();
			
			for (int j = 0; j < count; j++) 
			{
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();", voucherEntryHeaderList.get(j));

				String data = voucherEntryHeaderList.get(j).getText();
				actVoucherHeader.add(data);
			}
			
			
			ArrayList<String> expVoucherHeader = new ArrayList<String>();
			
			expVoucherHeader.add("Warehouse, Item, Tax Code, Purchase Account, Units, RD, Avg Rate, Avg Rate(O), Quantity, L-Purchases Orders, Rate, Gross, Discount, VAT, Taxable, Batch, Bins, Expiry Date, RMA, Remarks, Batch Rate, Price-1, Price-2");
			
			System.out.println(actVoucherHeader);
			System.out.println(expVoucherHeader);
			
			String actResult = actVoucherHeader.toString();
			String expResult = expVoucherHeader.toString();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_21stColumn));
			select1stRow_21stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BatchRate));
			enter_BatchRate.sendKeys("2");
			enter_BatchRate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BatchRateValue1));
			enter_BatchRateValue1.sendKeys("1");
			enter_BatchRateValue1.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_BatchRateValue2));
			enter_BatchRateValue2.sendKeys("1");
			enter_BatchRateValue2.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actResult.equalsIgnoreCase(expResult) && actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		

			


		
		
		
		// Sales Invoice Voucher After Updating Input Batch Retail Price
			
		public boolean checkUpdatingSalesInvoiceVATVoucherSettingsEditScreenSelectBehaviourDropDownAsBatchRate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			editScreenTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddFieldsBehaviourDropdown));
			Select behaviourDrpDwn=new Select(editScreenAddFieldsBehaviourDropdown);
			behaviourDrpDwn.selectByVisibleText("Batch Rate");
			
			String actBehaviour=behaviourDrpDwn.getFirstSelectedOption().getText();
			String expBehaviour="Batch Rate";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expMessage="Data saved successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("******* Behaviour Dropdown: "+actBehaviour+"  value expected  "+expBehaviour);
			
			if (actBehaviour.equalsIgnoreCase(expBehaviour) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}

				
				
				
				
				
		public boolean checkSavingSalesInvoiceVATVoucher1AfterUpdatingInputBatchRetailPrice() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			
			System.out.println("******** 1st Row Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		} 
				   
			
			
		
		
		
		
		// Erase all Transactions after Input batch retail price
		
		public boolean checkEraseAllTransactionsAfterCompletingInputBatchRetailPrice() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			Thread.sleep(2000);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		
			
		
		
		
		// Updating Do not show batches consumed in suspended and pending documents
			
		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectDoNotShowBatchesConsumedInSuspendedAndPendingDocuments() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(InputBatchMrpChkBox));
			
			if (InputBatchMrpChkBox.isSelected()) 
			{
				InputBatchMrpChkBox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(donotshowbatchesconsumedinsuspendedandpendingdocumentsChkBox));
			
			if (donotshowbatchesconsumedinsuspendedandpendingdocumentsChkBox.isSelected()==false) 
			{
				donotshowbatchesconsumedinsuspendedandpendingdocumentsChkBox.click();
			}
			
			
			boolean actDontShowConsumedInSuspendAndPendingDoc=donotshowbatchesconsumedinsuspendedandpendingdocumentsChkBox.isSelected();
			boolean expDontShowConsumedInSuspendAndPendingDoc=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* DontShowConsumedInSuspendAndPendingDoc isSelected: "+actDontShowConsumedInSuspendAndPendingDoc+"  value expected  "+expDontShowConsumedInSuspendAndPendingDoc);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actDontShowConsumedInSuspendAndPendingDoc==expDontShowConsumedInSuspendAndPendingDoc &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			

		
		// Login and Logout After Updating Do not show batches consumed in suspended and pending documents
		
		public boolean checkLogoutAndLoginAfterUpdatingDoNotShowBatchesConsumedInSuspendedAndPendingDocuments() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	        
	        System.out.println("Login Successfully");
		      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}	
	



		
		
		
		
		// Purchase Voucher After Updating Do Not show batches consumed in suspended and pending documents

		public boolean checkSavingPurchaseVoucherVATVoucher1AfterUpdatingDoNotShowBatchesConsumedInSuspendedAndPendingDocuments() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		// Sales Invoice Voucher After Updating Do Not show batches consumed in suspended and pending documents
		
		public boolean checkSavingSalesInvoiceVATVoucher1AfterUpdatingDoNotShowBatchesConsumedInSuspendedAndPendingDocuments() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="BATCH#PVAT1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** 1st Row Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		} 
				   
		
		
		
		
		
		public boolean checkSuspendingSalesInvoiceVATVoucher1() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				if (grid_VoucherNoList.get(i).getText().equalsIgnoreCase("1")) 
				{
					grid_CheckBoxList.get(i).click();
					
					Thread.sleep(2000);
					
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(suspendBtn));
			suspendBtn.click();
			
			String expMessage="Voucher Suspended Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			Thread.sleep(2000);
			
			if (actMessage.equalsIgnoreCase(expMessage)) 
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		


		
		
		
		public boolean checkSalesInvoiceVATVoucher2BatchPopupIsEmpty() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			boolean actTable=batchPopupTable.getText().isEmpty();
			boolean expTable=true;
			
			System.out.println(batchPopupTable.getText());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			Thread.sleep(2000);

			System.out.println("*********** Table isEmpty : "+actTable +"  value expected  "+expTable);
				
				
			if(actTable==expTable)
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		// Erase all Transactions after Do not show batches consumed in suspended and pending documents
		
		public boolean checkEraseAllTransactionsAfterCompletingDoNotShowBatchesConsumedInSuspendedAndPendingDocuments() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		// Updating Do not Convert to Upper Case
		
		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectDoNotConvertToUpperCase() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(donotshowbatchesconsumedinsuspendedandpendingdocumentsChkBox));
			
			if (donotshowbatchesconsumedinsuspendedandpendingdocumentsChkBox.isSelected()) 
			{
				donotshowbatchesconsumedinsuspendedandpendingdocumentsChkBox.click();
			}
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotConvertToUpperCaseChkBox));
			
			if (doNotConvertToUpperCaseChkBox.isSelected()==false) 
			{
				doNotConvertToUpperCaseChkBox.click();
			}
			
			
			boolean actdoNotConvertToUpperCase=doNotConvertToUpperCaseChkBox.isSelected();
			boolean expdoNotConvertToUpperCase=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* DontShowConsumedInSuspendAndPendingDoc isSelected: "+actdoNotConvertToUpperCase+"  value expected  "+expdoNotConvertToUpperCase);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actdoNotConvertToUpperCase==expdoNotConvertToUpperCase &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			

		
		// Login and Logout After Updating Do not Convert to Upper Case
		
		public boolean checkLogoutAndLoginAfterUpdatingDoNotConvertToUpperCase() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	        
	        System.out.println("Login Successfully");
		      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}	
	

		
		
		
		
		
		
		
		// Purchase Voucher After Updating Do Not Convert to Upper Case

		public boolean checkSavingPurchaseVoucherVATVoucher1AfterUpdatingDoNotConvertToUpperCase() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("50");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#DoNotConverUpperCase");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		// Sales Invoice Voucher After Updating Do Not Convert to Upper Case
		
		public boolean checkSavingSalesInvoiceVATVoucher1AfterUpdatingDoNotConvertToUpperCase() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("300");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("300");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="Batch#DoNotConverUpperCase";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			
			System.out.println("******** 1st Row Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			if(act1stRowBatchNo.equals(exp1stRowBatchNo) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		} 
				
		
		
		
		
		
		
		
		
		// Erase all Transactions after Do Not Convert to Upper Case
		
		public boolean checkEraseAllTransactionsAfterCompletingDoNotConvertToUpperCase() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		// Un-selecting Do not Convert to Upper Case
		
		public boolean checkSettingsConfigureTransactionsPreferencesBatchUnSelectingDoNotConvertToUpperCase() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(doNotConvertToUpperCaseChkBox));
			
			if (doNotConvertToUpperCaseChkBox.isSelected()) 
			{
				doNotConvertToUpperCaseChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actdoNotConvertToUpperCase=doNotConvertToUpperCaseChkBox.isSelected();
			boolean expdoNotConvertToUpperCase=false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* DontShowConsumedInSuspendAndPendingDoc isSelected: "+actdoNotConvertToUpperCase+"  value expected  "+expdoNotConvertToUpperCase);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actdoNotConvertToUpperCase==expdoNotConvertToUpperCase &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
			
			
			
			

		
		// Login and Logout After UnSelecting Do not Convert to Upper Case
		
		public boolean checkLogoutAndLoginAfterUnSelectingDoNotConvertToUpperCase() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	        
	        System.out.println("Login Successfully");
		      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}	
		
		
		
		
		
		
		
		
		
		public boolean checkSavingPurchaseVoucherVATVoucher1WithVoucherDateAs3DaysBefore() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
		    
		    Calendar docDate=Calendar.getInstance();
		    
		    docDate.add(Calendar.DAY_OF_WEEK, -3);
		    
		    String expDocDate=df.format(docDate.getTime());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.sendKeys(Keys.HOME);
			dateTxt.sendKeys(expDocDate);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("2");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#1");
			enter_Batch.sendKeys(Keys.TAB);
			
			Calendar cal=Calendar.getInstance();
			/*SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);*/
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkSavingPurchaseVoucherVATVoucher2WithVoucherDateAs2DaysBefore() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
		    
		    Calendar docDate=Calendar.getInstance();
		    
		    docDate.add(Calendar.DAY_OF_WEEK, -2);
		    
		    String expDocDate=df.format(docDate.getTime());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.sendKeys(Keys.HOME);
			dateTxt.sendKeys(expDocDate);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("2");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#2");
			enter_Batch.sendKeys(Keys.TAB);
			
			Calendar cal=Calendar.getInstance();
			/*SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);*/
			
			cal.add(Calendar.DAY_OF_WEEK, 3); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="2";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkSavingPurchaseVoucherVATVoucher3WithVoucherDateAsTodaysDate() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("2");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#3");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
		    
			Calendar cal=Calendar.getInstance();
			/*SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);*/
			
			cal.add(Calendar.DAY_OF_WEEK, 7); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);
	
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="3";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkSalesInvoiceVATVoucher1BatchPopupAfterSaving3PurchaseVoucherWithDifferentDates() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("40");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("32");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			String actRow1BatchNo = batchTable1stRow1stCol.getText();
			String actRow2BatchNo = batchTable2ndRow1stCol.getText();
			String actRow3BatchNo = batchTable3rdRow1stCol.getText();
				
			String expRow1BatchNo = "BATCH#1";
			String expRow2BatchNo = "BATCH#2";
			String expRow3BatchNo = "BATCH#3";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchCancelIcon));
			batchCancelIcon.click();
			
			Thread.sleep(2000);

			System.out.println("Row1 Batch No : "+actRow1BatchNo +"  value expected  "+expRow1BatchNo);
			System.out.println("Row2 Batch No : "+actRow2BatchNo +"  value expected  "+expRow2BatchNo);
			System.out.println("Row3 Batch No : "+actRow3BatchNo +"  value expected  "+expRow3BatchNo);
				
				
			if(actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				getWaitForAlert();
				getAlert().accept();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		
		public boolean checkEditingPurchaseVoucherVATVoucher1WithVoucherDateAs1DaysBefore() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("1")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
		    
		    Calendar docDate=Calendar.getInstance();
		    
		    docDate.add(Calendar.DAY_OF_WEEK, -1);
		    
		    String expDocDate=df.format(docDate.getTime());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.sendKeys(Keys.HOME);
			dateTxt.sendKeys(expDocDate);
			
			Thread.sleep(2000);
			
			if (getIsAlertPresent())
			{
				getAlert().accept();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		
		
		public boolean checkEditingPurchaseVoucherVATVoucher2WithVoucherDateAs3DaysBefore() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("2")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
		    
		    Calendar docDate=Calendar.getInstance();
		    
		    docDate.add(Calendar.DAY_OF_WEEK, -3);
		    
		    String expDocDate=df.format(docDate.getTime());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.sendKeys(Keys.HOME);
			dateTxt.sendKeys(expDocDate);
			
			if (getIsAlertPresent())
			{
				getAlert().accept();
			}

			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="2";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		
		public boolean checkEditingPurchaseVoucherVATVoucher3WithVoucherDateAs2DaysBefore() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			int count = grid_VoucherNoList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String VoucherNo = grid_VoucherNoList.get(i).getText();
				
				if (VoucherNo.equalsIgnoreCase("3")) 
				{
					getAction().doubleClick(grid_CheckBoxList.get(i)).build().perform();
				}
			}
			
			checkValidationMessage("Voucher loaded successfully");
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
		    
		    Calendar docDate=Calendar.getInstance();
		    
		    docDate.add(Calendar.DAY_OF_WEEK, -2);
		    
		    String expDocDate=df.format(docDate.getTime());
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dateTxt));
			dateTxt.sendKeys(Keys.HOME);
			dateTxt.sendKeys(expDocDate);
			
			Thread.sleep(2000);
			
			for (int i = 0; i < 5; i++) 
			{
				if (getIsAlertPresent())
				{
					getAlert().accept();
				}
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_16thColumn));
			select1stRow_16thColumn.click();
		
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="3";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			if(actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkSavingSalesInvoiceVATVoucher1BatchPopupAfterEditing3PurchaseVouchersDates() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("40");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("32");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			String actRow1BatchNo = batchTable1stRow1stCol.getText();
			String actRow2BatchNo = batchTable2ndRow1stCol.getText();
			String actRow3BatchNo = batchTable3rdRow1stCol.getText();
				
			String expRow1BatchNo = "BATCH#1";
			String expRow2BatchNo = "BATCH#2";
			String expRow3BatchNo = "BATCH#3";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String act1stRowBatchNo=select1stRow_19thColumn.getText();
			String exp1stRowBatchNo="Batch#2";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select2ndRow_19thColumn));
			String act2ndRowBatchNo=select2ndRow_19thColumn.getText();
			String exp2ndRowBatchNo="Batch#3";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select3rdRow_19thColumn));
			String act3rdRowBatchNo=select3rdRow_19thColumn.getText();
			String exp3rdRowBatchNo="Batch#1";
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("Row1 Batch No : "+actRow1BatchNo +"  value expected  "+expRow1BatchNo);
			System.out.println("Row2 Batch No : "+actRow2BatchNo +"  value expected  "+expRow2BatchNo);
			System.out.println("Row3 Batch No : "+actRow3BatchNo +"  value expected  "+expRow3BatchNo);
			System.out.println("******** 1st Row Batch No: "+act1stRowBatchNo+"  value expected  "+exp1stRowBatchNo);
			System.out.println("******** 2nd Row Batch No: "+act2ndRowBatchNo+"  value expected  "+exp2ndRowBatchNo);
			System.out.println("******** 3rd Row Batch No: "+act3rdRowBatchNo+"  value expected  "+exp3rdRowBatchNo);
			System.out.println("******** Error Message: "+actMessage+"  value expected  "+expMessage1+" : "+expMessage2);
			
			Thread.sleep(2000);
			
			if(actRow1BatchNo.equalsIgnoreCase(expRow1BatchNo) && actRow2BatchNo.equalsIgnoreCase(expRow2BatchNo) && actRow3BatchNo.equalsIgnoreCase(expRow3BatchNo) 
				&& act1stRowBatchNo.equalsIgnoreCase(exp1stRowBatchNo) && act2ndRowBatchNo.equalsIgnoreCase(exp2ndRowBatchNo) && act3rdRowBatchNo.equalsIgnoreCase(exp3rdRowBatchNo) 
				&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		} 

			
				
		
		
		
		
		public boolean checkEraseAllTransactions() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		
		
				
		
		
		
		
		public boolean checkPurchaseVoucherVATEditScreenAddingField() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			editScreenTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddFieldBtn));
			editScreenAddFieldBtn.click();
			
			if (getIsAlertPresent()) 
			{
				getAlert().accept();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
			editScreenCaptionTxt.sendKeys("Load Screen Into Issues");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDrpdwn));
			Select AddToNet = new Select(editScreenAddToNetDrpdwn);
			AddToNet.selectByVisibleText("Not Applicable");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToStockDrpdwn));
			Select AddToStock = new Select(editScreenAddToStockDrpdwn);
			AddToStock.selectByVisibleText("Not Applicable");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPositionDrpdwn));
			Select Position = new Select(editScreenPositionDrpdwn);
			Position.selectByVisibleText("After Gross");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
			editScreenApplyBtn.click();
			
			String expApplyMessage = "Data saved successfully";
			String actApplyMessage = checkValidationMessage(expApplyMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actApplyMessage.equalsIgnoreCase(expApplyMessage) && actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
		
		
		
		public boolean checkSalesInvoiceVATVoucherEditScreenAddingFieldFromPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			editScreenTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldBtn));
			editScreenLoadFieldBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldDrpdwn));
			editScreenLoadFieldDrpdwn.click();
			Select LoadFields = new Select(editScreenLoadFieldDrpdwn);
			LoadFields.selectByVisibleText("Purchases Voucher VAT");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadScreenIntoIssuesChkbox));
			editScreenLoadScreenIntoIssuesChkbox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsOkBtn));
			editScreenLoadFieldsOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}

		
		
		
		
		
		
		
		// Login and Logout After Adding fields in Purchase Voucher and Sales Invoice Voucher
		
		public boolean checkLogoutAndLoginAfterAddingFieldsInPurchaseVoucherAndSalesInvoiceVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	        
	        System.out.println("Login Successfully");
		      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}	
		
		
		
		
		
		
		
		
		public boolean checkSavingPurchaseVoucherVATVoucher1WithLoadScreenIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			
			int count = voucherEntryHeaderList.size();
			System.out.println("Count : "+count);
			
			ArrayList<String> actVoucherHeader = new ArrayList<String>();
			
			for (int j = 0; j < count; j++) 
			{
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();", voucherEntryHeaderList.get(j));

				String data = voucherEntryHeaderList.get(j).getText();
				actVoucherHeader.add(data);
			}
			
			
			ArrayList<String> expVoucherHeader = new ArrayList<String>();
			
			expVoucherHeader.add("Warehouse, Item, Tax Code, Purchase Account, Units, RD, Avg Rate, Avg Rate(O), Quantity, L-Purchases Orders, Rate, Gross, Discount, VAT, Taxable, Load Screen Into Issues, Batch, Bins, Expiry Date, RMA, Remarks");
			
			System.out.println(actVoucherHeader);
			System.out.println(expVoucherHeader);
			
			String actResult = actVoucherHeader.toString();
			String expResult = expVoucherHeader.toString();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("4");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_VAT));
			enter_VAT.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Taxable));
			enter_Taxable.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVLoadScreenIntoIssue));
			enter_PVLoadScreenIntoIssue.sendKeys("123");
			enter_PVLoadScreenIntoIssue.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actExpiryDate=select1stRow_19thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actResult.equalsIgnoreCase(expResult) && actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
		
		
		
		public boolean checkSalesInvoiceVATVoucher1WithoutLoadScreenIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			int count = voucherEntryHeaderList.size();
			System.out.println("Count : "+count);
			
			ArrayList<String> actVoucherHeader = new ArrayList<String>();
			
			for (int j = 0; j < count; j++) 
			{
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();", voucherEntryHeaderList.get(j));

				String data = voucherEntryHeaderList.get(j).getText();
				actVoucherHeader.add(data);
			}
			
			
			ArrayList<String> expVoucherHeader = new ArrayList<String>();
			
			expVoucherHeader.add("Warehouse, Item, Tax Code, Sales Account, Units, Avg Rate, Avg Rate(O), AQ, FQ, RD, Quantity, L-Sales Orders, Quantity to release, Rate, Gross, Discount, VAT, Taxable, Load Screen Into Issues, Batch, Bins, RMA, Remarks");
			
			System.out.println(actVoucherHeader);
			System.out.println(expVoucherHeader);
			
			String actResult = actVoucherHeader.toString();
			String expResult = expVoucherHeader.toString();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("24");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("24");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_20thColumn));
			select1stRow_20thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actLoadScreenIntoIssues = select1stRow_19thColumn.getText();
			String expLoadScreenIntoIssues = "0";
			
			System.out.println("Load Screen Into Issues : "+actLoadScreenIntoIssues+"  value expected  "+expLoadScreenIntoIssues);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);
			
			if(actResult.equalsIgnoreCase(expResult) && actLoadScreenIntoIssues.equalsIgnoreCase(expLoadScreenIntoIssues))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		} 
		
		
		
		
		
		
		
		// Updating Load Screen field details related to batch into issues
		
		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectingUpdatingLoadScreenFieldDetailsRetatedToBatchIntoIssue() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(LoadScreenDtlsBatchChkBox));
			
			if (LoadScreenDtlsBatchChkBox.isSelected()==false) 
			{
				LoadScreenDtlsBatchChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actLoadScreenDtlsBatchChkBox=LoadScreenDtlsBatchChkBox.isSelected();
			boolean expLoadScreenDtlsBatchChkBox=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* LoadScreenDtlsBatchChkBox isSelected: "+actLoadScreenDtlsBatchChkBox+"  value expected  "+expLoadScreenDtlsBatchChkBox);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actLoadScreenDtlsBatchChkBox==expLoadScreenDtlsBatchChkBox &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
		
		
		
		// Login and Logout After Updating Load Screen field details related to batch into issues
		
		public boolean checkLogoutAndLoginAfterUpdatingLoadScreenFieldDetailsRelatedToBatchIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	        
	        System.out.println("Login Successfully");
		      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}	
		
		
		
		
		
		
		
		
		public boolean checkSavingSalesInvoiceVATVoucher1WithLoadScreenIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("24");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("24");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_20thColumn));
			select1stRow_20thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actLoadScreenIntoIssues = select1stRow_19thColumn.getText();
			String expLoadScreenIntoIssues = "123";
			
			System.out.println("Load Screen Into Issues : "+actLoadScreenIntoIssues+"  value expected  "+expLoadScreenIntoIssues);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			if(actLoadScreenIntoIssues.equalsIgnoreCase(expLoadScreenIntoIssues) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		} 
		
		
		
		
		
		
		
		
		// Erase all Transactions after Load Screen Details Into Issues
		
		public boolean checkEraseAllTransactionsAfterCompletingLoadScreenDetailsIntoIssues() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			/*String expMessage = "Data deleted successfully";
			
			String actMessage = checkValidationMessage(expMessage);*/
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				System.out.println("Voucher Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resPass);
				return true;
			}
			else
			{
				System.out.println("Voucher Not Saved");
				//excelReader.setCellData(xlfile, "Sheet6", 262, 9, resFail);
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkPurchaseVoucherVATEditScreenDeletingField() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			editScreenTab.click();
			
			Thread.sleep(2000);
			
			int count = editScreenCaptionsList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String caption = editScreenCaptionsList.get(i).getText();
				
				if (caption.equalsIgnoreCase("Load Screen Into Issues")) 
				{
					editScreenDeleteBtnList.get(i).click();
					
					getWaitForAlert();
					getAlert().accept();

					break;
				}
			}
			
			String expDeletedMessage = "Data deleted successfully";
			String actDeletedMessage = checkValidationMessage(expDeletedMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actDeletedMessage.equalsIgnoreCase(expDeletedMessage) && actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkSalesInvoiceVATVoucherEditScreenDeletingLoadScreenIntoIssuesField() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			editScreenTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTabNextBtn));
			editScreenTabNextBtn.click();
			
			Thread.sleep(2000);
			
			int count = editScreenCaptionsList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String caption = editScreenCaptionsList.get(i).getText();
				
				if (caption.equalsIgnoreCase("Load Screen Into Issues")) 
				{
					editScreenDeleteBtnList.get(i).click();
					
					getWaitForAlert();
					getAlert().accept();

					break;
				}
			}
			
			String expDeletedMessage = "Data deleted successfully";
			String actDeletedMessage = checkValidationMessage(expDeletedMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actDeletedMessage.equalsIgnoreCase(expDeletedMessage) && actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}

		
		
		
		
		
		
		
		// UnSelecting Load Screen field details related to batch into issues
		
		public boolean checkSettingsConfigureTransactionsPreferencesBatchUnSelectingUpdatingLoadScreenFieldDetailsRetatedToBatchIntoIssue() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(LoadScreenDtlsBatchChkBox));
			
			if (LoadScreenDtlsBatchChkBox.isSelected()) 
			{
				LoadScreenDtlsBatchChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actLoadScreenDtlsBatchChkBox=LoadScreenDtlsBatchChkBox.isSelected();
			boolean expLoadScreenDtlsBatchChkBox=false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* LoadScreenDtlsBatchChkBox isSelected: "+actLoadScreenDtlsBatchChkBox+"  value expected  "+expLoadScreenDtlsBatchChkBox);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actLoadScreenDtlsBatchChkBox==expLoadScreenDtlsBatchChkBox &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
		
		
		
		// Login and Logout After Un-selecting Load Screen field details related to batch into issues
		
		public boolean checkLogoutAndLoginAfterUnSelectingLoadScreenFieldDetailsRelatedToBatchIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	        
	        System.out.println("Login Successfully");
		      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
		
		
		
		
		
		
		
		
		
		
		public boolean checkPurchaseVoucherVATEditLayoutAddingFieldInBody() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutAddFieldBtn));
			editLayoutAddFieldBtn.click();
			
			if (getIsAlertPresent()) 
			{
				getAlert().accept();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutCaptionTxt));
			editLayoutCaptionTxt.sendKeys("Load Layout Into Issues");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutDataTypeDrpdwn));
			Select DataType = new Select(editLayoutDataTypeDrpdwn);
			DataType.selectByVisibleText("Number");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
			editScreenApplyBtn.click();
			
			String expApplyMessage = "Data saved successfully";
			String actApplyMessage = checkValidationMessage(expApplyMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actApplyMessage.equalsIgnoreCase(expApplyMessage) && actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
		
		
		
		public boolean checkSavingPurchaseVoucherVATVoucher1WithLoadLayoutIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			
			int count = voucherEntryHeaderList.size();
			System.out.println("Count : "+count);
			
			ArrayList<String> actVoucherHeader = new ArrayList<String>();
			
			for (int j = 0; j < count; j++) 
			{
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();", voucherEntryHeaderList.get(j));

				String data = voucherEntryHeaderList.get(j).getText();
				actVoucherHeader.add(data);
			}
			
			ArrayList<String> expVoucherHeader = new ArrayList<String>();
			
			expVoucherHeader.add("Warehouse, Item, Tax Code, Purchase Account, Units, RD, Avg Rate, Avg Rate(O), Quantity, L-Purchases Orders, Rate, Gross, Discount, VAT, Taxable, Batch, Bins, Expiry Date, RMA, Remarks, Load Layout Into Issues");
			
			System.out.println(actVoucherHeader);
			System.out.println(expVoucherHeader);
			
			String actResult = actVoucherHeader.toString();
			String expResult = expVoucherHeader.toString();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("4");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_VAT));
			enter_VAT.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Taxable));
			enter_Taxable.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_21stColumn));
			select1stRow_21stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVLoadLayoutIntoIssue));
			enter_PVLoadLayoutIntoIssue.sendKeys("123");
			enter_PVLoadLayoutIntoIssue.sendKeys(Keys.TAB);	
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_18thColumn));
			String actExpiryDate=select1stRow_18thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actResult.equalsIgnoreCase(expResult) && actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
	
		
		
		
		public boolean checkSalesInvoiceVATVoucherEditLayoutAddingFieldFromPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldBtn));
			editLayoutLoadFieldBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldDrpdwn));
			editLayoutLoadFieldDrpdwn.click();
			Select LoadFields = new Select(editLayoutLoadFieldDrpdwn);
			LoadFields.selectByVisibleText("Purchases Voucher VAT");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadLayoutIntoIssuesChkbox));
			editLayoutLoadLayoutIntoIssuesChkbox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsOkBtn));
			editLayoutLoadFieldsOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}

		
		
		
		
		
		
		// Login and Logout After Adding fields in Purchase Voucher and Sales Invoice Voucher
		
		public boolean checkLogoutAndLoginAfterAddingLayoutFieldsInPurchaseVoucherAndSalesInvoiceVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	        
	        System.out.println("Login Successfully");
		      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}	
		
		
		
		
		
		
		
		
		
		
		
		public boolean checkSalesInvoiceVATVoucher1WithoutLoadLayoutIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			int count = voucherEntryHeaderList.size();
			System.out.println("Count : "+count);
			
			ArrayList<String> actVoucherHeader = new ArrayList<String>();
			
			for (int j = 0; j < count; j++) 
			{
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();", voucherEntryHeaderList.get(j));

				String data = voucherEntryHeaderList.get(j).getText();
				actVoucherHeader.add(data);
			}
			
			
			ArrayList<String> expVoucherHeader = new ArrayList<String>();
			
			expVoucherHeader.add("Warehouse, Item, Tax Code, Sales Account, Units, Avg Rate, Avg Rate(O), AQ, FQ, RD, Quantity, L-Sales Orders, Quantity to release, Rate, Gross, Discount, VAT, Taxable, Batch, Bins, RMA, Remarks, Load Layout Into Issues");
			
			System.out.println(actVoucherHeader);
			System.out.println(expVoucherHeader);
			
			String actResult = actVoucherHeader.toString();
			String expResult = expVoucherHeader.toString();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("24");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("24");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RemarksTxt));
			enter_RemarksTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesInvoiceLoadLayoutIntoIssue));
			enter_SalesInvoiceLoadLayoutIntoIssue.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_23rdColumn));
			String actLoadScreenIntoIssues = select1stRow_23rdColumn.getText();
			String expLoadScreenIntoIssues = "0";
			
			System.out.println("Load Screen Into Issues : "+actLoadScreenIntoIssues+"  value expected  "+expLoadScreenIntoIssues);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
			new_CloseBtn.click();
			
			getWaitForAlert();
			getAlert().accept();
			
			Thread.sleep(2000);
			
			if(actResult.equalsIgnoreCase(expResult) && actLoadScreenIntoIssues.equalsIgnoreCase(expLoadScreenIntoIssues))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		} 
		
		
		
		
		
		
	
		// Updating Load Screen field details related to batch into issues
		
		public boolean checkSettingsConfigureTransactionsPreferencesBatchSelectingUpdatingLoadLayoutFieldDetailsRetatedToBatchIntoIssue() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(LoadLayoutDtlsBatchChkBox));
			
			if (LoadLayoutDtlsBatchChkBox.isSelected()==false) 
			{
				LoadLayoutDtlsBatchChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actLoadLayoutDtlsBatchChkBox=LoadLayoutDtlsBatchChkBox.isSelected();
			boolean expLoadLayoutDtlsBatchChkBox=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* LoadLayoutDtlsBatchChkBox isSelected: "+actLoadLayoutDtlsBatchChkBox+"  value expected  "+expLoadLayoutDtlsBatchChkBox);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actLoadLayoutDtlsBatchChkBox==expLoadLayoutDtlsBatchChkBox &&  actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
		
		
		
		// Login and Logout After Updating Load Screen field details related to batch into issues
		
		public boolean checkLogoutAndLoginAfterUpdatingLoadLayoutFieldDetailsRelatedToBatchIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	        
	        System.out.println("Login Successfully");
		      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}	
		
		
		
		
		
		
		
		
		public boolean checkSavingSalesInvoiceVATVoucher1WithLoadLayoutIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("24");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("24");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			select1stRow_19thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RemarksTxt));
			enter_RemarksTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesInvoiceLoadLayoutIntoIssue));
			enter_SalesInvoiceLoadLayoutIntoIssue.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_23rdColumn));
			String actLoadLayoutIntoIssues = select1stRow_23rdColumn.getText();
			String expLoadLayoutIntoIssues = "123";
			
			System.out.println("Load Layout Into Issues : "+actLoadLayoutIntoIssues+"  value expected  "+expLoadLayoutIntoIssues);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			if(actLoadLayoutIntoIssues.equalsIgnoreCase(expLoadLayoutIntoIssues) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		} 
		
		
		
		
		
		
		
		
		// Erase all Transactions after Load Layout Details Into Issues
		
		public boolean checkEraseAllTransactionsAfterCompletingLoadLayoutDetailsIntoIssues() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			Thread.sleep(2000);
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkPurchaseVoucherVATEditLayoutDeletingField() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(2000);
			
			int count = editLayoutCaptionsList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String caption = editLayoutCaptionsList.get(i).getText();
				
				if (caption.equalsIgnoreCase("Load Layout Into Issues")) 
				{
					editLayoutDeleteBtnList.get(i).click();
					
					getWaitForAlert();
					getAlert().accept();

					break;
				}
			}
			
			String expDeletedMessage = "Data deleted successfully";
			String actDeletedMessage = checkValidationMessage(expDeletedMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actDeletedMessage.equalsIgnoreCase(expDeletedMessage) && actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		public boolean checkSalesInvoiceVATVoucherEditLayoutDeletingLoadLayoutIntoIssuesField() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(2000);
			
			int count = editLayoutCaptionsList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String caption = editLayoutCaptionsList.get(i).getText();
				
				if (caption.equalsIgnoreCase("Load Layout Into Issues")) 
				{
					editLayoutDeleteBtnList.get(i).click();
					
					getWaitForAlert();
					getAlert().accept();

					break;
				}
			}
			
			String expDeletedMessage = "Data deleted successfully";
			String actDeletedMessage = checkValidationMessage(expDeletedMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actDeletedMessage.equalsIgnoreCase(expDeletedMessage) && actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		// Selecting Load All details related to batch into issues
		
		public boolean checkSettingsConfigureTransactionsPreferencesBatchUpdatingLoadAllDetailsRetatedToBatchIntoIssue() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(LoadLayoutDtlsBatchChkBox));
			
			if (LoadLayoutDtlsBatchChkBox.isSelected()) 
			{
				LoadLayoutDtlsBatchChkBox.click();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(LoadAllDtlsBatchChkBox));
			
			if (LoadAllDtlsBatchChkBox.isSelected()==false) 
			{
				LoadAllDtlsBatchChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actLoadLayoutDtlsBatchChkBox=LoadLayoutDtlsBatchChkBox.isSelected();
			boolean expLoadLayoutDtlsBatchChkBox=false;
			
			boolean actLoadAllDtlsBatchChkBox=LoadAllDtlsBatchChkBox.isSelected();
			boolean expLoadAllDtlsBatchChkBox=true;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* LoadLayoutDtlsBatchChkBox isSelected: "+actLoadLayoutDtlsBatchChkBox+"  value expected  "+expLoadLayoutDtlsBatchChkBox);
			System.out.println("********* LoadAllDtlsBatchChkBox isSelected: "+actLoadAllDtlsBatchChkBox+"  value expected  "+expLoadAllDtlsBatchChkBox);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actLoadLayoutDtlsBatchChkBox==expLoadLayoutDtlsBatchChkBox && actLoadAllDtlsBatchChkBox==expLoadAllDtlsBatchChkBox 
					&& actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
		
		
		
		// Login and Logout After selecting Load All details related to batch into issues
		
		public boolean checkLogoutAndLoginAfterUnSelectingLoadLayoutFieldDetailsRelatedToBatchIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	        
	        System.out.println("Login Successfully");
		      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
		
		
		
	
	
	

	
		
		public boolean checkPurchaseVoucherVATEditScreenAddingFieldAndEditLayoutAddingField() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			editScreenTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddFieldBtn));
			editScreenAddFieldBtn.click();
			
			if (getIsAlertPresent()) 
			{
				getAlert().accept();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenCaptionTxt));
			editScreenCaptionTxt.sendKeys("Load Screen Into Issues");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToNetDrpdwn));
			Select AddToNet = new Select(editScreenAddToNetDrpdwn);
			AddToNet.selectByVisibleText("Not Applicable");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenAddToStockDrpdwn));
			Select AddToStock = new Select(editScreenAddToStockDrpdwn);
			AddToStock.selectByVisibleText("Not Applicable");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenPositionDrpdwn));
			Select Position = new Select(editScreenPositionDrpdwn);
			Position.selectByVisibleText("After Gross");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
			editScreenApplyBtn.click();
			
			String expScreenApplyMessage = "Data saved successfully";
			String actScreenApplyMessage = checkValidationMessage(expScreenApplyMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutAddFieldBtn));
			editLayoutAddFieldBtn.click();
			
			if (getIsAlertPresent()) 
			{
				getAlert().accept();
			}
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutCaptionTxt));
			editLayoutCaptionTxt.sendKeys("Load Layout Into Issues");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutDataTypeDrpdwn));
			Select DataType = new Select(editLayoutDataTypeDrpdwn);
			DataType.selectByVisibleText("Number");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenApplyBtn));
			editScreenApplyBtn.click();
			
			String expLayoutApplyMessage = "Data saved successfully";
			String actLayoutApplyMessage = checkValidationMessage(expLayoutApplyMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actScreenApplyMessage.equalsIgnoreCase(expScreenApplyMessage) && actLayoutApplyMessage.equalsIgnoreCase(expLayoutApplyMessage) 
					&& actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
		
		
		
		
		public boolean checkSalesInvoiceVATVoucherEditScreenAddingFieldAndEditLayoutAddingFieldFromPurchaseVoucherVAT() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			editScreenTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldBtn));
			editScreenLoadFieldBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldDrpdwn));
			editScreenLoadFieldDrpdwn.click();
			Select LoadFields = new Select(editScreenLoadFieldDrpdwn);
			LoadFields.selectByVisibleText("Purchases Voucher VAT");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadScreenIntoIssuesChkbox));
			editScreenLoadScreenIntoIssuesChkbox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenLoadFieldsOkBtn));
			editScreenLoadFieldsOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldBtn));
			editLayoutLoadFieldBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldDrpdwn));
			editLayoutLoadFieldDrpdwn.click();
			Select LoadField = new Select(editLayoutLoadFieldDrpdwn);
			LoadField.selectByVisibleText("Purchases Voucher VAT");
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadLayoutIntoIssuesChkbox));
			editLayoutLoadLayoutIntoIssuesChkbox.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutLoadFieldsOkBtn));
			editLayoutLoadFieldsOkBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}

		
		
		
		
		
		// Login and Logout After Adding Screen and Layout in Purchase Voucher and Sales Invoice Voucher
		
		public boolean checkLogoutAndLoginAfterAddingScreenAndLayoutInPurchaseVoucherAndSalesInvoiceVoucher() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(username));
			username.sendKeys("su");
			getAction().moveToElement(username).sendKeys(Keys.TAB).perform();

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(password));
			password.sendKeys("su");
	       
			getAction().moveToElement(password).sendKeys(Keys.TAB).perform();
	     
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(signIn));
	      
			signIn.click();
	      
	        Thread.sleep(5000);
	      
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(labelDashboard));
	        
	        System.out.println("Login Successfully");
		      
	        Thread.sleep(2000);
		
	        if(labelDashboard.isDisplayed()) 
	        {
	        	return true;
	        }
	        else
	        {
	        	return false;
	        }
		}
		
		
		
		
		
		
		
		public boolean checkSavingPurchaseVoucherVATVoucher1WithLoadScreenIntoIssuesAndLoadLayoutIntoIssue() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			String ScreenOpenedMessage=checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(vendorAccountTxt));
			vendorAccountTxt.sendKeys(Keys.SPACE);
				
			int vendorAccountCount=vendorAccountComboList.size();
			
			for (int i = 0; i < vendorAccountCount; i++) 
			{
				String vendorAccount=vendorAccountComboList.get(i).getText();
				
				if (vendorAccount.equalsIgnoreCase("Vendor A"))
				{
					vendorAccountComboList.get(i).click();
					vendorAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
				
			
			int count = voucherEntryHeaderList.size();
			System.out.println("Count : "+count);
			
			ArrayList<String> actVoucherHeader = new ArrayList<String>();
			
			for (int j = 0; j < count; j++) 
			{
				JavascriptExecutor js = (JavascriptExecutor) getDriver();
				js.executeScript("arguments[0].scrollIntoView();", voucherEntryHeaderList.get(j));

				String data = voucherEntryHeaderList.get(j).getText();
				actVoucherHeader.add(data);
			}
			
			ArrayList<String> expVoucherHeader = new ArrayList<String>();
			
			expVoucherHeader.add("Warehouse, Item, Tax Code, Purchase Account, Units, RD, Avg Rate, Avg Rate(O), Quantity, L-Purchases Orders, Rate, Gross, Discount, VAT, Taxable, Load Screen Into Issues, Batch, Bins, Expiry Date, RMA, Remarks, Load Layout Into Issues");
			
			System.out.println(actVoucherHeader);
			System.out.println(expVoucherHeader);
			
			String actResult = actVoucherHeader.toString();
			String expResult = expVoucherHeader.toString();
			
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_WarehouseTxt));
			enter_WarehouseTxt.click();
			
			enter_WarehouseTxt.sendKeys(Keys.SPACE);
		
			int pvvGridWarehouseListCount=pvvGridWarehouseList.size();
			
			for (int i = 0; i < pvvGridWarehouseListCount; i++) 
			{
				String warehouse=pvvGridWarehouseList.get(i).getText();
				if (warehouse.equalsIgnoreCase("HYDERABAD")) 
				{
					pvvGridWarehouseList.get(i).click();
					break;
				}
			}
	        enter_WarehouseTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			
			enter_ItemTxt.click();
			enter_ItemTxt.sendKeys(Keys.SPACE);
	        int pvvGridItemListCount=pvvGridItemList.size();
			for (int i = 0; i < pvvGridItemListCount; i++) 
			{
				String Item=pvvGridItemList.get(i).getText();
				if (Item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					pvvGridItemList.get(i).click();
					break;
				}
			}
			enter_ItemTxt.sendKeys(Keys.TAB);	
			
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PvTaxCode));
	        enter_PvTaxCode.sendKeys(Keys.TAB);
				
	        getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AccountTxt));
	        enter_AccountTxt.sendKeys(Keys.TAB);
			
	        Thread.sleep(2000);
	        
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_9thColumn));
			select1stRow_9thColumn.click();
			enter_Quantity.sendKeys("4");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_11thColumn));
			select1stRow_11thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PVDiscount));
			enter_PVDiscount.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_VAT));
			enter_VAT.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Taxable));
			enter_Taxable.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PV1LoadScreenIntoIssue));
			enter_PV1LoadScreenIntoIssue.sendKeys("123");
			enter_PV1LoadScreenIntoIssue.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Batch));
			enter_Batch.sendKeys("Batch#PVAT1");
			enter_Batch.sendKeys(Keys.TAB);
			
			DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
		    Date date=new Date();
	  	   
			Calendar cal=Calendar.getInstance();
			SimpleDateFormat currentDate = new SimpleDateFormat("dd/MM/yyyy");
			String presentDate = currentDate.format(cal.getTime());
			System.out.println("--------------Date Before Adding:: "+presentDate);
			
			cal.add(Calendar.DAY_OF_WEEK, 5); 
			
			String expExpiryDate=df.format(cal.getTime());
			
			System.out.println("--------------Date After Adding:: "+expExpiryDate);

			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Expirydate));
			enter_Expirydate.sendKeys(Keys.HOME,expExpiryDate);
			
			enter_Expirydate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actExpiryDate=select1stRow_19thColumn.getText();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_22ndColumn));
			select1stRow_22ndColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_PV1LoadLayoutIntoIssue));
			enter_PV1LoadLayoutIntoIssue.sendKeys("123");
			enter_PV1LoadLayoutIntoIssue.sendKeys(Keys.TAB);	
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			System.out.println("******** Expiry Date: "+actExpiryDate+"  value expected  "+expExpiryDate);
			
			
			if(actResult.equalsIgnoreCase(expResult) && actExpiryDate.equalsIgnoreCase(expExpiryDate) && actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
			
			
			
			
			
		
		public boolean checkSavingSalesInvoiceVATVoucher1WithLoadScreenIntoIssuesAndLoadLayoutIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(newBtn));
			newBtn.click();
			
			checkValidationMessage("Screen opened");
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(documentNumberTxt));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(customerAccountTxt));
			customerAccountTxt.click();
			customerAccountTxt.sendKeys(Keys.SPACE);
			
			int customerAccountCount=customerAccountComboList.size();
			
			for (int i = 0; i < customerAccountCount; i++) 
			{
				String customerAccount=customerAccountComboList.get(i).getText();
				
				if (customerAccount.equalsIgnoreCase("Customer A"))
				{
					customerAccountComboList.get(i).click();
					customerAccountTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(departmentTxt));
			departmentTxt.click();
			departmentTxt.sendKeys(Keys.SPACE);
			
			int departmentCount=departmentComboList.size();
			
			for (int i = 0; i < departmentCount; i++) 
			{
				String department=departmentComboList.get(i).getText();
				
				if (department.equalsIgnoreCase("DUBAI"))
				{
					departmentComboList.get(i).click();
					departmentTxt.sendKeys(Keys.TAB);
					break;
				}
			}
	
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATPlaceOFSupply));
			salesInvoiceVATPlaceOFSupply.click();
			salesInvoiceVATPlaceOFSupply.sendKeys("Abu Dhabi");
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_1stColumn));
			select1stRow_1stColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pvWarehouseTxt));
			pvWarehouseTxt.sendKeys(Keys.SPACE);
			
			int warehouseCount=warehouseBodyComboList.size();
			
			System.out.println("Warehouse List Size: "+warehouseCount);
			
			for (int i = 0; i < warehouseCount; i++) 
			{
				String warehouse=warehouseBodyComboList.get(i).getText();
				
				if (warehouse.equalsIgnoreCase("HYDERABAD"))
				{
					warehouseBodyComboList.get(i).click();
					pvWarehouseTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_ItemTxt));
			enter_ItemTxt.sendKeys(Keys.SPACE);
			
			int itemsCount=itemComboList.size();
			
			for (int i = 0; i < itemsCount; i++) 
			{
				String item=itemComboList.get(i).getText();
				
				if (item.equalsIgnoreCase("BR COGS ITEM")) 
				{
					itemComboList.get(i).click();
					enter_ItemTxt.sendKeys(Keys.TAB);
					break;
				}
			}
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_TaxCode));
			enter_TaxCode.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesAccount));
			enter_SalesAccount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_8thColumn));
			select1stRow_8thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_AQ));
			enter_AQ.sendKeys("24");
			enter_AQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_FQ));
			enter_FQ.sendKeys("24");
			enter_FQ.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_14thColumn));
			select1stRow_14thColumn.click();
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Rate));
			enter_Rate.sendKeys("1");
			enter_Rate.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Gross));
			enter_Gross.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_Discount));
			enter_Discount.sendKeys(Keys.TAB);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_20thColumn));
			select1stRow_20thColumn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchItemName));
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchPickOnFIFOIcon));
			batchPickOnFIFOIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(batchOkIcon));
			batchOkIcon.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_19thColumn));
			String actLoadScreenIntoIssues = select1stRow_19thColumn.getText();
			String expLoadScreenIntoIssues = "123";
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_RemarksTxt));
			enter_RemarksTxt.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(enter_SalesInvoice1LoadLayoutIntoIssue));
			enter_SalesInvoice1LoadLayoutIntoIssue.sendKeys(Keys.TAB);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(select1stRow_24thColumn));
			String actLoadLayoutIntoIssues = select1stRow_24thColumn.getText();
			String expLoadLayoutIntoIssues = "123";
			
			System.out.println("Load Screen Into Issues : "+actLoadScreenIntoIssues+"  value expected  "+expLoadScreenIntoIssues);
			System.out.println("Load Layout Into Issues : "+actLoadLayoutIntoIssues+"  value expected  "+expLoadLayoutIntoIssues);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(saveBtn));
			saveBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(pickBtn));
			pickBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(Bill_OkBtn));
			Bill_OkBtn.click();
			
			String expMessage1="Voucher saved successfully";
			String expMessage2="1";
			
			String actMessage=checkValidationMessage(expMessage1);
			
			if(actLoadScreenIntoIssues.equalsIgnoreCase(expLoadScreenIntoIssues) && actLoadLayoutIntoIssues.equalsIgnoreCase(expLoadLayoutIntoIssues) 
					&& actMessage.startsWith(expMessage1) && actMessage.endsWith(expMessage2))
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(new_CloseBtn));
				new_CloseBtn.click();
				
				Thread.sleep(2000);
				
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		} 
		
		
		
		
		
		// Erase all Transactions after Load Screen Details Into Issues and Load Layout Details Into Issues
		
		public boolean checkEraseAllTransactionsAfterCompletingLoadScreenDetailsIntoIssuesAndLoadLayoutDetailsIntoIssues() throws InterruptedException, EncryptedDocumentException, InvalidFormatException, IOException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(homeMenu));
			homeMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(dataMangementMenu));
			dataMangementMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAll));
			eraseAll.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseTranscationsRadio));
			eraseTranscationsRadio.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(eraseAllOkBtn));
			eraseAllOkBtn.click();
			
			if(getIsAlertPresent())
			{
				getWaitForAlert();
				
				getAlert().accept();
			}
			
			String expValidationMsg="Data deleted successfully";
			
			String actValidationMsg=checkValidationMessage(expValidationMsg);
			
			Thread.sleep(2000);
			
			System.out.println("************************************* CheckSavingPurchaseVoucherWithCovertOptionWithAllMandatoryFields  *********************************");
			System.out.println("Message  :  "+actValidationMsg +" Value Expected : "+expValidationMsg);
			
			if (actValidationMsg.equalsIgnoreCase(expValidationMsg))
			{
				return true;
			}
			else
			{
				return false;
			}
		}
		
		
		
		
		
		
		public boolean checkPurchaseVoucherVATDeletingLoadScreenIntoIssuesAndLoadLayoutIntoIssuesFields() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsPurchaseMenu));
			financialsTransactionsPurchaseMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(purchaseVouchersVat));
			purchaseVouchersVat.click();
			
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			editScreenTab.click();
			
			Thread.sleep(2000);
			
			int count = editScreenCaptionsList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String caption = editScreenCaptionsList.get(i).getText();
				
				if (caption.equalsIgnoreCase("Load Screen Into Issues")) 
				{
					editScreenDeleteBtnList.get(i).click();
					
					getWaitForAlert();
					getAlert().accept();

					break;
				}
			}
			
			String expScreenDeletedMessage = "Data deleted successfully";
			String actScreenDeletedMessage = checkValidationMessage(expScreenDeletedMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(2000);
			
			int captionCount = editLayoutCaptionsList.size();
			
			for (int i = 0; i < captionCount; i++) 
			{
				String caption = editLayoutCaptionsList.get(i).getText();
				
				if (caption.equalsIgnoreCase("Load Layout Into Issues")) 
				{
					editLayoutDeleteBtnList.get(i).click();
					
					getWaitForAlert();
					getAlert().accept();

					break;
				}
			}
			
			String expLayoutDeletedMessage = "Data deleted successfully";
			String actLayoutDeletedMessage = checkValidationMessage(expLayoutDeletedMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actScreenDeletedMessage.equalsIgnoreCase(expScreenDeletedMessage) && actLayoutDeletedMessage.equalsIgnoreCase(expLayoutDeletedMessage) 
					&& actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
		
		
		
		
		
		
		
		public boolean checkSalesInvoiceVATVoucherDeletingLoadScreenIntoIssuesAndLoadLayoutIntoIssuesFields() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsMenu));
			financialsMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionMenu));
			financialsTransactionMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(financialsTransactionsSalesMenu));
			financialsTransactionsSalesMenu.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(salesInvoiceVATVoucher));
			salesInvoiceVATVoucher.click();
		
			Thread.sleep(3000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(settingsBtn));
			settingsBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTab));
			editScreenTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editScreenTabNextBtn));
			editScreenTabNextBtn.click();
			
			Thread.sleep(2000);
			
			int count = editScreenCaptionsList.size();
			
			for (int i = 0; i < count; i++) 
			{
				String caption = editScreenCaptionsList.get(i).getText();
				
				if (caption.equalsIgnoreCase("Load Screen Into Issues")) 
				{
					editScreenDeleteBtnList.get(i).click();
					
					getWaitForAlert();
					getAlert().accept();

					break;
				}
			}
			
			String expScreenDeletedMessage = "Data deleted successfully";
			String actScreenDeletedMessage = checkValidationMessage(expScreenDeletedMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutTab));
			editLayoutTab.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(editLayoutBodyTab));
			editLayoutBodyTab.click();
			
			Thread.sleep(2000);
			
			int captionCount = editLayoutCaptionsList.size();
			
			for (int i = 0; i < captionCount; i++) 
			{
				String caption = editLayoutCaptionsList.get(i).getText();
				
				if (caption.equalsIgnoreCase("Load Layout Into Issues")) 
				{
					editLayoutDeleteBtnList.get(i).click();
					
					getWaitForAlert();
					getAlert().accept();

					break;
				}
			}
			
			String expLayoutDeletedMessage = "Data deleted successfully";
			String actLayoutDeletedMessage = checkValidationMessage(expLayoutDeletedMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			String expUpdateMessage = "Data saved successfully";
			String actUpdateMessage = checkValidationMessage(expUpdateMessage);
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
			CloseBtn.click();
			
			if (actScreenDeletedMessage.equalsIgnoreCase(expScreenDeletedMessage) && actLayoutDeletedMessage.equalsIgnoreCase(expLayoutDeletedMessage) 
					&& actUpdateMessage.equalsIgnoreCase(expUpdateMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			} 
			else 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(voucherhomeCloseBtn));
				voucherhomeCloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}

		
		
			
		
		
		// UnSelecting Load All details related to batch into issues
		
		public boolean checkSettingsConfigureTransactionsPreferencesBatchUnSelectingLoadAllDetailsRetatedToBatchIntoIssue() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(SettingsmenuBtn));
			SettingsmenuBtn.click();
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(ConfigureTransactionBtn));
			ConfigureTransactionBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(BatchBtn));
			BatchBtn.click();
			
			Thread.sleep(2000);
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(LoadAllDtlsBatchChkBox));
			
			if (LoadAllDtlsBatchChkBox.isSelected()) 
			{
				LoadAllDtlsBatchChkBox.click();
			}
			
			Thread.sleep(2000);
			
			boolean actLoadAllDtlsBatchChkBox=LoadAllDtlsBatchChkBox.isSelected();
			boolean expLoadAllDtlsBatchChkBox=false;
			
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(updateBtn));
			updateBtn.click();
			
			getWaitForAlert();
			String actAlertTxt=getAlert().getText();
			String expAlertTxt="Do you want to save the changes?";
			getAlert().accept();
			
			String expMessage="Data saved Successfully";
			
			String actMessage=checkValidationMessage(expMessage);
			
			System.out.println("********* LoadAllDtlsBatchChkBox isSelected: "+actLoadAllDtlsBatchChkBox+"  value expected  "+expLoadAllDtlsBatchChkBox);
			System.out.println("********* Alert Text: "+actAlertTxt+"  value expected  "+expAlertTxt);
			
			if(actLoadAllDtlsBatchChkBox==expLoadAllDtlsBatchChkBox && actAlertTxt.equalsIgnoreCase(expAlertTxt) && actMessage.equalsIgnoreCase(expMessage)) 
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return true;
			}
			else
			{
				getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(CloseBtn));
				CloseBtn.click();
				
				Thread.sleep(2000);
				
				return false;
			}
		}
			
		
		
		
		
		
		
		// Login and Logout
		
		public boolean checkLogoutAndLoginAfterUnSelectingLoadAllFieldDetailsRelatedToBatchIntoIssues() throws EncryptedDocumentException, InvalidFormatException, IOException, InterruptedException
		{
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(userNameDisplay));
			userNameDisplay.click();
		 
			getFluentWebDriverWait().until(ExpectedConditions.elementToBeClickable(logoutOption));
			logoutOption.click();
		  
			Thread.sleep(2000);
		  
			System.out.println("Logout  Successfully");
			
			if (username.isDisplayed()==true) 
			{
			
				return true;
			} 
			else 
			{

				return false;
			}

	}
		
		
			
		
	
			
			
			
			
			
			
			
			
			
			







			
			
	
	
	
	
	 public BatchWithAllOptionsPage(WebDriver driver)
	 {
	    PageFactory.initElements(driver, this);
	 }
}
